{"version":3,"sources":["taoensso/timbre.cljs"],"mappings":"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","names":["cljs.core/vector?","taoensso.encore/encore-version","taoensso.encore/assert-min-encore-version","var_args","G__55907","taoensso.timbre/default-output-fn","js/Error","data","taoensso.timbre.default_output_fn","opts","map__55913","cljs.core/--destructure-map","cljs.core.get","map__55914","no-stacktrace?","stacktrace-fonts","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","or__4212__auto__","cljs.core/force","temp__5753__auto__","err","taoensso.timbre/stacktrace","taoensso.timbre/println-appender","taoensso.timbre.appenders.core/println-appender","taoensso.timbre/console-appender","taoensso.timbre.appenders.core/console-appender","taoensso.timbre/example-config","G__55946","js/taoensso","js/taoensso.timbre","js/taoensso.timbre.*config*","taoensso.timbre/*config*","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","taoensso.timbre/swap-config!","seq55950","G__55951","cljs.core/first","cljs.core/next","self__4805__auto__","f","args","cljs.core.apply","taoensso.timbre/set-config!","m","_old","taoensso.timbre/merge-config!","old","taoensso.encore.nested_merge","taoensso.timbre/set-level!","cljs.core.assoc","taoensso.timbre/-levels-vec","taoensso.timbre/-levels-set","cljs.core/set","taoensso.timbre/-levels-map","cljs.core/zipmap","cljs.core.range","taoensso.timbre/valid-level?","x","taoensso.timbre/valid-level","cljs.core.ex_info","taoensso.timbre/level>=","y","G__56003","G__56005","taoensso.timbre/-compile-ns-filter","taoensso.encore/memoize_","taoensso.encore/compile-ns-filter","taoensso.timbre/ns-filter","whitelist","blacklist","?ns","fexpr__56008","G__56015","taoensso.timbre/may-log?","taoensso.timbre.may_log_QMARK_","?config","config","min-level","cljs.core/boolean","taoensso.timbre/str-join","xs","taoensso.encore.str_join","cljs.core.map","taoensso.encore/nil->str","cljs.core/record?","cljs.core.pr_str","js/taoensso.timbre.get-rate-limiter","taoensso.timbre/get-rate-limiter","appender-id","specs","taoensso.encore/limiter","taoensso.timbre/*context*","taoensso.timbre/vrest","v","cljs.core/count","cljs.core.subvec","taoensso.timbre/parse-vargs","msg-type","vargs","vec__56035","cljs.core.nth","auto-error?","taoensso.encore/kw-identical?","fmt-msg?","v0","and__4210__auto__","taoensso.encore/error?","?meta","?msg-fmt","vec__56038","cljs.core/map?","cljs.core/meta","cljs.core.dissoc","vec__56056","G__56089","taoensso.timbre/-log!","vargs_","?base-data","taoensso.timbre._log_BANG_","callsite-id","cljs.core/deref","vec__56102","instant","taoensso.encore/now-dt","context","cljs.core.conj","fexpr__56105","cljs.core/Delay","?data","cljs.core.reduce","acc","mf","result","cljs.core/reduced","map__56108","taoensso.encore.assoc_nx","G__56109","cljs.core._EQ_","taoensso.encore/format*","cljs.core/hash","output-fn1","cljs.core/reduce-kv","_","id","appender","rate-limit-specs","rate-limit-okay?","cljs.core/empty?","rl-fn","cljs.core/not","G__56120","map__56123","async?","apfn","output-fn","output_","temp__5751__auto__","mfn","G__56129","taoensso.timbre.stacktrace","taoensso.timbre/console-?appender","taoensso.timbre/ordered-levels","taoensso.timbre/log?","taoensso.timbre/logging-enabled?","compile-time-ns","taoensso.timbre/str-println","seq56176","self__4806__auto__","cljs.core/seq"],"sourcesContent":["(ns taoensso.timbre\n  \"Simple, flexible logging for Clojure/Script. No XML.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                               \n                                    \n                                                      \n                                                       \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer [] :refer-macros [have have?]]\n   [taoensso.timbre.appenders.core :as core-appenders])\n\n        \n  (:require-macros\n   [taoensso.timbre :as timbre-macros :refer []]))\n\n(if (vector? taoensso.encore/encore-version)\n  (enc/assert-min-encore-version [2 87 0])\n  (enc/assert-min-encore-version  2.87))\n\n;;;; Config\n\n     \n                           \n                               \n                                           \n                                                    \n                                                                                 \n\n(declare stacktrace)\n(defn default-output-fn\n  \"Default (fn [data]) -> string output fn.\n  Use`(partial default-output-fn <opts-map>)` to modify default opts.\"\n  ([     data] (default-output-fn nil data))\n  ([opts data] ; For partials\n   (let [{:keys [no-stacktrace? stacktrace-fonts]} opts\n         {:keys [level ?err #_vargs msg_ ?ns-str ?file hostname_\n                 timestamp_ ?line]} data]\n     (str\n                                         \n                                         \n       (str/upper-case (name level))  \" \"\n       \"[\" (or ?ns-str ?file \"?\") \":\" (or ?line \"?\") \"] - \"\n       (force msg_)\n       (when-not no-stacktrace?\n         (when-let [err ?err]\n           (str \"\\n\" (stacktrace err opts))))))))\n\n;;; Alias core appenders here for user convenience\n(declare default-err default-out)\n                                                             \n                                                          \n       (def println-appender core-appenders/println-appender)\n       (def console-appender core-appenders/console-appender)\n\n(def example-config\n  \"Example (+default) Timbre v4 config map.\n\n  APPENDERS\n    An appender is a map with keys:\n      :min-level       ; Level keyword, or nil (=> no minimum level)\n      :enabled?        ;\n      :async?          ; Dispatch using agent? Useful for slow appenders (clj only)\n      :rate-limit      ; [[ncalls-limit window-ms] <...>], or nil\n      :output-fn       ; Optional override for inherited (fn [data]) -> string\n      :timestamp-opts  ; Optional override for inherited {:pattern _ :locale _ :timezone _} (clj only)\n      :ns-whitelist    ; Optional, stacks with active config's whitelist\n      :ns-blacklist    ; Optional, stacks with active config's blacklist\n      :fn              ; (fn [data]) -> side effects, with keys described below\n\n    An appender's fn takes a single data map with keys:\n      :config          ; Entire config map (this map, etc.)\n      :appender-id     ; Id of appender currently dispatching\n      :appender        ; Entire map of appender currently dispatching\n      :instant         ; Platform date (java.util.Date or js/Date)\n      :level           ; Keyword\n      :error-level?    ; Is level e/o #{:error :fatal}?\n      :?ns-str         ; String,  or nil\n      :?file           ; String,  or nil\n      :?line           ; Integer, or nil ; Waiting on CLJ-865\n      :?err            ; First-arg platform error, or nil\n      :vargs           ; Vector of raw args\n      :output_         ; Forceable - final formatted output string created\n                       ; by calling (output-fn <this-data-map>)\n      :msg_            ; Forceable - args as a string\n      :timestamp_      ; Forceable - string (clj only)\n      :hostname_       ; Forceable - string (clj only)\n      :output-fn       ; (fn [data]) -> formatted output string\n                       ; (see `default-output-fn` for details)\n      :context         ; *context* value at log time (see `with-context`)\n\n      **NB** - any keys not specifically documented here should be\n      considered private / subject to change without notice.\n\n  MIDDLEWARE\n    Middleware are simple (fn [data]) -> ?data fns (applied left->right) that\n    transform the data map dispatched to appender fns. If any middleware\n    returns nil, NO dispatch will occur (i.e. the event will be filtered).\n\n  The `example-config` source code contains further settings and details.\n  See also `set-config!`, `merge-config!`, `set-level!`.\"\n\n  {:level :debug  ; e/o #{:trace :debug :info :warn :error :fatal :report}\n\n   ;; TODO Consider switching to `:ns-pattern` to match Tufte?\n   ;; Control log filtering by namespaces/patterns. Useful for turning off\n   ;; logging in noisy libraries, etc.:\n   :ns-whitelist  [] #_[\"my-app.foo-ns\"]\n   :ns-blacklist  [] #_[\"taoensso.*\"]\n\n   :middleware [] ; (fns [data]) -> ?data, applied left->right\n\n                        \n                                ; {:pattern _ :locale _ :timezone _}\n\n   :output-fn default-output-fn ; (fn [data]) -> string\n\n   :appenders\n        \n                                               \n                                                         \n     \n\n         \n   {;; :println (println-appender {})\n    :console (console-appender {})}})\n\n(comment\n  (set-config! example-config)\n  (infof \"Hello %s\" \"world :-)\"))\n\n(enc/defonce ^:dynamic *config* \"See `example-config` for info.\" example-config)\n                                                                                  \n                                            \n                                                                   \n\n(defn swap-config! [f & args]\n         (set!                   *config* (apply f *config* args))\n                                                 )\n\n(defn   set-config! [m] (swap-config! (fn [_old] m)))\n(defn merge-config! [m] (swap-config! (fn [old] (enc/nested-merge old m))))\n\n(defn     set-level! [level] (swap-config! (fn [m] (assoc m :level level))))\n                                   \n                                                              \n\n(comment (set-level! :info) *config*)\n\n;;;; Levels\n;; Note that for historical reasons we don't make a distinction\n;; between form \"level\"s and config \"min-level\"s.\n\n(def ^:const -levels-vec [:trace :debug :info :warn :error :fatal :report])\n(def ^:const -levels-set (set    -levels-vec))\n(def ^:const -levels-map (zipmap -levels-vec (next (range))))\n\n(defn valid-level? [x] (if (-levels-set x) true false))\n(defn valid-level  [x]\n  (or (-levels-set x)\n      (throw (ex-info \"Invalid Timbre logging level\" {:given x}))))\n\n(defn level>= [x y]\n  (>= ^long (-levels-map (valid-level x))\n      ^long (-levels-map (valid-level y))))\n\n(comment (qb 1e6 (level>= :info :debug))) ; 81.25\n\n;;;; Namespace filtering\n\n(def ^:private -compile-ns-filter (enc/memoize_ enc/compile-ns-filter))\n(def ^:private          ns-filter\n  \"Returns true iff given ns passes white/black lists.\"\n  (enc/memoize_\n    (fn [whitelist blacklist ?ns]\n      ((-compile-ns-filter whitelist blacklist) ?ns))))\n\n(comment\n  (qb 1e6 (ns-filter [\"foo.*\"] [\"foo.baz\"] \"foo.bar\")) ; 238.33\n  (ns-filter nil nil \"\")\n  (ns-filter nil nil nil))\n\n;;;; Combo filtering\n\n     \n                         \n                                        \n                                             \n           \n\n     \n                                 \n                                                        \n                                                              \n                               \n                                                                    \n\n                               \n                                                           \n                            \n\n     \n                                     \n                                                             \n       \n                                 \n                                                                                \n\n                                      \n\n                         \n                                                                                      \n                                                                                       \n\n                                                   \n                                                                                 \n\n                                                   \n                                                                                 \n\n                                                 \n\n                                           \n                                      \n      \n        \n                      \n                                 \n                                                                        \n                                                \n\n                          \n                                                                     \n                                                \n\n(defn                       ^boolean may-log?\n  \"Runtime check: would Timbre currently log at the given logging level?\n    * `?ns-str` arg required to support ns filtering\n    * `config`  arg required to support non-global config\"\n  ([level                ] (may-log? level nil     nil))\n  ([level ?ns-str        ] (may-log? level ?ns-str nil))\n  ([level ?ns-str ?config]\n   (let [config    (or  ?config *config*)\n         min-level (get  config :level :report)]\n     (and\n       (level>= level min-level)\n       (boolean ; Resolves #206 (issue with slf4j-timbre)\n         (ns-filter\n           (get config :ns-whitelist)\n           (get config :ns-blacklist)\n           ?ns-str))\n       true))))\n\n(comment (qb 1e5 (may-log? :info))) ; 34.13\n\n;;;; Utils\n\n(declare get-hostname)\n\n(enc/compile-if (do enc/str-join true) ; Encore v2.29.1+ with transducers\n  (defn- str-join [xs]\n    (enc/str-join \" \"\n      (map\n        (fn [x]\n          (let [x (enc/nil->str x)] ; Undefined, nil -> \"nil\"\n            (cond\n              (record?          x) (pr-str x)\n              ;; (enc/lazy-seq? x) (pr-str x) ; Dubious?\n              :else x))))\n      xs))\n  (defn- str-join [xs] (str/join \" \"                 (filter identity xs))))\n\n(comment\n  (defrecord MyRec [x])\n  (str-join [\"foo\" (MyRec. \"foo\")]))\n\n     \n                                \n                                                                      \n\n(comment (get-agent :my-appender))\n\n(defonce ^:private get-rate-limiter\n  (enc/memoize_ (fn [appender-id specs] (enc/limiter specs))))\n\n(comment (def rf (get-rate-limiter :my-appender [[10 5000]])))\n\n;;;; Internal logging core\n\n(def ^:dynamic *context* \"General-purpose dynamic logging context\" nil)\n                       \n                                                                     \n                                                              \n\n               \n                                                                        \n                             \n\n                                                          \n\n(defn- vrest [v] (if (> (count v) 1) (subvec v 1) []))\n(defn- parse-vargs\n  \"vargs -> [?err ?meta ?msg-fmt api-vargs]\"\n  [?err msg-type vargs]\n  (let [auto-error? (enc/kw-identical? ?err :auto)\n        fmt-msg?    (enc/kw-identical? msg-type :f)\n        [v0] vargs]\n\n    (if (and auto-error? (enc/error? v0))\n      (let [?err     v0\n            ?meta    nil\n            vargs    (vrest vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs])\n\n      (let [?meta    (if (and (map? v0) (:meta (meta v0))) v0 nil)\n            ?err     (or (:err ?meta) (if auto-error? nil ?err))\n            ?meta    (dissoc ?meta :err)\n            vargs    (if ?meta (vrest vargs) vargs)\n            ?msg-fmt (if fmt-msg? (let [[v0] vargs] v0) nil)\n            vargs    (if fmt-msg? (vrest vargs) vargs)]\n\n        [?err ?meta ?msg-fmt vargs]))))\n\n(comment\n  (let [ex (Exception. \"ex\")]\n    (qb 10000\n      (parse-vargs :auto :f [\"fmt\" :a :b :c])\n      (parse-vargs :auto :p [ex    :a :b :c])\n      (parse-vargs :auto :p [^:meta {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [       {:foo :bar} :a :b :c])\n      (parse-vargs :auto :p [ex])\n      (parse-vargs :auto :p [^:meta {:err ex}   :a :b :c])))\n  ;; [2.79 2.51 6.13 1.65 1.94 6.2]\n  (infof                                 \"Hi %s\" \"steve\")\n  (infof ^:meta {:hash :bar}             \"Hi %s\" \"steve\")\n  (infof ^:meta {:err (Exception. \"ex\")} \"Hi %s\" \"steve\"))\n\n(defn -log! \"Core low-level log fn. Implementation detail!\"\n\n  ;; TODO Temp workaround for\n  ;; https://github.com/fzakaria/slf4j-timbre/issues/20 and similar AOT tools\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_ ?base-data]\n   ;; (throw (ex-info \"Invalid internal Timbre call. Please try run `lein clean` to clear out-of-date build artifacts.\" {}))\n   (-log! config level ?ns-str ?file ?line msg-type ?err vargs_\n     ?base-data nil))\n\n  ([config level ?ns-str ?file ?line msg-type ?err vargs_\n    ?base-data callsite-id]\n\n  (when (may-log? level ?ns-str config)\n    (let [instant (enc/now-dt)\n          context *context*\n          vargs   @vargs_\n\n          [?err ?meta ?msg-fmt vargs]\n          (parse-vargs ?err msg-type vargs)\n\n          data ; Pre-middleware\n          (conj\n            (or ?base-data {})\n            {:instant instant\n             :level   level\n             :context context\n             :config  config ; Entire config!\n             :?ns-str ?ns-str\n             :?file   ?file\n             :?line   ?line\n                                                          \n             :error-level? (#{:error :fatal} level)\n             :?err     ?err\n             :?err_    (delay ?err) ; Deprecated\n             :?meta    ?meta        ; Undocumented\n             :?msg-fmt ?msg-fmt     ; Undocumented\n             :vargs    vargs})\n\n          ?data ; Post middleware\n          (reduce ; Apply middleware: data->?data\n            (fn [acc mf]\n              (let [result (mf acc)]\n                (if (nil? result)\n                  (reduced nil)\n                  result)))\n            data\n            (:middleware config))]\n\n      (when-let [data ?data] ; Not filtered by middleware\n        (let [{:keys [vargs]} data\n              data (assoc data :vargs_ (delay vargs)) ; Deprecated\n              data\n              (enc/assoc-nx data\n                :msg_\n                (delay\n                  (case msg-type\n                    nil \"\"\n                    :p  (str-join vargs)\n                    :f  #_(enc/format* (have string? ?msg-fmt) vargs)\n                    (do\n                      (when-not (string? ?msg-fmt)\n                        (throw\n                          (ex-info \"Timbre format-style logging call without a format pattern (string)\"\n                            #_data\n                            {:level    level\n                             :location (str (or ?ns-str ?file \"?\") \":\"\n                                            (or ?line         \"?\"))})))\n\n                      (enc/format* ?msg-fmt vargs))))\n\n                ;; Uniquely identifies a particular logging call for\n                ;; rate limiting, etc.\n                :hash_\n                (delay\n                  (hash\n                    ;; Nb excl. instant\n                    [callsite-id      ; Only useful for direct macro calls\n                     ?msg-fmt\n                     (get ?meta :hash ; Explicit hash provided\n                       vargs)])))\n\n              ;; Optimization: try maximize output+timestamp sharing\n              ;; between appenders\n              output-fn1 (enc/memoize_ (get config :output-fn default-output-fn))\n                                                                                                    \n                                   ; (fn [timestamp-opts]) -> Shared delay\n                   \n                           \n                         \n                       \n                                                               \n                            \n                                                 \n                                                                       \n                                         ]\n\n          (reduce-kv\n           (fn [_ id appender]\n             (when (and (:enabled? appender)\n                        (level>= level (or (:min-level appender) :trace)))\n\n               ;; Appender ns filter stacks with main config's ns filter:\n               (when (ns-filter (:ns-whitelist appender)\n                                (:ns-blacklist appender)\n                                ?ns-str)\n\n                 (let [rate-limit-specs (:rate-limit appender)\n                       rate-limit-okay?\n                       (or\n                        (empty? rate-limit-specs)\n                        (let [rl-fn (get-rate-limiter id rate-limit-specs)]\n                          (not (rl-fn (force (:hash_ data))))))]\n\n                   (when rate-limit-okay?\n                     (let [{:keys [async?] apfn :fn} appender\n\n                           output-fn\n                           (let [f (:output-fn appender)]\n                             (if (or (nil? f) (enc/kw-identical? f :inherit))\n                               output-fn1\n                               f))\n\n                                           \n                                \n                                                                 \n                                                                                   \n                                                                     \n                                                                             \n\n                           output_\n                           (delay\n                            (output-fn\n                                                                       \n                                    data))\n\n                           data\n                           (conj data\n                             {:appender-id id\n                              :appender    appender\n                              :output-fn   output-fn\n                              :output_     output_\n                                                                })\n\n                           ?data ; Final data prep before going to appender\n                           (if-let [mfn (:middleware-fn appender)]\n                             (mfn data) ; Deprecated, undocumented\n                             data)]\n\n                       (when-let [data ?data] ; Not filtered by middleware\n\n                         ;; NB Unless `async?`, we currently allow appenders\n                         ;; to throw since it's not particularly obvious\n                         ;; how/where we should report problems. Throwing\n                         ;; early seems preferable to just silently dropping\n                         ;; errors. In effect, we currently require appenders\n                         ;;  to take responsibility over appropriate trapping.\n\n                                (apfn data)\n                              \n                                   \n                                                                         \n                                       )))))))\n           nil\n           (:appenders config))))))\n  nil))\n\n(comment\n  (-log! *config* :info nil nil nil :p :auto\n    (delay [(do (println \"hi\") :x) :y]) nil \"callsite-id\"))\n\n                                                      \n\n                                              \n                                                     \n\n                                                     \n                                                \n                                                                             \n\n                                                            \n                                         \n                                \n                                                                   \n                                                        \n                                                \n                                     \n                                                       \n                                                    \n                                                            \n                                 \n                                             \n                                               \n\n                                                            \n\n                                                                            \n                                                                             \n                                     \n                       \n                                                                     \n                                                \n\n                                                                     \n                                                         \n\n(comment\n  (log! :info :p [\"foo\"])\n  (macroexpand '(log! :info :p [\"foo\"]))\n  (macroexpand '(log! :info :p [\"foo\"] {:?line 42})))\n\n;;;; Benchmarking\n\n(comment\n  (set-level! :debug)\n  (may-log? :trace)\n  (with-level :trace (log? :trace))\n  (qb 10000\n    (may-log? :trace)\n    (may-log? :trace \"foo\")\n    (tracef \"foo\")\n    (when false \"foo\"))\n  ;; [1.38 1.42 2.08 0.26]\n\n                                                \n                                                                            \n\n  (with-sole-appender {:enabled? true :fn (fn [data] nil)}\n    (qb 10000 (info \"foo\"))) ; ~74.58 ; Time to delays ready\n\n  (with-sole-appender {:enabled? true :fn (fn [data] (force (:output_ data)))}\n    (qb 10000 (info \"foo\"))) ; ~136.68 ; Time to output ready\n  )\n\n;;;; Main public API-level stuff\n;; TODO Have a bunch of cruft here trying to work around CLJ-865 to some extent\n\n;;; Log using print-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n;;; Log using format-style args\n                                                                                                      \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n                                                                                       \n\n(comment\n  (infof \"hello %s\" \"world\")\n  (infof (Exception.) \"hello %s\" \"world\")\n  (infof (Exception.)))\n\n                                    \n                               \n        \n                             \n                                               \n\n                                                \n                               \n        \n                             \n                                            \n                    \n\n                                                                              \n\n                                                                                           \n                                                                                           \n                                                                                           \n\n     \n                                     \n                                                    \n               \n               \n                   \n                                        \n                                                                \n                                   \n\n                                              \n                                            \n                                                                                  \n\n(comment\n  (log-errors             (/ 0))\n  (log-and-rethrow-errors (/ 0))\n  (logged-future          (/ 0))\n  (handle-uncaught-jvm-exceptions!))\n\n                                             \n                                  \n                         \n                             \n                                                            \n                                                                           \n\n                                 \n                 \n\n             \n                                                                             \n                                                                       \n                                                                                \n                                                                                \n                                                                                \n                                                                                 \n\n                                    \n(comment ((fn foo [x y] (get-env)) 5 10))\n\n     \n                  \n                 \n                                       \n                                                                        \n                                                                         \n                                            \n    \n                                       \n                                                                        \n                                                                         \n                                           \n\n                                          \n                                                    \n                                             \n\n;;;; Misc public utils\n\n     \n                            \n                                        \n                                                                   \n                                                                   \n                                                                   \n                                    \n                                                                 \n\n                                                                \n                                                                \n                                    \n                                                           \n\n     \n                    \n                                                               \n                                                           \n                                                      \n\n                                                                    \n                                                                             \n                                                                           \n                                                           \n                      \n                                                            \n         \n\n                                                     \n                                  \n                                                                     \n\n(comment (get-hostname))\n\n     \n                                       \n                                                          \n           \n\n(defn stacktrace\n  ([err     ] (stacktrace err nil))\n  ([err opts]\n          (str err) ; TODO Alternatives?\n        \n                                                       \n                                                  \n                                  \n                                \n                 \n                         \n                                     \n\n                                     \n                                        \n                                              \n                                               ))\n\n(comment (stacktrace (Exception. \"Boo\") {:stacktrace-fonts {}}))\n\n                                                     \n                      \n                                                                 \n                                               \n\n;;;; Deprecated\n\n(enc/deprecated\n         (def console-?appender core-appenders/console-appender)\n  (def ordered-levels -levels-vec)\n  (def log? may-log?)\n  (defn logging-enabled? [level compile-time-ns] (may-log? level (str compile-time-ns)))\n  (defn str-println      [& xs] (str-join xs))\n                                                                              \n                                                                              \n                                        \n                   \n                                           \n                                                  \n                                                          \n                                                                      )\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre.cljx\n"]}