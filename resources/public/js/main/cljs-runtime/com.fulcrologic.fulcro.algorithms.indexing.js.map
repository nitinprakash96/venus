{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/indexing.cljc"],"mappings":"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","names":["p__64011","map__64012","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.algorithms.indexing/index-query*","prop->classes","parent-component","parent-children","ast","parent-key","com.fulcrologic.fulcro.components/class->registry-key","cljs.core/seq","update-index","idx","k","c","cljs.core.update","cljs.core.fnil","cljs.core/conj","cljs.core.reduce","p__64013","map__64014","key","dispatch-key","children","child-ast","G__64016","cljs.core/vector?","cljs.core._EQ_","cljs.core/second","cljs.core.not_EQ_","cljs.core/Keyword","com.fulcrologic.fulcro.algorithms.indexing/index-query","query","edn-query-language.core/query->ast","com.fulcrologic.fulcro.algorithms.indexing/top-level-keys","map__64021","cljs.core.into","cljs.core.comp","cljs.core.map","cljs.core.filter","cljs.core/keyword?","p__64023","map__64024","com.fulcrologic.fulcro.algorithms.indexing/link-query-props","com.fulcrologic.fulcro.algorithms.denormalize/link-ref?","cljs.core.apply","clojure.set/union","cljs.core/first","com.fulcrologic.fulcro.algorithms.indexing/index-root!","app","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","map__64029","map__64030","cljs.core/deref","state-atom","runtime-atom","root-class","state-map","root-query","com.fulcrologic.fulcro.components.get_query","idents-in-joins","edn-query-language.core/ident?","cljs.core/keys","root-props","linked-props","cljs.core.swap_BANG_","s","cljs.core/assoc-in","com.fulcrologic.fulcro.algorithms.indexing/index-component*","runtime-state","instance","ident","cls","G__64037","cljs.core.update_in","com.fulcrologic.fulcro.algorithms.indexing/index-component!","this","map__64040","com.fulcrologic.fulcro.components/any->app","get-ident","com.fulcrologic.fulcro.components.component_options","com.fulcrologic.fulcro.components/react-type","props","com.fulcrologic.fulcro.components/props","js/goog.DEBUG","and__4210__auto__","com.fulcrologic.fulcro.components/component-name","com.fulcrologic.fulcro.algorithms.indexing/drop-component*","G__64050","cljs.core/disj","var_args","G__64053","com.fulcrologic.fulcro.algorithms.indexing/drop-component!","js/Error","map__64059","old-ident","com.fulcrologic.fulcro.components.get_ident","com.fulcrologic.fulcro.algorithms.indexing.drop_component_BANG_","com.fulcrologic.fulcro.algorithms.indexing/reindex","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","p__64078","map__64082","*after-render*-orig-val__64084","com.fulcrologic.fulcro.components/*after-render*","*after-render*-temp-val__64085","env","*after-render*-orig-val__64091","*after-render*-temp-val__64092","temp__5753__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","_"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.indexing\n  \"Functions that implement the query and component indexing. Fulcro keeps indexes of on-screen\n   components by ident and class. These enable Fulcro to find on-screen components for things\n   like targeted refresh. You are allowed to use the indexes to find components for whatever\n   purpose suits your needs (e.g. looking at component options).\"\n  (:require\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.guardrails.core :as gw :refer [>defn]]\n    [clojure.set :as set]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as encore]\n    [taoensso.timbre :as log]))\n\n(defn- index-query*\n  [prop->classes {parent-component :component\n                  parent-children  :children\n                  :as              ast}]\n  (let [parent-key      (comp/class->registry-key parent-component)\n        parent-children (seq parent-children)\n        update-index    (fn [idx k c] (update idx k (fnil conj #{}) c))]\n    (if parent-children\n      (reduce\n        (fn [idx {:keys [key dispatch-key children] :as child-ast}]\n          (cond-> idx\n            (and (vector? key) (= '_ (second key))) (update-index dispatch-key parent-key)\n            (and (vector? key) (not= '_ (second key))) (update-index key parent-key)\n            (keyword? key) (update-index key parent-key)\n            (seq children) (index-query* child-ast)))\n        prop->classes\n        parent-children)\n      prop->classes)))\n\n(defn index-query\n  \"Create an index of the given component-annotated query. Returns a map from query keyword to the component\n  class(es) that query for that keyword.\"\n  [query]\n  (let [ast (eql/query->ast query)]\n    (index-query* {} ast)))\n\n(defn top-level-keys\n  \"Return a set of keywords that are in the top-level of the given AST\"\n  [ast]\n  (let [{:keys [children]} ast]\n    (into #{} (comp (map :key) (filter keyword?)) children)))\n\n(defn link-query-props\n  \"Returns a set of all of the keys that appear in link refs `[:k '_]` in the entire ast.\"\n  [{:keys [key children] :as ast}]\n  (cond\n    (fdn/link-ref? key) (apply set/union #{(first key)} (map link-query-props children))\n    (seq children) (apply set/union (map link-query-props children))\n    :otherwise #{}))\n\n(defn index-root!\n  \"Index the root query (see index-query) and side-effect the result (`prop->classes`) into the given app.\n  This function assumes the `root-class` has already been supplied to the app (i.e. is has been mounted).\"\n  [app]\n  (log/debug \"(Re)indexing application query for prop->classes\")\n  (let [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [root-class]} @runtime-atom\n        state-map       @state-atom\n        root-query      (comp/get-query root-class state-map)\n        ast             (eql/query->ast root-query)\n        prop->classes   (index-query root-query)\n        idents-in-joins (into #{} (filter eql/ident?) (keys prop->classes))\n        root-props      (top-level-keys ast)\n        linked-props    (link-query-props ast)]\n    (swap! runtime-atom (fn [s]\n                          (-> s\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :root-props] root-props)\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :linked-props] linked-props)\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :idents-in-joins] idents-in-joins)\n                            (assoc-in [:com.fulcrologic.fulcro.application/indexes :prop->classes] prop->classes))))))\n\n(defn- index-component* [runtime-state instance ident cls]\n  (let [k (comp/class->registry-key cls)]\n    (cond-> runtime-state\n      k (update-in\n          [:com.fulcrologic.fulcro.application/indexes :class->components k]\n          (fnil conj #{})\n          instance)\n      ident (update-in\n              [:com.fulcrologic.fulcro.application/indexes :ident->components ident]\n              (fnil conj #{})\n              instance))))\n\n(defn index-component!\n  \"Add a component instance to the app index. This adds the component to the `class->components` and\n   `ident->components` indexes.\"\n  [this]\n  (let [{:keys [:com.fulcrologic.fulcro.application/runtime-atom]} (comp/any->app this)\n        get-ident (comp/component-options this :ident)]\n    (let [cls   (comp/react-type this)\n          props (comp/props this)\n          ident (when get-ident (get-ident this props))]\n      (when #?(:cljs goog.DEBUG :clj true)\n        (when (and ident (not (eql/ident? ident)))\n          (log/error \"Component\" (comp/component-name this) \"supplied an invalid ident\" ident \"using props\" props))\n        (when (and ident (nil? (second ident)))\n          (log/info\n            (str \"component \" (comp/component-name this) \"'s ident (\" ident \") has a `nil` second element.\"\n              \" This warning can be safely ignored if that is intended.\") \"Props were\" props)))\n      (swap! runtime-atom index-component* this ident cls))))\n\n(defn- drop-component*\n  [runtime-state instance ident cls]\n  (let [k (comp/class->registry-key cls)]\n    (cond-> (update-in runtime-state [:com.fulcrologic.fulcro.application/indexes :class->components k]\n              disj instance)\n      ident (update-in\n              [:com.fulcrologic.fulcro.application/indexes :ident->components ident]\n              disj\n              instance))))\n\n(defn drop-component!\n  \"Remove the component instance from the indexes. If ident is supplied it uses that, otherwise it gets the\n  ident from the component itself.\"\n  ([this ident]\n   (let [{:keys [:com.fulcrologic.fulcro.application/runtime-atom]} (comp/any->app this)\n         cls (comp/react-type this)]\n     (when (and #?(:cljs goog.DEBUG :clj true) ident)\n       (log/debug \"Dropping component from index\" (comp/component-name cls) ident))\n     (when ident\n       (swap! runtime-atom drop-component* this ident cls))))\n  ([this]\n   (let [old-ident (comp/get-ident this)]\n     (drop-component! this old-ident))))\n\n(defmutation reindex\n  \"Mutation: re-index the application (typically after a dynamic query change).\"\n  [_]\n  (action [{:keys [app]}]\n    (if app\n      (index-root! app)\n      (log/error \"Unable to re-index root. App was not set in the mutation env.\"))))\n"]}