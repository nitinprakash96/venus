["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing');\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.tx_processing !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx !== 'undefined')){\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\n\n/**\n * Returns true if the current thread is running non-nested transaction processing code.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.top_level_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$top_level_QMARK_(p__68208){\nvar map__68209 = p__68208;\nvar map__68209__$1 = cljs.core.__destructure_map(map__68209);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68209__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)),(0));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_submission_queue_BANG_(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___68420 = arguments.length;\nvar i__4819__auto___68421 = (0);\nwhile(true){\nif((i__4819__auto___68421 < len__4818__auto___68420)){\nargs__4824__auto__.push((arguments[i__4819__auto___68421]));\n\nvar G__68423 = (i__4819__auto___68421 + (1));\ni__4819__auto___68421 = G__68423;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$applyTo = (function (seq68210){\nvar G__68212 = cljs.core.first(seq68210);\nvar seq68210__$1 = cljs.core.next(seq68210);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68212,seq68210__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_submission_queue_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submission_queue(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_post_processing_steps_BANG_(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___68424 = arguments.length;\nvar i__4819__auto___68425 = (0);\nwhile(true){\nif((i__4819__auto___68425 < len__4818__auto___68424)){\nargs__4824__auto__.push((arguments[i__4819__auto___68425]));\n\nvar G__68427 = (i__4819__auto___68425 + (1));\ni__4819__auto___68425 = G__68427;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$applyTo = (function (seq68218){\nvar G__68219 = cljs.core.first(seq68218);\nvar seq68218__$1 = cljs.core.next(seq68218);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68219,seq68218__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_post_processing_steps_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_steps(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_active_queue_BANG_(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___68428 = arguments.length;\nvar i__4819__auto___68429 = (0);\nwhile(true){\nif((i__4819__auto___68429 < len__4818__auto___68428)){\nargs__4824__auto__.push((arguments[i__4819__auto___68429]));\n\nvar G__68430 = (i__4819__auto___68429 + (1));\ni__4819__auto___68429 = G__68430;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((1) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((1)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4825__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$applyTo = (function (seq68224){\nvar G__68225 = cljs.core.first(seq68224);\nvar seq68224__$1 = cljs.core.next(seq68224);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68225,seq68224__$1);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_active_queue_BANG_(app__$1,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$active_queue(app__$1){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_send_queue_BANG_(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___68432 = arguments.length;\nvar i__4819__auto___68433 = (0);\nwhile(true){\nif((i__4819__auto___68433 < len__4818__auto___68432)){\nargs__4824__auto__.push((arguments[i__4819__auto___68433]));\n\nvar G__68434 = (i__4819__auto___68433 + (1));\ni__4819__auto___68433 = G__68434;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((2) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((2)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4825__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,remote,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),args);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$applyTo = (function (seq68231){\nvar G__68232 = cljs.core.first(seq68231);\nvar seq68231__$1 = cljs.core.next(seq68231);\nvar G__68233 = cljs.core.first(seq68231__$1);\nvar seq68231__$2 = cljs.core.next(seq68231__$1);\nvar self__4805__auto__ = this;\nreturn self__4805__auto__.cljs$core$IFn$_invoke$arity$variadic(G__68232,G__68233,seq68231__$2);\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_send_queue_BANG_(app__$1,remote,v){\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),v);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$send_queue(app__$1,remote){\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)));\n});\n/**\n * Add `f` as a function that will run after the current transaction has been fully processed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_after_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_after_BANG_(app__$1,f){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),f], 0));\n});\n/**\n * Is there post processing to do?\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_QMARK_(app__$1){\nreturn cljs.core.boolean$(cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1)));\n});\n/**\n * Runs the queued post processing steps until the post-processing queue is empty.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.do_post_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$do_post_processing_BANG_(app__$1){\nvar steps = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1);\nwhile(true){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_(app__$1,cljs.core.PersistentVector.EMPTY);\n\nvar seq__68242_68437 = cljs.core.seq(steps);\nvar chunk__68243_68438 = null;\nvar count__68244_68439 = (0);\nvar i__68245_68440 = (0);\nwhile(true){\nif((i__68245_68440 < count__68244_68439)){\nvar f_68441 = chunk__68243_68438.cljs$core$IIndexed$_nth$arity$2(null,i__68245_68440);\ntry{(f_68441.cljs$core$IFn$_invoke$arity$0 ? f_68441.cljs$core$IFn$_invoke$arity$0() : f_68441.call(null));\n}catch (e68254){var e_68442 = e68254;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,137,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__68242_68437,chunk__68243_68438,count__68244_68439,i__68245_68440,steps,e_68442,f_68441){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_68442,\"Post processing step failed.\"], null);\n});})(seq__68242_68437,chunk__68243_68438,count__68244_68439,i__68245_68440,steps,e_68442,f_68441))\n,null)),null,-14525342);\n}\n\nvar G__68443 = seq__68242_68437;\nvar G__68444 = chunk__68243_68438;\nvar G__68445 = count__68244_68439;\nvar G__68446 = (i__68245_68440 + (1));\nseq__68242_68437 = G__68443;\nchunk__68243_68438 = G__68444;\ncount__68244_68439 = G__68445;\ni__68245_68440 = G__68446;\ncontinue;\n} else {\nvar temp__5753__auto___68447 = cljs.core.seq(seq__68242_68437);\nif(temp__5753__auto___68447){\nvar seq__68242_68448__$1 = temp__5753__auto___68447;\nif(cljs.core.chunked_seq_QMARK_(seq__68242_68448__$1)){\nvar c__4638__auto___68449 = cljs.core.chunk_first(seq__68242_68448__$1);\nvar G__68450 = cljs.core.chunk_rest(seq__68242_68448__$1);\nvar G__68451 = c__4638__auto___68449;\nvar G__68452 = cljs.core.count(c__4638__auto___68449);\nvar G__68453 = (0);\nseq__68242_68437 = G__68450;\nchunk__68243_68438 = G__68451;\ncount__68244_68439 = G__68452;\ni__68245_68440 = G__68453;\ncontinue;\n} else {\nvar f_68454 = cljs.core.first(seq__68242_68448__$1);\ntry{(f_68454.cljs$core$IFn$_invoke$arity$0 ? f_68454.cljs$core$IFn$_invoke$arity$0() : f_68454.call(null));\n}catch (e68259){var e_68455 = e68259;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,137,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__68242_68437,chunk__68243_68438,count__68244_68439,i__68245_68440,steps,e_68455,f_68454,seq__68242_68448__$1,temp__5753__auto___68447){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_68455,\"Post processing step failed.\"], null);\n});})(seq__68242_68437,chunk__68243_68438,count__68244_68439,i__68245_68440,steps,e_68455,f_68454,seq__68242_68448__$1,temp__5753__auto___68447))\n,null)),null,606112146);\n}\n\nvar G__68457 = cljs.core.next(seq__68242_68448__$1);\nvar G__68458 = null;\nvar G__68459 = (0);\nvar G__68460 = (0);\nseq__68242_68437 = G__68457;\nchunk__68243_68438 = G__68458;\ncount__68244_68439 = G__68459;\ni__68245_68440 = G__68460;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar temp__5753__auto__ = cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1));\nif(temp__5753__auto__){\nvar next_steps = temp__5753__auto__;\nvar G__68462 = next_steps;\nsteps = G__68462;\ncontinue;\n} else {\nreturn null;\n}\nbreak;\n}\n});\n/**\n * Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$in_transaction_QMARK_(p__68261){\nvar map__68262 = p__68261;\nvar map__68262__$1 = cljs.core.__destructure_map(map__68262);\nvar app__$1 = map__68262__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68262__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((0),cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)));\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$release_post_render_tasks_BANG_(app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n}),queue);\n})], 0));\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__68269,remote){\nvar map__68270 = p__68269;\nvar map__68270__$1 = cljs.core.__destructure_map(map__68270);\nvar tx_element = map__68270__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68270__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68270__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68270__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68270__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68270__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar result_68466 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_68467 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_68467)){\nvar env_68468 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_68466], null));\ntry{(handler_68467.cljs$core$IFn$_invoke$arity$1 ? handler_68467.cljs$core$IFn$_invoke$arity$1(env_68468) : handler_68467.call(null,env_68468));\n}catch (e68272){var e_68469 = e68272;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,169,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_68469,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception.\"], null);\n}),null)),null,-578787068);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__68277){\nvar map__68278 = p__68277;\nvar map__68278__$1 = cljs.core.__destructure_map(map__68278);\nvar tx_element = map__68278__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68278__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68278__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n}),tx_element,cljs.core.keys(results));\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$node_index(queue,txn_id){\nvar n = cljs.core.count(queue);\nvar idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__68285){\nvar map__68286 = p__68285;\nvar map__68286__$1 = cljs.core.__destructure_map(map__68286);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68286__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),queue);\nif((idx < n)){\nreturn idx;\n} else {\nreturn null;\n}\n});\n/**\n * Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n * handler and mark that remote as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_results_BANG_(app__$1,txn_id,ele_idx){\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\nvar tx_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,idx);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx], null),(function (p1__68288_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_(app__$1,tx_node,p1__68288_SHARP_);\n})], 0));\n});\n/**\n * Deal with a network result on the given txn/element.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$record_result_BANG_(var_args){\nvar G__68293 = arguments.length;\nswitch (G__68293) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (app__$1,txn_id,ele_idx,remote,result,result_key){\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar txn_idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,212,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue!\"], null);\n}),null)),null,1286390497);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.assoc_in,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result], 0));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_(app__$1,txn_id,ele_idx);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\n\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$remove_send_BANG_(app__$1,remote,txn_id,ele_idx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (old_queue){\nreturn cljs.core.filterv((function (p__68301){\nvar map__68302 = p__68301;\nvar map__68302__$1 = cljs.core.__destructure_map(map__68302);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68302__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68302__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n}),old_queue);\n})], 0));\n});\n/**\n * Generate a new send node and add it to the appropriate send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG_(app__$1,p__68306,ele_idx,remote){\nvar map__68308 = p__68306;\nvar map__68308__$1 = cljs.core.__destructure_map(map__68308);\nvar tx_node = map__68308__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68308__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68308__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\nvar id__67960__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__67960__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nvar G__68311 = app__$1;\nvar G__68312 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__68311,G__68312) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__68311,G__68312));\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__67960__auto__,cljs.core.dec);\n}});\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_result_handler_STAR_(result){\nvar id__67960__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__67960__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\nvar G__68315 = app__$1;\nvar G__68316 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__68315,G__68316) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__68315,G__68316));\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__67960__auto__,cljs.core.dec);\n}});\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),send_node], 0));\n} else {\ncom.fulcrologic.fulcro.algorithms.scheduling.defer((function (){\nreturn handler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n}),(1));\n}\n\nreturn null;\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__68318){\nvar map__68319 = p__68318;\nvar map__68319__$1 = cljs.core.__destructure_map(map__68319);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68319__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68319__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68319__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\n\nreturn updated_node;\n}\n}),tx_node,to_dispatch);\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_sends_BANG_(app__$1,p__68322){\nvar map__68323 = p__68322;\nvar map__68323__$1 = cljs.core.__destructure_map(map__68323);\nvar tx_node = map__68323__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68323__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68323__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n}),tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_tx_node_BANG_(app__$1,p__68325){\nvar map__68326 = p__68325;\nvar map__68326__$1 = cljs.core.__destructure_map(map__68326);\nvar tx_node = map__68326__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68326__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,tx_node)));\n}\n});\n/**\n * Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_send_queues_BANG_(app__$1){\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar seq__68328_68483 = cljs.core.seq(remote_names);\nvar chunk__68329_68484 = null;\nvar count__68330_68485 = (0);\nvar i__68331_68486 = (0);\nwhile(true){\nif((i__68331_68486 < count__68330_68485)){\nvar remote_68487 = chunk__68329_68484.cljs$core$IIndexed$_nth$arity$2(null,i__68331_68486);\nvar send_queue_68488 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_68487);\nvar vec__68358_68489 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_68488);\nvar p_68490 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68358_68489,(0),null);\nvar serial_68491 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68358_68489,(1),null);\nvar front_68492 = cljs.core.first(serial_68491);\nvar seq__68361_68494 = cljs.core.seq(p_68490);\nvar chunk__68362_68495 = null;\nvar count__68363_68496 = (0);\nvar i__68364_68497 = (0);\nwhile(true){\nif((i__68364_68497 < count__68363_68496)){\nvar item_68499 = chunk__68362_68495.cljs$core$IIndexed$_nth$arity$2(null,i__68364_68497);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__68361_68494,chunk__68362_68495,count__68363_68496,i__68364_68497,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68499,send_queue_68488,vec__68358_68489,p_68490,serial_68491,front_68492,remote_68487,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_68499,remote_68487);\n});})(seq__68361_68494,chunk__68362_68495,count__68363_68496,i__68364_68497,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68499,send_queue_68488,vec__68358_68489,p_68490,serial_68491,front_68492,remote_68487,remote_names,operations))\n);\n\n\nvar G__68501 = seq__68361_68494;\nvar G__68502 = chunk__68362_68495;\nvar G__68503 = count__68363_68496;\nvar G__68504 = (i__68364_68497 + (1));\nseq__68361_68494 = G__68501;\nchunk__68362_68495 = G__68502;\ncount__68363_68496 = G__68503;\ni__68364_68497 = G__68504;\ncontinue;\n} else {\nvar temp__5753__auto___68505 = cljs.core.seq(seq__68361_68494);\nif(temp__5753__auto___68505){\nvar seq__68361_68506__$1 = temp__5753__auto___68505;\nif(cljs.core.chunked_seq_QMARK_(seq__68361_68506__$1)){\nvar c__4638__auto___68507 = cljs.core.chunk_first(seq__68361_68506__$1);\nvar G__68508 = cljs.core.chunk_rest(seq__68361_68506__$1);\nvar G__68509 = c__4638__auto___68507;\nvar G__68510 = cljs.core.count(c__4638__auto___68507);\nvar G__68511 = (0);\nseq__68361_68494 = G__68508;\nchunk__68362_68495 = G__68509;\ncount__68363_68496 = G__68510;\ni__68364_68497 = G__68511;\ncontinue;\n} else {\nvar item_68512 = cljs.core.first(seq__68361_68506__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__68361_68494,chunk__68362_68495,count__68363_68496,i__68364_68497,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68512,seq__68361_68506__$1,temp__5753__auto___68505,send_queue_68488,vec__68358_68489,p_68490,serial_68491,front_68492,remote_68487,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_68512,remote_68487);\n});})(seq__68361_68494,chunk__68362_68495,count__68363_68496,i__68364_68497,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68512,seq__68361_68506__$1,temp__5753__auto___68505,send_queue_68488,vec__68358_68489,p_68490,serial_68491,front_68492,remote_68487,remote_names,operations))\n);\n\n\nvar G__68514 = cljs.core.next(seq__68361_68506__$1);\nvar G__68515 = null;\nvar G__68516 = (0);\nvar G__68517 = (0);\nseq__68361_68494 = G__68514;\nchunk__68362_68495 = G__68515;\ncount__68363_68496 = G__68516;\ni__68364_68497 = G__68517;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_68492))){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_68487,serial_68491);\n} else {\nvar map__68367_68519 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_68487,serial_68491);\nvar map__68367_68520__$1 = cljs.core.__destructure_map(map__68367_68519);\nvar send_queue_68521__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68367_68520__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node_68522 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68367_68520__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node_68522)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,map__68367_68519,map__68367_68520__$1,send_queue_68521__$1,send_node_68522,send_queue_68488,vec__68358_68489,p_68490,serial_68491,front_68492,remote_68487,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_68522,remote_68487);\n});})(seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,map__68367_68519,map__68367_68520__$1,send_queue_68521__$1,send_node_68522,send_queue_68488,vec__68358_68489,p_68490,serial_68491,front_68492,remote_68487,remote_names,operations))\n);\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_68487,send_queue_68521__$1);\n}\n\n\nvar G__68527 = seq__68328_68483;\nvar G__68528 = chunk__68329_68484;\nvar G__68529 = count__68330_68485;\nvar G__68530 = (i__68331_68486 + (1));\nseq__68328_68483 = G__68527;\nchunk__68329_68484 = G__68528;\ncount__68330_68485 = G__68529;\ni__68331_68486 = G__68530;\ncontinue;\n} else {\nvar temp__5753__auto___68531 = cljs.core.seq(seq__68328_68483);\nif(temp__5753__auto___68531){\nvar seq__68328_68532__$1 = temp__5753__auto___68531;\nif(cljs.core.chunked_seq_QMARK_(seq__68328_68532__$1)){\nvar c__4638__auto___68533 = cljs.core.chunk_first(seq__68328_68532__$1);\nvar G__68534 = cljs.core.chunk_rest(seq__68328_68532__$1);\nvar G__68535 = c__4638__auto___68533;\nvar G__68536 = cljs.core.count(c__4638__auto___68533);\nvar G__68537 = (0);\nseq__68328_68483 = G__68534;\nchunk__68329_68484 = G__68535;\ncount__68330_68485 = G__68536;\ni__68331_68486 = G__68537;\ncontinue;\n} else {\nvar remote_68538 = cljs.core.first(seq__68328_68532__$1);\nvar send_queue_68539 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_68538);\nvar vec__68370_68540 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_68539);\nvar p_68541 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68370_68540,(0),null);\nvar serial_68542 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68370_68540,(1),null);\nvar front_68543 = cljs.core.first(serial_68542);\nvar seq__68374_68552 = cljs.core.seq(p_68541);\nvar chunk__68375_68553 = null;\nvar count__68376_68554 = (0);\nvar i__68377_68555 = (0);\nwhile(true){\nif((i__68377_68555 < count__68376_68554)){\nvar item_68556 = chunk__68375_68553.cljs$core$IIndexed$_nth$arity$2(null,i__68377_68555);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__68374_68552,chunk__68375_68553,count__68376_68554,i__68377_68555,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68556,send_queue_68539,vec__68370_68540,p_68541,serial_68542,front_68543,remote_68538,seq__68328_68532__$1,temp__5753__auto___68531,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_68556,remote_68538);\n});})(seq__68374_68552,chunk__68375_68553,count__68376_68554,i__68377_68555,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68556,send_queue_68539,vec__68370_68540,p_68541,serial_68542,front_68543,remote_68538,seq__68328_68532__$1,temp__5753__auto___68531,remote_names,operations))\n);\n\n\nvar G__68558 = seq__68374_68552;\nvar G__68559 = chunk__68375_68553;\nvar G__68560 = count__68376_68554;\nvar G__68561 = (i__68377_68555 + (1));\nseq__68374_68552 = G__68558;\nchunk__68375_68553 = G__68559;\ncount__68376_68554 = G__68560;\ni__68377_68555 = G__68561;\ncontinue;\n} else {\nvar temp__5753__auto___68562__$1 = cljs.core.seq(seq__68374_68552);\nif(temp__5753__auto___68562__$1){\nvar seq__68374_68563__$1 = temp__5753__auto___68562__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__68374_68563__$1)){\nvar c__4638__auto___68564 = cljs.core.chunk_first(seq__68374_68563__$1);\nvar G__68567 = cljs.core.chunk_rest(seq__68374_68563__$1);\nvar G__68568 = c__4638__auto___68564;\nvar G__68569 = cljs.core.count(c__4638__auto___68564);\nvar G__68570 = (0);\nseq__68374_68552 = G__68567;\nchunk__68375_68553 = G__68568;\ncount__68376_68554 = G__68569;\ni__68377_68555 = G__68570;\ncontinue;\n} else {\nvar item_68571 = cljs.core.first(seq__68374_68563__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__68374_68552,chunk__68375_68553,count__68376_68554,i__68377_68555,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68571,seq__68374_68563__$1,temp__5753__auto___68562__$1,send_queue_68539,vec__68370_68540,p_68541,serial_68542,front_68543,remote_68538,seq__68328_68532__$1,temp__5753__auto___68531,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_68571,remote_68538);\n});})(seq__68374_68552,chunk__68375_68553,count__68376_68554,i__68377_68555,seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,item_68571,seq__68374_68563__$1,temp__5753__auto___68562__$1,send_queue_68539,vec__68370_68540,p_68541,serial_68542,front_68543,remote_68538,seq__68328_68532__$1,temp__5753__auto___68531,remote_names,operations))\n);\n\n\nvar G__68572 = cljs.core.next(seq__68374_68563__$1);\nvar G__68573 = null;\nvar G__68574 = (0);\nvar G__68575 = (0);\nseq__68374_68552 = G__68572;\nchunk__68375_68553 = G__68573;\ncount__68376_68554 = G__68574;\ni__68377_68555 = G__68575;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_68543))){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_68538,serial_68542);\n} else {\nvar map__68380_68576 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_68538,serial_68542);\nvar map__68380_68577__$1 = cljs.core.__destructure_map(map__68380_68576);\nvar send_queue_68578__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68380_68577__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node_68579 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68380_68577__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node_68579)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,map__68380_68576,map__68380_68577__$1,send_queue_68578__$1,send_node_68579,send_queue_68539,vec__68370_68540,p_68541,serial_68542,front_68543,remote_68538,seq__68328_68532__$1,temp__5753__auto___68531,remote_names,operations){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_68579,remote_68538);\n});})(seq__68328_68483,chunk__68329_68484,count__68330_68485,i__68331_68486,map__68380_68576,map__68380_68577__$1,send_queue_68578__$1,send_node_68579,send_queue_68539,vec__68370_68540,p_68541,serial_68542,front_68543,remote_68538,seq__68328_68532__$1,temp__5753__auto___68531,remote_names,operations))\n);\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_68538,send_queue_68578__$1);\n}\n\n\nvar G__68586 = cljs.core.next(seq__68328_68532__$1);\nvar G__68587 = null;\nvar G__68588 = (0);\nvar G__68589 = (0);\nseq__68328_68483 = G__68586;\nchunk__68329_68484 = G__68587;\ncount__68330_68485 = G__68588;\ni__68331_68486 = G__68589;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar seq__68381 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__68382 = null;\nvar count__68383 = (0);\nvar i__68384 = (0);\nwhile(true){\nif((i__68384 < count__68383)){\nvar op = chunk__68382.cljs$core$IIndexed$_nth$arity$2(null,i__68384);\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\n\n\nvar G__68590 = seq__68381;\nvar G__68591 = chunk__68382;\nvar G__68592 = count__68383;\nvar G__68593 = (i__68384 + (1));\nseq__68381 = G__68590;\nchunk__68382 = G__68591;\ncount__68383 = G__68592;\ni__68384 = G__68593;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__68381);\nif(temp__5753__auto__){\nvar seq__68381__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__68381__$1)){\nvar c__4638__auto__ = cljs.core.chunk_first(seq__68381__$1);\nvar G__68594 = cljs.core.chunk_rest(seq__68381__$1);\nvar G__68595 = c__4638__auto__;\nvar G__68596 = cljs.core.count(c__4638__auto__);\nvar G__68597 = (0);\nseq__68381 = G__68594;\nchunk__68382 = G__68595;\ncount__68383 = G__68596;\ni__68384 = G__68597;\ncontinue;\n} else {\nvar op = cljs.core.first(seq__68381__$1);\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\n\n\nvar G__68599 = cljs.core.next(seq__68381__$1);\nvar G__68600 = null;\nvar G__68601 = (0);\nvar G__68602 = (0);\nseq__68381 = G__68599;\nchunk__68382 = G__68600;\ncount__68383 = G__68601;\ni__68384 = G__68602;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG_(p__68387){\nvar map__68388 = p__68387;\nvar map__68388__$1 = cljs.core.__destructure_map(map__68388);\nvar app__$1 = map__68388__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68388__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68388__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar old_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar new_node = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n}),cljs.core.PersistentVector.EMPTY,old_queue);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_queue,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1))){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,328,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Old queue changed!\"], null);\n}),null)),null,827879409);\n} else {\n}\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_(app__$1,new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_(app__$1);\n\nreturn null;\n});\n/**\n * Returns true if the submission queue has work on it that can proceed without any restrictions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$available_work_QMARK_(app__$1){\nvar map__68392 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\nvar map__68392__$1 = cljs.core.__destructure_map(map__68392);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68392__$1,false);\nreturn cljs.core.boolean$(cljs.core.seq(ready));\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$activate_submissions_BANG_(app__$1){\nvar map__68394 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\nvar map__68394__$1 = cljs.core.__destructure_map(map__68394);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68394__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68394__$1,false);\nvar _ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_(app__$1,cljs.core.vec(blocked));\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__68393_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__68393_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__68393_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n}),ready);\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,cljs.core.PersistentVector.EMPTY),dispatched_nodes], 0));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_(app__$1);\n});\n/**\n * Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n * are processed as well until the submission queue remains empty. This can start network requests.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_all_immediate_work_BANG_(app__$1){\ntry{return com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_(app__$1);\n}catch (e68396){var e = e68396;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,361,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Error processing tx queue!\"], null);\n}),null)),null,-1998245625);\n}});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_queue_BANG_(app__$1,p__68398){\nwhile(true){\nvar map__68400 = p__68398;\nvar map__68400__$1 = cljs.core.__destructure_map(map__68400);\nvar options = map__68400__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68400__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68400__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nwhile(true){\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_(app__$1);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\ncontinue;\n} else {\n}\nbreak;\n}\n\nif(cljs.core.truth_((function (){var and__4210__auto__ = synchronous_QMARK_;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn component;\n} else {\nreturn and__4210__auto__;\n}\n})())){\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\n} else {\nvar temp__5753__auto___68608 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render!\",\"render!\",-1848688504));\nif(cljs.core.truth_(temp__5753__auto___68608)){\nvar render_BANG__68609 = temp__5753__auto___68608;\n(render_BANG__68609.cljs$core$IFn$_invoke$arity$2 ? render_BANG__68609.cljs$core$IFn$_invoke$arity$2(app__$1,options) : render_BANG__68609.call(null,app__$1,options));\n} else {\n}\n}\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_(app__$1);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\nvar G__68611 = app__$1;\nvar G__68612 = cljs.core.PersistentArrayMap.EMPTY;\napp__$1 = G__68611;\np__68398 = G__68612;\ncontinue;\n} else {\nreturn null;\n}\nbreak;\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$sync_tx_BANG_(var_args){\nvar args__4824__auto__ = [];\nvar len__4818__auto___68613 = arguments.length;\nvar i__4819__auto___68614 = (0);\nwhile(true){\nif((i__4819__auto___68614 < len__4818__auto___68613)){\nargs__4824__auto__.push((arguments[i__4819__auto___68614]));\n\nvar G__68615 = (i__4819__auto___68614 + (1));\ni__4819__auto___68614 = G__68615;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4825__auto__ = ((((0) < args__4824__auto__.length))?(new cljs.core.IndexedSeq(args__4824__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__4825__auto__);\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\",cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$applyTo = (function (seq68402){\nvar self__4806__auto__ = this;\nreturn self__4806__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq68402));\n}));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submit_sync_tx_BANG_(var_args){\nvar G__68407 = arguments.length;\nswitch (G__68407) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__68409,tx,options){\nvar map__68410 = p__68409;\nvar map__68410__$1 = cljs.core.__destructure_map(map__68410);\nvar app__$1 = map__68410__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68410__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__68412 = options;\nvar map__68412__$1 = cljs.core.__destructure_map(map__68412);\nvar options__$1 = map__68412__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68412__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68412__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68412__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__68404_SHARP_){\nreturn (((p1__68404_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__68404_SHARP_)));\n}),tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar refresh__$1 = (function (){var G__68413 = cljs.core.set(refresh);\nvar G__68413__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__68413,follow_on_reads):G__68413);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__68413__$1,ref);\n} else {\nreturn G__68413__$1;\n}\n})();\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),node], 0));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\nvar G__68415 = s;\nvar G__68415__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__68415,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__68415);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__68415__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__68415__$1;\n}\n}));\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_(app__$1)){\n} else {\nvar id__67960__auto___68623 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__67960__auto___68623,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_(app__$1,options__$1);\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__67960__auto___68623,cljs.core.dec);\n}}\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * [app abort-id]\n * \n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_ = com.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_;\n/**\n * Installs synchronous transaction processing on a fulcro application.\n * \n *   ```\n *   (defonce app (stx/with-synchronous-transactions\n *               (app/fulcro-app {...})))\n *   ```\n * \n *   This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n *   can behave synchronously. This processing system\n *   preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n *   operations will exactly match what you'd see if using the standard tx processing.\n * \n *   The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n *   `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n *   `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n * \n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n *   is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n *   - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n *  `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.with_synchronous_transactions = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$with_synchronous_transactions(app__$1){\nvar remotes = cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1))));\nvar send_queues = cljs.core.zipmap(remotes,cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1((function (){\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\n})));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"algorithms\",\"com.fulcrologic.fulcro.application/algorithms\",-397334538),cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"tx!\",\"com.fulcrologic.fulcro.algorithm/tx!\",1081877133),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"abort!\",\"com.fulcrologic.fulcro.algorithm/abort!\",1698846123),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_], 0)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),send_queues], null));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",78],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$in-transaction","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^I"],"~:excludes",["~#set",[]],"~:macros",["^ ","^F",["^ ","~:arglists",["~#list",[["~$app-sym","~$&","~$body"]]],"^8",92,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction","~:ns","^G","~:macro",true]],"^R","^G","~:reader-aliases",["^ "],"~:op","^T","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^12","^?","^@","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^12","~$cljs.core","^18","^I","^I","~$goog","^19","~$com.fulcrologic.fulcro.specs","^1:","^11","^11","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1<","~$sched","^1<","~$txn","~$com.fulcrologic.fulcro.algorithms.tx-processing","^1;","^1;","~$s","^@","^[","^[","^1?","^1?","^16","^16","^14","^14","^@","^@"],"~:seen",["^L",["~:require","~:require-macros"]],"~:uses",["^ ","^H","^I","^J","^I"],"^1B",["^ ","^?","^@","^13","^14","^15","^16","^18","^18","^I","^I","~$m","^1;","^1;","^1;","~$s","^@","^16","^16","^14","^14","^@","^@","^G","^G"],"~:form",["^O",["~$ns","^G","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ",["^O",["^1B",["^G","~:refer",["^F"]]]],["^O",["^1A",["^11","~:as","^10"],["^?","^1G","~$s"],["^1?","^1G","^1>"],["^1<","^1G","^1="],["^[","^1G","^Z"],["^1;","^1G","~$m"],["^16","^1G","^15"],["^1:"],["^I","^1F",["^H","^J"]],"^1:",["^12","^1G","^17"],["^14","^1G","^13"]]]]],"~:flags",["^ ","^1B",["^L",[]],"^1A",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^19","^18","^11","^@","^1?","^1<","^[","^1;","^16","^1:","^I","^12","^14"]],"^T","^G","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],"~:compiled-at",1635907793827,"^V",["^ ","^Z","^[","^10","^11","^12","^12","^?","^@","^13","^14","^15","^16","^17","^12","^18","^18","^I","^I","^19","^19","^1:","^1:","^11","^11","~$m","^1;","^1<","^1<","^1=","^1<","^1>","^1?","^1;","^1;","~$s","^@","^[","^[","^1?","^1?","^16","^16","^14","^14","^@","^@","^G","^G"],"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\n  \"A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing :refer [in-transaction]]))\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]))\n\n(defonce apps-in-tx (atom {}))\n\n(declare run-queue! available-work?)\n\n#?(:clj\n   (defmacro in-transaction [app-sym & body]\n     `(let [id# (:com.fulcrologic.fulcro.application/id ~app-sym)]\n        (swap! apps-in-tx update id# (fnil inc 0))\n        (try\n          ~@body\n          (finally\n            (swap! apps-in-tx update id# dec))))))\n\n(defn top-level?\n  \"Returns true if the current thread is running non-nested transaction processing code.\"\n  [{:com.fulcrologic.fulcro.application/keys [id]}]\n  (= (-> apps-in-tx deref (get id 0)) 0))\n\n(defn swap-submission-queue! [app & args] (apply swap! (get-in app [::config ::submission-queue]) args))\n(defn reset-submission-queue! [app v] (reset! (get-in app [::config ::submission-queue]) v))\n(defn submission-queue [app] @(get-in app [::config ::submission-queue]))\n(defn swap-post-processing-steps! [app & args] (apply swap! (get-in app [::config ::post-processing-steps]) args))\n(defn reset-post-processing-steps! [app v] (reset! (get-in app [::config ::post-processing-steps]) v))\n(defn post-processing-steps [app] @(get-in app [::config ::post-processing-steps]))\n(defn swap-active-queue! [app & args] (apply swap! (get-in app [::config ::active-queue]) args))\n(defn reset-active-queue! [app v] (reset! (get-in app [::config ::active-queue]) v))\n(defn active-queue [app] @(get-in app [::config ::active-queue]))\n(defn swap-send-queue! [app remote & args] (apply swap! (get-in app [::config ::send-queues remote]) args))\n(defn reset-send-queue! [app remote v] (reset! (get-in app [::config ::send-queues remote]) v))\n(defn send-queue [app remote] @(get-in app [::config ::send-queues remote]))\n\n(defn run-after!\n  \"Add `f` as a function that will run after the current transaction has been fully processed.\"\n  [app f]\n  (swap-post-processing-steps! app (fnil conj []) f))\n\n(defn post-processing?\n  \"Is there post processing to do?\"\n  [app]\n  (boolean (seq (post-processing-steps app))))\n\n(defn do-post-processing!\n  \"Runs the queued post processing steps until the post-processing queue is empty.\"\n  [app]\n  (loop [steps (post-processing-steps app)]\n    (reset-post-processing-steps! app [])\n    (doseq [f steps]\n      (try\n        (f)\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Post processing step failed.\"))))\n    (when-let [next-steps (seq (post-processing-steps app))]\n      (recur next-steps))))\n\n(defn in-transaction?\n  \"Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\"\n  [{:com.fulcrologic.fulcro.application/keys [id] :as app}]\n  (not= 0 (get @apps-in-tx id 0)))\n\n(defn release-post-render-tasks!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [app]\n  (swap-submission-queue! app (fn [queue] (mapv (fn [node] (update node ::txn/options dissoc :after-render?)) queue))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::txn/keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (txn/build-env app tx-node {:dispatch        dispatch\n                                            :transacted-ast  original-ast-node\n                                            :mutation-ast    (get desired-ast-nodes remote)\n                                            :transmitted-ast (get transmitted-ast-nodes remote)\n                                            :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception.\"))))))\n  (update tx-element ::txn/complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::txn/results ::txn/complete?] :as tx-element}]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn- node-index [queue txn-id]\n  (let [n   (count queue)\n        idx (reduce\n              (fn [idx {:keys [::txn/id]}]\n                (if (= id txn-id)\n                  (reduced idx)\n                  (inc idx)))\n              0\n              queue)]\n    (when (< idx n)\n      idx)))\n\n(defn distribute-results!\n  \"Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete.\"\n  [app txn-id ele-idx]\n  (let [active-queue (active-queue app)\n        idx          (node-index active-queue txn-id)\n        tx-node      (get active-queue idx)]\n    (swap-active-queue! app update-in [idx ::txn/elements ele-idx]\n      #(distribute-element-results! app tx-node %))))\n\n(defn record-result!\n  \"Deal with a network result on the given txn/element.\"\n  ([app txn-id ele-idx remote result result-key]\n   (let [active-queue (active-queue app)\n         txn-idx      (node-index active-queue txn-id)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::txn/id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue!\")\n       (do\n         (swap-active-queue! app assoc-in [txn-idx ::txn/elements ele-idx result-key remote] result)\n         (distribute-results! app txn-id ele-idx)))))\n  ([app txn-id ele-idx remote result]\n   (record-result! app txn-id ele-idx remote result ::txn/results)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [app remote txn-id ele-idx]\n  (swap-send-queue! app remote (fn [old-queue]\n                                 (filterv (fn [{::txn/keys [id idx]}]\n                                            (not (and (= txn-id id) (= ele-idx idx)))) old-queue))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue.\"\n  [app {::txn/keys [id options] :as tx-node} ele-idx remote]\n  (let [update-handler (fn progress-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result ::txn/progress)\n                           (run-queue! app {})))\n        ast            (get-in tx-node [::txn/elements ele-idx ::txn/transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result)\n                           (remove-send! app remote id ele-idx)\n                           (run-queue! app {})))\n        send-node      {::txn/id             id\n                        ::txn/idx            ele-idx\n                        ::txn/ast            ast\n                        ::txn/options        options\n                        ::txn/active?        false\n                        ::txn/result-handler handler\n                        ::txn/update-handler update-handler}]\n    (if ast\n      (swap-send-queue! app remote (fnil conj []) send-node)\n      ;; The handler would make a recursive call back to the queue processing, so we have to defer it if the AST wasn't set\n      (sched/defer #(handler {:status-code 200 :body {}}) 1))\n    nil))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {::txn/keys [idx dispatch started?]}]\n  (let [remotes     (set/intersection (set (keys dispatch)) (txn/app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::txn/elements idx ::txn/started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::txn/elements idx] (fn [tx-element] (txn/compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::txn/elements idx ::txn/started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::txn/options ::txn/elements] :as tx-node}]\n  (reduce\n    (fn [node element]\n      (queue-element-sends! app node element))\n    tx-node\n    elements))\n\n(defn process-tx-node!\n  [app {:keys [::txn/options] :as tx-node}]\n  (if (txn/fully-complete? app tx-node)\n    nil\n    (->> tx-node\n      (txn/run-actions! app)\n      (queue-sends! app)\n      (txn/update-progress! app))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\"\n  [app]\n  (let [remote-names (txn/app->remote-names app)\n        operations   (atom [])]\n    (doseq [remote remote-names]\n      (let [send-queue (send-queue app remote)\n            [p serial] (txn/extract-parallel send-queue)\n            front      (first serial)]\n        ;; parallel items are removed from the queues, since they don't block anything\n        (doseq [item p]\n          (swap! operations conj #(txn/net-send! app item remote)))\n        ;; sequential items are kept in queue to prevent out-of-order operation\n        (if (::active? front)\n          (reset-send-queue! app remote serial)\n          (let [{::txn/keys [send-queue send-node]} (txn/combine-sends app remote serial)]\n            (when send-node\n              (swap! operations conj #(txn/net-send! app send-node remote)))\n            (reset-send-queue! app remote send-queue)))))\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, nested send queue updates in those handlers could confuse our notion of what's going on.\n    (doseq [op @operations]\n      (op))))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  (let [old-queue        (active-queue app)\n        new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           old-queue)\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (txn/app->remote-names app)\n        explicit-refresh (txn/requested-refreshes app new-queue)\n        remotes-active?  (txn/active-remotes new-queue remotes)]\n    (when (not= old-queue (active-queue app))\n      (log/error \"Old queue changed!\"))\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (reset-active-queue! app new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (process-send-queues! app)\n    nil))\n\n(defn available-work?\n  \"Returns true if the submission queue has work on it that can proceed without any restrictions.\"\n  [app]\n  (let [{ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))]\n    (boolean (seq ready))))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [app]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))\n        _                (reset-submission-queue! app (vec blocked))\n        dispatched-nodes (mapv #(txn/dispatch-elements % (txn/build-env app %) m/mutate) ready)]\n    (swap-active-queue! app (fnil into []) dispatched-nodes)\n    (process-queue! app)))\n\n(defn run-all-immediate-work!\n  \"Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests.\"\n  [app]\n  (try\n    (activate-submissions! app)\n    (catch #?(:cljs :default :clj Exception) e\n      (log/error e \"Error processing tx queue!\"))))\n\n(defn run-queue! [app {:keys [component synchronous?] :as options}]\n  (loop []\n    (run-all-immediate-work! app)\n    (when (available-work? app)\n      (recur)))\n  (if (and synchronous? component)\n    (comp/refresh-component! component)\n    (when-let [render! (ah/app-algorithm app :render!)]\n      (render! app options)))\n  (release-post-render-tasks! app)\n  (when (available-work? app)\n    (recur app {})))\n\n(defn sync-tx! [& args] (throw (ex-info \"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\" {})))\n\n(defn submit-sync-tx!\n  ([app tx]\n   (submit-sync-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx options]\n   (let [{:keys [refresh only-refresh ref] :as options} options\n         follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n         node            (txn/tx-node tx options)\n         accumulate      (fn [r items] (into (set r) items))\n         refresh         (cond-> (set refresh)\n                           (seq follow-on-reads) (into follow-on-reads)\n                           ref (conj ref))]\n     (swap-submission-queue! app (fnil conj []) node)\n     (swap! runtime-atom (fn [s] (cond-> s\n                                   ;; refresh sets are cumulative because rendering is debounced\n                                   (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                   (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n     (when-not (in-transaction? app)\n       (in-transaction app\n         (run-queue! app options)))\n     (::txn/id node))))\n\n(def abort!\n  \"[app abort-id]\n\n   Implementation of abort when using this tx processing\"\n  txn/abort!)\n\n(defn with-synchronous-transactions\n  \"Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \\\"remotes\\\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  [app]\n  (let [remotes     (-> app :com.fulcrologic.fulcro.application/runtime-atom deref\n                      :com.fulcrologic.fulcro.application/remotes keys)\n        send-queues (zipmap remotes (repeatedly #(atom [])))]\n    (-> app\n      (update :com.fulcrologic.fulcro.application/algorithms assoc\n        :com.fulcrologic.fulcro.algorithm/tx! submit-sync-tx!\n        :com.fulcrologic.fulcro.algorithm/abort! abort!)\n      (assoc ::config {::submission-queue      (atom [])\n                       ::post-processing-steps (atom [])\n                       ::active-queue          (atom [])\n                       ::send-queues           send-queues}))))","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.algorithms","js/com.fulcrologic.fulcro.algorithms.tx-processing","js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing.apps-in-tx","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","cljs.core.atom","p__68208","map__68209","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","id","cljs.core._EQ_","cljs.core/deref","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","seq68210","G__68212","cljs.core/first","cljs.core/next","self__4805__auto__","app","args","cljs.core.apply","cljs.core/swap!","cljs.core.get_in","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","v","cljs.core/reset!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","seq68218","G__68219","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","seq68224","G__68225","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","seq68231","G__68232","G__68233","remote","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","f","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_","cljs.core.fnil","cljs.core/conj","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","cljs.core/boolean","cljs.core/seq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","steps","seq__68242","chunk__68243","count__68244","i__68245","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","e68254","e68259","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","next-steps","p__68261","map__68262","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_","queue","cljs.core.mapv","node","cljs.core.update","cljs.core/dissoc","p__68269","map__68270","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","tx-node","results","dispatch","desired-ast-nodes","transmitted-ast-nodes","original-ast-node","tx-element","result","handler","env","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","e68272","p__68277","map__68278","complete?","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","cljs.core.reduce","new-element","cljs.core/keys","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","txn-id","n","idx","p__68285","map__68286","cljs.core/reduced","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","ele-idx","active-queue","p1__68288#","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_","cljs.core/update-in","G__68293","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","js/Error","result-key","txn-idx","not-found?","cljs.core/assoc-in","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_","old-queue","cljs.core/filterv","p__68301","map__68302","p__68306","map__68308","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","options","update-handler","id__67960__auto__","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","cljs.core/dec","G__68311","G__68312","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","ast","G__68315","G__68316","send-node","com.fulcrologic.fulcro.algorithms.scheduling/defer","p__68318","map__68319","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","started?","remotes","clojure.set.intersection","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","to-dispatch","clojure.set.difference","cljs.core/contains?","updated-node","cljs.core.update_in","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","p__68322","map__68323","elements","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","element","p__68325","map__68326","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","remote-names","operations","seq__68328","chunk__68329","count__68330","i__68331","vec__68358","cljs.core.nth","vec__68370","send-queue","p","serial","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","front","seq__68361","chunk__68362","count__68363","i__68364","seq__68374","chunk__68375","count__68376","i__68377","item","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","map__68367","map__68380","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","seq__68381","chunk__68382","count__68383","i__68384","op","p__68387","map__68388","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","state-atom","runtime-atom","new-queue","temp__5751__auto__","new-node","cljs.core.conj","accumulate","r","items","cljs.core.into","explicit-refresh","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","remotes-active?","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","cljs.core/assoc","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","map__68392","ready","cljs.core/group-by","cljs.core.comp","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","map__68394","blocked","_","cljs.core/vec","dispatched-nodes","p1__68393#","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","com.fulcrologic.fulcro.mutations/mutate","cljs.core/into","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","e68396","p__68398","map__68400","component","synchronous?","and__4210__auto__","com.fulcrologic.fulcro.components/refresh-component!","render!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","seq68402","self__4806__auto__","cljs.core.ex_info","G__68407","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","p__68409","map__68410","tx","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_","map__68412","refresh","only-refresh","ref","follow-on-reads","p1__68404#","cljs.core.filter","cljs.core/Keyword","edn-query-language.core/ident?","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","G__68413","s","G__68415","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","send-queues","cljs.core/zipmap","cljs.core.repeatedly","cljs.core.assoc"]],"~:used-vars",["^L",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$cljs.core/--destructure-map","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","~$cljs.core/comp","~$clojure.set/intersection","~$com.fulcrologic.fulcro.algorithms.scheduling/defer","~$js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing.apps-in-tx","~$js/com.fulcrologic.fulcro.algorithms.tx-processing","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$cljs.core/repeatedly","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$cljs.core/dec","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","~$taoensso.timbre/-log!","~$cljs.core/IndexedSeq","~$com.fulcrologic.fulcro.mutations/mutate","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","~$cljs.core/count","~$js/com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","~$cljs.core/deref","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$js/com.fulcrologic.fulcro","~$cljs.core/Keyword","~$cljs.core/group-by","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","~$cljs.core/mapv","~$cljs.core/not=","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","~$cljs.core/dissoc","~$cljs.core/Delay","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/reset!","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","~$cljs.core/zipmap","~$cljs.core/update","~$js/com.fulcrologic","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$cljs.core/filterv","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","~$cljs.core/-nth","~$js/com","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","~$clojure.set/difference","~$js/com.fulcrologic.fulcro.algorithms","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/reduced","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/assoc","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$cljs.core/first","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/update-in","~$js/Error","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","~$cljs.core/boolean","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","~$cljs.core/inc","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1L","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^19","^18","~$com.fulcrologic.fulcro.algorithms.do-not-use","^12","^14","^16"]]],["^1L","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.dom.HtmlElement"]]],["^1L","goog/async/freelist.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","cljs/core/async/impl/ioc_helpers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$cljs.core.async.impl.protocols"]]],["^1L","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.labs.userAgent.util","~$goog.string"]]],["^1L","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18"]]],["^1L","goog/crypt/crypt.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.array","~$goog.asserts"]]],["^1L","cljs/core/async.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^4R","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","^4U"]]],["^1L","goog/timer/timer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1L","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^14"]]],["^1L","cljs/spec/gen/alpha.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$goog.Uri"]]],["^1L","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$clojure.string","^4T"]]],["^1L","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4V"]]],["^1L","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/string/stringformat.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4T"]]],["^1L","goog/events/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1L","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4S","~$goog.object","~$goog.string.internal"]]],["^1L","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^58"]]],["^1L","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V"]]],["^1L","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^14","^54","^12","^57","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1L","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$expound.paths","^@"]]],["^1L","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4S","~$goog.reflect","^4T"]]],["^1L","goog/structs/prioritypool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1L","goog/async/run.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1L","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1L","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^54","^11","~$cljs.reader","~$cljs.tools.reader.edn","^57","^4T","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1L","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/async/workqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","~$goog.async.FreeList"]]],["^1L","com/fulcrologic/fulcro/dom/events.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18"]]],["^1L","goog/events/events.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^55","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","~$goog.events.EventId","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1L","goog/promise/resolver.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^50"]]],["^1L","goog/events/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^56"]]],["^1L","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4T","^5P"]]],["^1L","goog/structs/priorityqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.structs.Heap"]]],["^1L","goog/net/xhrio.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.Timer","^4U","^4V","^5Y","^51","~$goog.json.hybrid","~$goog.log","^5V","^5U","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^57","^4T","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^56","^53","^61","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1L","goog/promise/thenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^50"]]],["^1L","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^11","^@","^1?","^1<","^[","^1;","^16","^1:","^I","^12","^14"]]],["^1L","com/fulcrologic/fulcro/algorithms/transit.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$cognitect.transit","~$com.fulcrologic.guardrails.core","^@","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1L","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18"]]],["^1L","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^57"]]],["^1L","cljs/pprint.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^54","^4T","^5P"]]],["^1L","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^@","^11","^6H","^14","^12"]]],["^1L","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^68","^69","^6:","^67","^4U","^4T","^5P"]]],["^1L","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$expound.problems","^@","^54","^11","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1L","goog/net/wrapperxmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6E","^6F"]]],["^1L","goog/events/eventtarget.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.Disposable","^4V","^5Q","~$goog.events.Event","^5[","^60","^57","^62","^63","^65"]]],["^1L","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^54","^14","^@","~$expound.alpha"]]],["^1L","goog/disposable/disposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.disposable.IDisposable"]]],["^1L","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^54"]]],["^1L","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1L","shadow/js.js"],["0273d29a26c6414d6326ed34664dcb7e98415b06","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V"]]],["^1L","goog/structs/set.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6B","~$goog.structs.Collection","^6C","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1635907472000,1635907472000,1635907547000],["^6R","node_modules/react/cjs/react.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","754b7a48941975257c8955f6d5e511cb3a878737","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^6S","~$module$node_modules$object_assign$index"]]],["^1L","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","^5E"]]],["^1L","goog/events/listener.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^65","^5["]]],["^1L","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","~$goog.fs.blob","^59","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5;","^5<","^5=","^5>"]]],["^1L","goog/debug/tracer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4V","~$goog.debug","~$goog.debug.Logger","~$goog.iter","^6?","^6C","~$goog.structs.SimplePool"]]],["^1L","cljs/core/async/impl/channels.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^4R","^4Z","^4X"]]],["^1L","goog/events/listenermap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^66","^57","^62","^5[","^65"]]],["^1L","goog/events/eventid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$taoensso.truss.impl"]]],["^1L","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/events/eventwrapper.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1L","com/fulcrologic/fulcro/algorithms/merge.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$com.fulcrologic.fulcro.algorithms.data-targeting","^16","^[","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^4P","^12","^14","^6I"]]],["^1L","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^@"]]],["^1L","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","cljs/core/async/impl/dispatch.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^4X","^5I"]]],["^1L","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4V","~$goog.html.SafeUrl","^5=","^5>","^58"]]],["^1L","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6[","~$goog.html.SafeStyle","^7;","^5:","~$goog.html.uncheckedconversions","^5=","^58"]]],["^1L","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^@","^6L"]]],["^1L","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^11"]]],["^1L","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18"]]],["^1L","goog/useragent/product.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^5B","^5D","^56"]]],["^1L","cljs/core/async/impl/protocols.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18"]]],["^1L","goog/net/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6W","~$goog.iter.StopIteration"]]],["^1L","goog/net/xhriopool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^5R","~$goog.structs.PriorityPool","^6C"]]],["^1L","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4V","~$goog.dom.TagName","~$goog.dom.tags","^6[","^7?","~$goog.html.SafeStyleSheet","^7;","^5:","^70","^5;","^5<","^5B","^57","^5=","^5>","^58"]]],["^1L","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^57"]]],["^1L","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/structs/queue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U"]]],["^1L","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4S","^4T"]]],["^1L","com/fulcrologic/fulcro/inspect/transit.cljs"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^6G","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit","^14"]]],["^1L","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5L","^7F"]]],["^1L","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U"]]],["^1L","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^54","~$taoensso.encore"]]],["^1L","cljs/reader.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^57","^6;","^5N","^5P"]]],["^1L","com/fulcrologic/fulcro/mutations.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^16","~$com.fulcrologic.fulcro.dom.events","^6H","^12","^14","^7J","^@","^4P","^78","~$com.fulcrologic.fulcro.algorithms.merge","^[","^6I","^54"]]],["^1L","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4V","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7C","~$goog.dom.safe","^7>","^7@","~$goog.math.Coordinate","~$goog.math.Size","^57","^4T","^5=","~$goog.string.Unicode","^56"]]],["^1L","com/fulcrologic/fulcro/components.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^57","~$cljsjs.react","^12","^@","^14","^7J","~$clojure.walk","^54","^4P","^7:","^[","^6H","^11"]]],["^1L","com/fulcrologic/fulcro/specs.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^@","^6H","^4P","^12"]]],["^1L","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.debug.Error","^7N"]]],["^1L","cljs/core/async/impl/buffers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^4R"]]],["^1L","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4V","^4T","^6B","^6C","^6D","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1L","goog/net/errorcode.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^6R","node_modules/object-assign/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","519ffd5a4c91b67302cc9947b794966d629860cd","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^6S"]]],["^1L","goog/debug/errorhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6N","^4V","^71","~$goog.debug.EntryPointMonitor","^7U","~$goog.debug.Trace"]]],["^1L","goog/disposable/idisposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/promise/promise.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^52","^4V","^5X","~$goog.async.run","^5J","^7U","~$goog.promise.Resolver"]]],["^1L","cljs/core/async/impl/timers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^4R","^4W","^4Z"]]],["^1L","cljs/spec/alpha.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^57","^7T","~$cljs.spec.gen.alpha","^54"]]],["^1L","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",[]]],["^1L","goog/json/hybrid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","~$goog.json"]]],["^1L","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^57"]]],["^1L","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^68","^54","~$cljs.tools.reader.impl.inspect"]]],["^1L","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^6H","^D","^14"]]],["^1L","cljsjs/react.cljs"],["4323f8e603a952cae34c4c6db04141e97928434f","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$module$node_modules$react$index"]]],["^1L","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^4T","^5P"]]],["^1L","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^14","^7T"]]],["^1L","goog/structs/pool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6N","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1L","com/fulcrologic/fulcro/inspect/diff.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^@"]]],["^6R","node_modules/react/cjs/react.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","0a81b45abe33f0ad39b726512604018f94261db9","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^6S","^6Y"]]],["^1L","goog/net/httpstatus.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^7H","^7F","~$goog.math.Long"]]],["^1L","goog/structs/heap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^57","~$goog.structs.Node"]]],["^1L","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V"]]],["^1L","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^7O","^7@","^5=","^58"]]],["^1L","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^7H","~$com.cognitect.transit.eq","^86"]]],["^1L","clojure/data.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^11"]]],["^1L","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^58"]]],["^1L","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^54","^@","^B","^11","^6L","^6M","^5A","^7T","^5O","^4T"]]],["^1L","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^11","^@","^[","^6I","^7:","^4P","^1<","^1;","^16","^1:","^I","^6H","^12","^7J","^14"]]],["^1L","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^7H"]]],["^1L","goog/debug/debug.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","~$goog.debug.errorcontext","^56"]]],["^1L","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","~$goog.math"]]],["^1L","goog/debug/errorcontext.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^69","^4T","^5P"]]],["^1L","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4U","^4V","^7=","^8:"]]],["^1L","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^5Y","~$goog.dom","^7C","^7=","^5B","^5C"]]],["^1L","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","^7>","^6[","^7?","^7E","^7;","^5:","^5=","^58","^5;"]]],["^1L","goog/debug/logger.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^71","^6?","~$goog.log.Level","~$goog.log.LogRecord","~$goog.log.Logger"]]],["^1L","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^7I"]]],["^1L","goog/events/event.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6N","^62"]]],["^1L","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^67","^68","^69"]]],["^1L","goog/events/eventhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6N","^5Q","^57","^6O","^62","^51","^64"]]],["^1L","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^86","~$goog.math.Integer","^4T","^57","^4U","^53","^5P"]]],["^1L","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^7H","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^7F","^88","^5K","^5L"]]],["^1L","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^5=","^5>","^70","^4V"]]],["^1L","goog/log/log.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","^71"]]],["^1L","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^5=","^7?","^5>","^4U","^57","^4V","^58"]]],["^1L","goog/structs/collection.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/events/browserevent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^71","^55","^6O","~$goog.events.EventType","^5E","^56"]]],["^1L","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^5E"]]],["^1L","goog/structs/node.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/structs/simplepool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6N"]]],["^1L","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^56"]]],["^1L","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18"]]],["^1L","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","^4T"]]],["^1L","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","^5>"]]],["^1L","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^54","^7J","~$taoensso.timbre.appenders.core"]]],["^1L","goog/json/json.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","goog/events/listenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^62","^63"]]],["^1L","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^7H","^5L","~$com.cognitect.transit.handlers","^7F","^7I","^86"]]],["^1L","goog/net/xmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^6E"]]],["^1L","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^14","^11","^12"]]],["^1L","goog/net/xmlhttp.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","~$goog.net.WrapperXmlHttpFactory","^6F","^6E"]]],["^1L","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","^12","^[","^57","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^D","~$clojure.data","^7J","^14"]]],["^1L","goog/net/xhrlike.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19"]]],["^1L","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^18","~$com.cognitect.transit","^7F","^88","^86"]]],["^1L","goog/crypt/base64.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^4L",["^ ","^4M",null,"^4N",["^L",[]],"^4O",["^19","^4V","^5?","^4T","^56","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/pprint.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1617990988000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/utils.clj",1609928724000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/concurrent.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/channels.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer.clj",1609928724000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1609928724000,"jar:file:/Users/nitin/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1617990988000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/mutations.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/scheduling.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/ioc_macros.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/protocols.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/spec/alpha.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/env.clj",1609928724000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/data.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm.clj",1609928724000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/tx_processing.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/buffers.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/dispatch.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/reader.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/timers.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/mutex.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/exec/threadpool.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/cljs/core/async/impl/ioc_macros.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/cljs/core/async.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/ast.clj",1609928724000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/components.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/spec/gen/alpha.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/dom/events.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1635907473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",78],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G","^H","^I","^J","^I"],"^K",["^L",[]],"^M",["^ ","^F",["^ ","^N",["^O",[["^P","~$&","^Q"]]],"^8",92,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^R","^S","^T","^G","^U",true]],"^R","^G","^V",["^ "],"^X",null,"^Y",["^ ","^Z","^[","^10","^11","^12","^12","^?","^@","^13","^14","^15","^16","^17","^12","^18","^18","^I","^I","^19","^19","^1:","^1:","^11","^11","~$m","^1;","^1<","^1<","^1=","^1<","^1>","^1?","^1;","^1;","~$s","^@","^[","^[","^1?","^1?","^16","^16","^14","^14","^@","^@"],"^1@",["^L",["^1A","^1B"]],"~:shadow/js-access-global",["^L",["Error"]],"^1C",["^ ","^H","^I","^J","^I"],"~:defs",["^ ","~$distribute-element-results!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",172,"^9",7,"^:",172,"^;",34,"^N",["^O",["~$quote",["^O",[["~$app","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1G","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^R","^32","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"~:method-params",["^O",[["^:V","^:W","~$p__68277"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^9",1,"~:variadic?",false,"^8",172,"~:ret-tag",["^L",[null,"~$any"]],"^:",172,"~:max-fixed-arity",3,"~:fn-var",true,"^N",["^O",["^:U",["^O",[["^:V","^:W",["^ ","^:X",["^:Y","^:Z"],"^1G","^:["]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$top-level?",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",100,"^9",7,"^:",100,"^;",17,"^N",["^O",["^:U",["^O",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$id"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"^R","^2Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;0",["^O",[["~$p__68208"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",100,"^;5","~$boolean","^:",100,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[[["^ ","^;:",["^;;"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"~$with-synchronous-transactions",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",405,"^9",7,"^:",405,"^;",36,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"^R","^4D","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",36,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",405,"^;5",["^L",["~$clj","^;6"]],"^:",405,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$swap-post-processing-steps!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",108,"^9",7,"^:",108,"^;",34,"^N",["^O",["^:U",["^O",[["^:V","~$&","~$args"]]]]],"~:top-fn",["^ ","^;4",true,"~:fixed-arity",1,"^;7",1,"^;0",[["^O",["^:V","^;A"]]],"^N",["^O",[["^:V","~$&","^;A"]]],"^;3",["^O",[null]]]],"^R","^3Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"^;B",["^ ","^;4",true,"^;C",1,"^;7",1,"^;0",[["^O",["^:V","^;A"]]],"^N",["^O",[["^:V","~$&","^;A"]]],"^;3",["^O",[null]]],"^;0",[["^O",["^:V","^;A"]]],"^;2",null,"^;C",1,"^;3",["^O",[null]],"^9",1,"^;4",true,"~:methods",[["^ ","^;C",1,"^;4",true,"~:tag","^;6"]],"^8",108,"^;5","^;6","^:",108,"^;7",1,"^;8",true,"^N",["^O",[["^:V","~$&","^;A"]]]],"~$active-queue",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",113,"^9",7,"^:",113,"^;",19,"^N",["^O",["^:U",["^O",[["^:V"]]]]]],"^R","^33","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",113,"^;5","^;6","^:",113,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]]],"~$reset-send-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",115,"^9",7,"^:",115,"^;",24,"^N",["^O",["^:U",["^O",[["^:V","~$remote","~$v"]]]]]],"^R","^2W","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",24,"^;0",["^O",[["^:V","^;H","~$v"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",115,"^;5",["^L",[null,"^;6"]],"^:",115,"^;7",3,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","^;H","~$v"]]]]]],"~$apps-in-tx",["^ ","^R","^4:","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",87,"^9",1,"^:",87,"^;",20,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",87,"^9",10,"^:",87,"^;",20],"^;E","~$cljs.core/Atom"],"~$post-processing-steps",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",110,"^9",7,"^:",110,"^;",28,"^N",["^O",["^:U",["^O",[["^:V"]]]]]],"^R","^34","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",110,"^;5","^;6","^:",110,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]]],"~$queue-sends!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",269,"^9",7,"^:",269,"^;",19,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^:X",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1G","^:W"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^R","^2T","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;0",["^O",[["^:V","~$p__68322"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",269,"^;5",["^L",[null,"^;6"]],"^:",269,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^:X",["^;M","^;N"],"^1G","^:W"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$submit-sync-tx!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",378,"^9",7,"^:",378,"^;",22,"^N",["^O",["^:U",["^O",[["^:V","~$tx"],[["^ ","^;:",["~$runtime-atom"],"^1G","^:V"],"^;Q","~$options"]]]]],"^;B",["^ ","^;4",false,"^;C",3,"^;7",3,"^;0",[["^:V","^;Q"],[["^ ","^;:",["^;R"],"^1G","^:V"],"^;Q","^;S"]],"^N",["^O",[["^:V","^;Q"],[["^ ","^;:",["^;R"],"^1G","^:V"],"^;Q","^;S"]]],"^;3",["^O",[null,null]]]],"^R","^3D","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;B",["^ ","^;4",false,"^;C",3,"^;7",3,"^;0",[["^:V","^;Q"],[["^ ","^;:",["^;R"],"^1G","^:V"],"^;Q","^;S"]],"^N",["^O",[["^:V","^;Q"],[["^ ","^;:",["^;R"],"^1G","^:V"],"^;Q","^;S"]]],"^;3",["^O",[null,null]]],"^;0",[["^:V","^;Q"],[["^ ","^;:",["^;R"],"^1G","^:V"],"^;Q","^;S"]],"^;2",null,"^;C",3,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^;D",[["^ ","^;C",2,"^;4",false,"^;E","^;6"],["^ ","^;C",3,"^;4",false,"^;E","^;6"]],"^8",378,"^:",378,"^;7",3,"^;8",true,"^N",["^O",[["^:V","^;Q"],[["^ ","^;:",["^;R"],"^1G","^:V"],"^;Q","^;S"]]]],"~$process-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",312,"^9",7,"^:",312,"^;",21,"^N",["^O",["^:U",["^O",[[["^ ","^;:",["~$state-atom","^;R"],"^1G","^:V"]]]]]],"^6","Run through the active queue and do a processing step."],"^R","^3E","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^;0",["^O",[["~$p__68387"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",312,"^;5","~$clj-nil","^:",312,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[[["^ ","^;:",["^;U","^;R"],"^1G","^:V"]]]]]],"^6","Run through the active queue and do a processing step."],"~$remove-send!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",219,"^9",7,"^:",219,"^;",19,"^N",["^O",["^:U",["^O",[["^:V","^;H","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^R","^4@","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;0",["^O",[["^:V","^;H","^;Y","^;Z"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",219,"^;5","^;6","^:",219,"^;7",4,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","^;H","^;Y","^;Z"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",252,"^9",7,"^:",252,"^;",27,"^N",["^O",["^:U",["^O",[["^:V","^:W",["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$idx","~$dispatch","~$started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^R","^3@","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^;0",["^O",[["^:V","^:W","~$p__68318"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",252,"^;5",["^L",[null,"^;6"]],"^:",252,"^;7",3,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","^:W",["^ ","^<0",["^<1","^<2","^<3"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$run-after!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",118,"^9",7,"^:",118,"^;",17,"^N",["^O",["^:U",["^O",[["^:V","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"^R","^38","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;0",["^O",[["^:V","~$f"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",118,"^;5","^;6","^:",118,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"~$run-all-immediate-work!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",354,"^9",7,"^:",354,"^;",30,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"^R","^4F","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",354,"^:",354,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"~$record-result!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",205,"^9",7,"^:",205,"^;",21,"^N",["^O",["^:U",["^O",[["^:V","^;Y","^;Z","^;H","~$result","~$result-key"],["^:V","^;Y","^;Z","^;H","^<8"]]]]],"^6","Deal with a network result on the given txn/element.","^;B",["^ ","^;4",false,"^;C",6,"^;7",6,"^;0",[["^:V","^;Y","^;Z","^;H","^<8","^<9"],["^:V","^;Y","^;Z","^;H","^<8"]],"^N",["^O",[["^:V","^;Y","^;Z","^;H","^<8","^<9"],["^:V","^;Y","^;Z","^;H","^<8"]]],"^;3",["^O",[null,null]]]],"^R","^2L","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^;B",["^ ","^;4",false,"^;C",6,"^;7",6,"^;0",[["^:V","^;Y","^;Z","^;H","^<8","^<9"],["^:V","^;Y","^;Z","^;H","^<8"]],"^N",["^O",[["^:V","^;Y","^;Z","^;H","^<8","^<9"],["^:V","^;Y","^;Z","^;H","^<8"]]],"^;3",["^O",[null,null]]],"^;0",[["^:V","^;Y","^;Z","^;H","^<8","^<9"],["^:V","^;Y","^;Z","^;H","^<8"]],"^;2",null,"^;C",6,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^;D",[["^ ","^;C",6,"^;4",false,"^;E",["^L",["^;6","^;W"]]],["^ ","^;C",5,"^;4",false,"^;E",["^L",["^;6","^;W"]]]],"^8",205,"^:",205,"^;7",6,"^;8",true,"^N",["^O",[["^:V","^;Y","^;Z","^;H","^<8","^<9"],["^:V","^;Y","^;Z","^;H","^<8"]]],"^6","Deal with a network result on the given txn/element."],"~$process-tx-node!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",279,"^9",7,"^:",279,"^;",23,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^:X",["^;M"],"^1G","^:W"]]]]]]],"^R","^3H","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;0",["^O",[["^:V","~$p__68325"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",279,"^;5",["^L",[null,"^;6","^;W"]],"^:",279,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^:X",["^;M"],"^1G","^:W"]]]]]]],"~$add-send!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",226,"^9",7,"^:",226,"^;",16,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^<0",["^;;","^;S"],"^1G","^:W"],"^;Z","^;H"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"^R","^3Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",16,"^;0",["^O",[["^:V","~$p__68306","^;Z","^;H"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",226,"^;5","^;W","^:",226,"^;7",4,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^<0",["^;;","^;S"],"^1G","^:W"],"^;Z","^;H"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"~$do-post-processing!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",128,"^9",7,"^:",128,"^;",26,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"^R","^3L","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",128,"^;5","^;W","^:",128,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"~$distribute-results!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",195,"^9",7,"^:",195,"^;",26,"^N",["^O",["^:U",["^O",[["^:V","^;Y","^;Z"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"^R","^2=","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;0",["^O",[["^:V","^;Y","^;Z"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",195,"^;5","^;6","^:",195,"^;7",3,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","^;Y","^;Z"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"~$post-processing?",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",123,"^9",7,"^:",123,"^;",23,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Is there post processing to do?"],"^R","^31","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",123,"^;5","^;=","^:",123,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Is there post processing to do?"],"~$process-send-queues!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",288,"^9",7,"^:",288,"^;",27,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"^R","^2H","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",288,"^;5","^;W","^:",288,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"~$swap-active-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",111,"^9",7,"^:",111,"^;",25,"^N",["^O",["^:U",["^O",[["^:V","~$&","^;A"]]]]],"^;B",["^ ","^;4",true,"^;C",1,"^;7",1,"^;0",[["^O",["^:V","^;A"]]],"^N",["^O",[["^:V","~$&","^;A"]]],"^;3",["^O",[null]]]],"^R","^3?","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",25,"^;B",["^ ","^;4",true,"^;C",1,"^;7",1,"^;0",[["^O",["^:V","^;A"]]],"^N",["^O",[["^:V","~$&","^;A"]]],"^;3",["^O",[null]]],"^;0",[["^O",["^:V","^;A"]]],"^;2",null,"^;C",1,"^;3",["^O",[null]],"^9",1,"^;4",true,"^;D",[["^ ","^;C",1,"^;4",true,"^;E","^;6"]],"^8",111,"^;5","^;6","^:",111,"^;7",1,"^;8",true,"^N",["^O",[["^:V","~$&","^;A"]]]],"~$sync-tx!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",376,"^9",7,"^:",376,"^;",15,"^N",["^O",["^:U",["^O",[["~$&","^;A"]]]]],"^;B",["^ ","^;4",true,"^;C",0,"^;7",0,"^;0",[["^O",["^;A"]]],"^N",["^O",[["~$&","^;A"]]],"^;3",["^O",[null]]]],"^R","^40","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",15,"^;B",["^ ","^;4",true,"^;C",0,"^;7",0,"^;0",[["^O",["^;A"]]],"^N",["^O",[["~$&","^;A"]]],"^;3",["^O",[null]]],"^;0",[["^O",["^;A"]]],"^;2",null,"^;C",0,"^;3",["^O",[null]],"^9",1,"^;4",true,"^;D",[["^ ","^;C",0,"^;4",true,"^;E","~$ignore"]],"^8",376,"^;5","^;6","^:",376,"^;7",0,"^;8",true,"^N",["^O",[["~$&","^;A"]]]],"~$in-transaction?",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",141,"^9",7,"^:",141,"^;",22,"^N",["^O",["^:U",["^O",[[["^ ","^;:",["^;;"],"^1G","^:V"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"^R","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;0",["^O",[["~$p__68261"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",141,"^;5","^;=","^:",141,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[[["^ ","^;:",["^;;"],"^1G","^:V"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"~$available-work?",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",336,"^9",7,"^:",336,"^;",22,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"^R","^43","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",336,"^;5","^;=","^:",336,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"~$reset-post-processing-steps!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",109,"^9",7,"^:",109,"^;",35,"^N",["^O",["^:U",["^O",[["^:V","~$v"]]]]]],"^R","^49","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",35,"^;0",["^O",[["^:V","~$v"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",109,"^;5",["^L",[null,"^;6"]],"^:",109,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","~$v"]]]]]],"~$release-post-render-tasks!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",146,"^9",7,"^:",146,"^;",33,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^R","^36","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",33,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",146,"^;5","^;6","^:",146,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$abort!",["^ ","^R","^3K","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",399,"^9",1,"^:",399,"^;",12,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",399,"^9",6,"^:",399,"^;",12],"^6","[app abort-id]\n\n   Implementation of abort when using this tx processing"],"~$send-queue",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",116,"^9",7,"^:",116,"^;",17,"^N",["^O",["^:U",["^O",[["^:V","^;H"]]]]]],"^R","^4?","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;0",["^O",[["^:V","^;H"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",116,"^;5","^;6","^:",116,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","^;H"]]]]]],"~$node-index",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",183,"^9",8,"^:",183,"^;",18,"~:private",true,"^N",["^O",["^:U",["^O",[["~$queue","^;Y"]]]]]],"^<M",true,"^R","^24","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",18,"^;0",["^O",[["^<N","^;Y"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",183,"^;5",["^L",[null,"^;6","^;W"]],"^:",183,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^<N","^;Y"]]]]]],"~$reset-active-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",112,"^9",7,"^:",112,"^;",26,"^N",["^O",["^:U",["^O",[["^:V","~$v"]]]]]],"^R","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;0",["^O",[["^:V","~$v"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",112,"^;5",["^L",[null,"^;6"]],"^:",112,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","~$v"]]]]]],"~$submission-queue",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",107,"^9",7,"^:",107,"^;",23,"^N",["^O",["^:U",["^O",[["^:V"]]]]]],"^R","^27","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",107,"^;5","^;6","^:",107,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]]],"~$swap-submission-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",105,"^9",7,"^:",105,"^;",29,"^N",["^O",["^:U",["^O",[["^:V","~$&","^;A"]]]]],"^;B",["^ ","^;4",true,"^;C",1,"^;7",1,"^;0",[["^O",["^:V","^;A"]]],"^N",["^O",[["^:V","~$&","^;A"]]],"^;3",["^O",[null]]]],"^R","^26","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",29,"^;B",["^ ","^;4",true,"^;C",1,"^;7",1,"^;0",[["^O",["^:V","^;A"]]],"^N",["^O",[["^:V","~$&","^;A"]]],"^;3",["^O",[null]]],"^;0",[["^O",["^:V","^;A"]]],"^;2",null,"^;C",1,"^;3",["^O",[null]],"^9",1,"^;4",true,"^;D",[["^ ","^;C",1,"^;4",true,"^;E","^;6"]],"^8",105,"^;5","^;6","^:",105,"^;7",1,"^;8",true,"^N",["^O",[["^:V","~$&","^;A"]]]],"~$run-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",363,"^9",7,"^:",363,"^;",17,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^:X",["~$component","~$synchronous?"],"^1G","^;S"]]]]]]],"^R","^25","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;0",["^O",[["^:V","~$p__68398"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",363,"^;5","^;W","^:",363,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V",["^ ","^:X",["^<S","^<T"],"^1G","^;S"]]]]]]],"~$activate-submissions!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",342,"^9",7,"^:",342,"^;",28,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^R","^2:","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^;0",["^O",[["^:V"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",342,"^;5","^;W","^:",342,"^;7",1,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$reset-submission-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",106,"^9",7,"^:",106,"^;",30,"^N",["^O",["^:U",["^O",[["^:V","~$v"]]]]]],"^R","^1Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^;0",["^O",[["^:V","~$v"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",106,"^;5",["^L",[null,"^;6"]],"^:",106,"^;7",2,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","~$v"]]]]]],"~$swap-send-queue!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",114,"^9",7,"^:",114,"^;",23,"^N",["^O",["^:U",["^O",[["^:V","^;H","~$&","^;A"]]]]],"^;B",["^ ","^;4",true,"^;C",2,"^;7",2,"^;0",[["^O",["^:V","^;H","^;A"]]],"^N",["^O",[["^:V","^;H","~$&","^;A"]]],"^;3",["^O",[null]]]],"^R","^4<","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;B",["^ ","^;4",true,"^;C",2,"^;7",2,"^;0",[["^O",["^:V","^;H","^;A"]]],"^N",["^O",[["^:V","^;H","~$&","^;A"]]],"^;3",["^O",[null]]],"^;0",[["^O",["^:V","^;H","^;A"]]],"^;2",null,"^;C",2,"^;3",["^O",[null]],"^9",1,"^;4",true,"^;D",[["^ ","^;C",2,"^;4",true,"^;E","^;6"]],"^8",114,"^;5","^;6","^:",114,"^;7",2,"^;8",true,"^N",["^O",[["^:V","^;H","~$&","^;A"]]]],"~$dispatch-result!",["^ ","^:T",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",152,"^9",7,"^:",152,"^;",23,"^N",["^O",["^:U",["^O",[["^:V","^:W",["^ ","^<0",["~$results","^<2","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1G","^:["],"^;H"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^R","^2C","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;0",["^O",[["^:V","^:W","~$p__68269","^;H"]]],"^;2",null,"^;3",["^O",[null,null]],"^9",1,"^;4",false,"^8",152,"^;5",["^L",["^;?","^;6"]],"^:",152,"^;7",4,"^;8",true,"^N",["^O",["^:U",["^O",[["^:V","^:W",["^ ","^<0",["^<Z","^<2","^<[","^=0","^=1"],"^1G","^:["],"^;H"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."]],"^1B",["^ ","^?","^@","^13","^14","^15","^16","^18","^18","^I","^I","~$m","^1;","^1;","^1;","~$s","^@","^16","^16","^14","^14","^@","^@","^G","^G"],"~:cljs.analyzer/constants",["^ ","^1@",["^L",["~:only-refresh","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","^:Y","~:transacted-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:refresh","~:ref","~:synchronous?","~:render!","~:transmitted-ast","~:com.fulcrologic.fulcro.algorithm/abort!","~:com.fulcrologic.fulcro.algorithm/tx!","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config","~:status-code","~:after-render?","~:component","^;N","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:com.fulcrologic.fulcro.application/id","~:dispatch","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues","~:result","~:com.fulcrologic.fulcro.application/runtime-atom","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?","~:dispatch-key","~:com.fulcrologic.fulcro.application/algorithms","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?","~:error","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:body","^;M","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~:auto","~:p","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^:Z","~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^=H","^=B","^=Y","^=6","^=8","^=L","^=U","~:p","^=Z","^;M","^=D","^:Y","^=O","^>5","^>7","^=[","^=V","^=I","^=7","^=K","^=?","^=M","^=Q","^:Z","^=S","^;N","^>4","^=W","^=9","^>3","^>6","^=:","^=C","^=X","^=P","^=T","^=5","^>1","^=F","^=N","^>2","^=J","^=E","^==","^=>","^=;","^=4","^=<","^=G","^>0","^=R","^=A","^=@"]],"^1H",["^ ","^1B",["^L",[]],"^1A",["^L",[]]],"^1I",["^ "],"^1J",["^19","^18","^11","^@","^1?","^1<","^[","^1;","^16","^1:","^I","^12","^14"]],"^T","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^4K",[["^>;","~:static-fns"],true,["^>;","~:shadow-tweaks"],null,["^>;","~:source-map-inline"],null,["^>;","~:elide-asserts"],false,["^>;","~:optimize-constants"],null,["^>;","^1O"],null,["^>;","~:external-config"],null,["^>;","~:tooling-config"],null,["^>;","~:emit-constants"],null,["^>;","~:load-tests"],null,["^>;","~:form-size-threshold"],null,["^>;","~:data-readers"],null,["^>;","~:infer-externs"],"^=Z",["^>;","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^>;","~:fn-invoke-direct"],null,["^>;","~:source-map"],"/dev/null"]]]