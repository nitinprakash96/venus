["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\n\n\n/**\n * Returns the remotes map from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517)], null);\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Returns a set of the names of the remotes from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)))));\n});\n/**\n * Splits the given send queue into two send queues:\n *   [parallel-items sequential-items].\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64015){\nreturn cljs.core.vector_QMARK_(G__64015);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.vector_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null))], null);\n\nvar parallel_QMARK_ = (function (p__64018){\nvar map__64019 = p__64018;\nvar map__64019__$1 = cljs.core.__destructure_map(map__64019);\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64019__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn cljs.core.boolean$((function (){var or__4212__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\n});\nvar map__64017 = cljs.core.group_by(parallel_QMARK_,sends);\nvar map__64017__$1 = cljs.core.__destructure_map(map__64017);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64017__$1,true);\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64017__$1,false);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\n});\n/**\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),cljs.core.fn_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\n} else {\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\n}\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__64020_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__64020_SHARP_));\n}));\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__64022_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__64022_SHARP_));\n}));\n});\n/**\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n *   appear before reads, without changing the relative order in blocks of reads/writes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null);\n\nvar vec__64025 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64025,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64025,(1),null);\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (n){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\nvar map__64028 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,id){\nvar vec__64031 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\nvar seq__64032 = cljs.core.seq(vec__64031);\nvar first__64033 = cljs.core.first(seq__64032);\nvar seq__64032__$1 = cljs.core.next(seq__64032);\nvar map__64034 = first__64033;\nvar map__64034__$1 = cljs.core.__destructure_map(map__64034);\nvar n = map__64034__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64034__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar _ = seq__64032__$1;\nvar cluster = vec__64031;\nif((ast == null)){\nreturn result;\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\n} else {\nreturn result;\n\n}\n}\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\nvar map__64028__$1 = cljs.core.__destructure_map(map__64028);\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64028__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64028__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\nreturn send_queue__$2;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__64035){\nvar map__64036 = p__64035;\nvar map__64036__$1 = cljs.core.__destructure_map(map__64036);\nvar ast = map__64036__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64036__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64036__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64036__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64038){\nreturn cljs.core.coll_QMARK_(G__64038);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796))], null),null)], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\n} else {\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\n}\n});\n/**\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n *   along with the updated send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app__$1,remote_name,send_queue){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__64041){\nreturn cljs.core.map_QMARK_(G__64041);\n}),(function (G__64041){\nreturn cljs.core.contains_QMARK_(G__64041,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\n})], null),(function (G__64041){\nreturn ((cljs.core.map_QMARK_(G__64041)) && (cljs.core.contains_QMARK_(G__64041,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421))));\n}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)))], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null)]))], null);\n\nvar vec__64063 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64063,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64063,(1),null);\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar vec__64066 = cljs.core.split_with((function (p1__64039_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__64039_SHARP_));\n}),send_queue__$2);\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64066,(0),null);\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64066,(1),null);\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__64073){\nvar map__64074 = p__64073;\nvar map__64074__$1 = cljs.core.__destructure_map(map__64074);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64074__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar tx = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(ast);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\n}),cljs.core.PersistentVector.EMPTY,to_send);\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\nvar combined_node_idx = (0);\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),(function (p__64075){\nvar map__64076 = p__64075;\nvar map__64076__$1 = cljs.core.__destructure_map(map__64076);\nvar combined_result = map__64076__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64076__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__64077 = cljs.core.seq(to_send);\nvar chunk__64079 = null;\nvar count__64080 = (0);\nvar i__64081 = (0);\nwhile(true){\nif((i__64081 < count__64080)){\nvar map__64094 = chunk__64079.cljs$core$IIndexed$_nth$arity$2(null,i__64081);\nvar map__64094__$1 = cljs.core.__destructure_map(map__64094);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64094__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__64475 = seq__64077;\nvar G__64476 = chunk__64079;\nvar G__64477 = count__64080;\nvar G__64478 = (i__64081 + (1));\nseq__64077 = G__64475;\nchunk__64079 = G__64476;\ncount__64080 = G__64477;\ni__64081 = G__64478;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__64077);\nif(temp__5753__auto__){\nvar seq__64077__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__64077__$1)){\nvar c__4638__auto__ = cljs.core.chunk_first(seq__64077__$1);\nvar G__64480 = cljs.core.chunk_rest(seq__64077__$1);\nvar G__64481 = c__4638__auto__;\nvar G__64482 = cljs.core.count(c__4638__auto__);\nvar G__64483 = (0);\nseq__64077 = G__64480;\nchunk__64079 = G__64481;\ncount__64080 = G__64482;\ni__64081 = G__64483;\ncontinue;\n} else {\nvar map__64096 = cljs.core.first(seq__64077__$1);\nvar map__64096__$1 = cljs.core.__destructure_map(map__64096);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64096__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__64486 = cljs.core.next(seq__64077__$1);\nvar G__64487 = null;\nvar G__64488 = (0);\nvar G__64489 = (0);\nseq__64077 = G__64486;\nchunk__64079 = G__64487;\ncount__64080 = G__64488;\ni__64081 = G__64489;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),(function (p__64098){\nvar map__64099 = p__64098;\nvar map__64099__$1 = cljs.core.__destructure_map(map__64099);\nvar combined_result = map__64099__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64099__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__64100_64490 = cljs.core.seq(to_send);\nvar chunk__64101_64491 = null;\nvar count__64102_64492 = (0);\nvar i__64103_64493 = (0);\nwhile(true){\nif((i__64103_64493 < count__64102_64492)){\nvar map__64119_64494 = chunk__64101_64491.cljs$core$IIndexed$_nth$arity$2(null,i__64103_64493);\nvar map__64119_64495__$1 = cljs.core.__destructure_map(map__64119_64494);\nvar ast_64496__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64119_64495__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_64497 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64119_64495__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_64498 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_64496__$1)):body);\nvar result_64499 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_64498);\nif(cljs.core.truth_((function (){var and__4210__auto__ = (function (){var or__4212__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4210__auto__;\n}\n})())){\ntry{var map__64122_64500 = result_64499;\nvar map__64122_64501__$1 = cljs.core.__destructure_map(map__64122_64500);\nvar status_code_64502 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64122_64501__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_64503__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64122_64501__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_64502)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_64503__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_64502));\n}\n}catch (e64121){var e_64505 = e64121;\n}} else {\n}\n\n(result_handler_64497.cljs$core$IFn$_invoke$arity$1 ? result_handler_64497.cljs$core$IFn$_invoke$arity$1(result_64499) : result_handler_64497.call(null,result_64499));\n\n\nvar G__64506 = seq__64100_64490;\nvar G__64507 = chunk__64101_64491;\nvar G__64508 = count__64102_64492;\nvar G__64509 = (i__64103_64493 + (1));\nseq__64100_64490 = G__64506;\nchunk__64101_64491 = G__64507;\ncount__64102_64492 = G__64508;\ni__64103_64493 = G__64509;\ncontinue;\n} else {\nvar temp__5753__auto___64510 = cljs.core.seq(seq__64100_64490);\nif(temp__5753__auto___64510){\nvar seq__64100_64511__$1 = temp__5753__auto___64510;\nif(cljs.core.chunked_seq_QMARK_(seq__64100_64511__$1)){\nvar c__4638__auto___64512 = cljs.core.chunk_first(seq__64100_64511__$1);\nvar G__64513 = cljs.core.chunk_rest(seq__64100_64511__$1);\nvar G__64514 = c__4638__auto___64512;\nvar G__64515 = cljs.core.count(c__4638__auto___64512);\nvar G__64516 = (0);\nseq__64100_64490 = G__64513;\nchunk__64101_64491 = G__64514;\ncount__64102_64492 = G__64515;\ni__64103_64493 = G__64516;\ncontinue;\n} else {\nvar map__64125_64517 = cljs.core.first(seq__64100_64511__$1);\nvar map__64125_64518__$1 = cljs.core.__destructure_map(map__64125_64517);\nvar ast_64519__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64125_64518__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_64520 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64125_64518__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_64521 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_64519__$1)):body);\nvar result_64522 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_64521);\nif(cljs.core.truth_((function (){var and__4210__auto__ = (function (){var or__4212__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4210__auto__;\n}\n})())){\ntry{var map__64127_64523 = result_64522;\nvar map__64127_64524__$1 = cljs.core.__destructure_map(map__64127_64523);\nvar status_code_64525 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64127_64524__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_64526__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64127_64524__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_64525)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_64526__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_64525));\n}\n}catch (e64126){var e_64528 = e64126;\n}} else {\n}\n\n(result_handler_64520.cljs$core$IFn$_invoke$arity$1 ? result_handler_64520.cljs$core$IFn$_invoke$arity$1(result_64522) : result_handler_64520.call(null,result_64522));\n\n\nvar G__64529 = cljs.core.next(seq__64100_64511__$1);\nvar G__64530 = null;\nvar G__64531 = (0);\nvar G__64532 = (0);\nseq__64100_64490 = G__64529;\nchunk__64101_64491 = G__64530;\ncount__64102_64492 = G__64531;\ni__64103_64493 = G__64532;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app__$1,remote_name,combined_node_id,combined_node_idx));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\nif(cljs.core.seq(to_send)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\n}\n});\n/**\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n *   if the remote itself throws exceptions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app__$1,send_node,remote_name){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar b2__49185__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app__$1),remote_name);\nif(cljs.core.truth_(b2__49185__auto__)){\nvar remote = b2__49185__auto__;\nvar b2__49185__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\nif(cljs.core.truth_(b2__49185__auto____$1)){\nvar transmit_BANG_ = b2__49185__auto____$1;\ntry{if(cljs.core.truth_((function (){var and__4210__auto__ = (function (){var or__4212__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4210__auto__;\n}\n})())){\ntry{var tx_64543 = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node));\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app__$1,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),tx_64543);\n}catch (e64136){var e_64544 = e64136;\n}} else {\n}\n\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node) : transmit_BANG_.call(null,remote,send_node));\n}catch (e64130){var e = e64130;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception for tx:\",com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node))], null);\n}),null)),null,-1301577617);\n\ntry{if(cljs.core.truth_((function (){var and__4210__auto__ = (function (){var or__4212__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4210__auto__;\n}\n})())){\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),\"Transmit Exception\");\n}catch (e64133){var e_64545__$1 = e64133;\n}} else {\n}\n\nvar G__64135 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\nvar fexpr__64134 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__64134.cljs$core$IFn$_invoke$arity$1 ? fexpr__64134.cljs$core$IFn$_invoke$arity$1(G__64135) : fexpr__64134.call(null,G__64135));\n}catch (e64131){var e__$1 = e64131;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\n}),null)),null,434491957);\n}}} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n}),null)),null,777329991);\n\nvar G__64138 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__64137 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__64137.cljs$core$IFn$_invoke$arity$1 ? fexpr__64137.cljs$core$IFn$_invoke$arity$1(G__64138) : fexpr__64137.call(null,G__64138));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n}),null)),null,550481933);\n\nvar G__64140 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__64139 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__64139.cljs$core$IFn$_invoke$arity$1 ? fexpr__64139.cljs$core$IFn$_invoke$arity$1(G__64140) : fexpr__64139.call(null,G__64140));\n}\n});\n/**\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__64141){\nvar map__64142 = p__64141;\nvar map__64142__$1 = cljs.core.__destructure_map(map__64142);\nvar app__$1 = map__64142__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64142__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807)], null);\n\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_send_queues,remote){\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\nvar vec__64143 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64143,(0),null);\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64143,(1),null);\nvar front = cljs.core.first(serial);\nvar seq__64146_64552 = cljs.core.seq(p);\nvar chunk__64147_64553 = null;\nvar count__64148_64554 = (0);\nvar i__64149_64555 = (0);\nwhile(true){\nif((i__64149_64555 < count__64148_64554)){\nvar item_64557 = chunk__64147_64553.cljs$core$IIndexed$_nth$arity$2(null,i__64149_64555);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__64146_64552,chunk__64147_64553,count__64148_64554,i__64149_64555,item_64557,send_queue,vec__64143,p,serial,front,send_queues,remote_names,operations,map__64142,map__64142__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_64557,remote);\n});})(seq__64146_64552,chunk__64147_64553,count__64148_64554,i__64149_64555,item_64557,send_queue,vec__64143,p,serial,front,send_queues,remote_names,operations,map__64142,map__64142__$1,app__$1,runtime_atom))\n);\n\n\nvar G__64560 = seq__64146_64552;\nvar G__64561 = chunk__64147_64553;\nvar G__64562 = count__64148_64554;\nvar G__64563 = (i__64149_64555 + (1));\nseq__64146_64552 = G__64560;\nchunk__64147_64553 = G__64561;\ncount__64148_64554 = G__64562;\ni__64149_64555 = G__64563;\ncontinue;\n} else {\nvar temp__5753__auto___64565 = cljs.core.seq(seq__64146_64552);\nif(temp__5753__auto___64565){\nvar seq__64146_64566__$1 = temp__5753__auto___64565;\nif(cljs.core.chunked_seq_QMARK_(seq__64146_64566__$1)){\nvar c__4638__auto___64567 = cljs.core.chunk_first(seq__64146_64566__$1);\nvar G__64568 = cljs.core.chunk_rest(seq__64146_64566__$1);\nvar G__64569 = c__4638__auto___64567;\nvar G__64570 = cljs.core.count(c__4638__auto___64567);\nvar G__64571 = (0);\nseq__64146_64552 = G__64568;\nchunk__64147_64553 = G__64569;\ncount__64148_64554 = G__64570;\ni__64149_64555 = G__64571;\ncontinue;\n} else {\nvar item_64572 = cljs.core.first(seq__64146_64566__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__64146_64552,chunk__64147_64553,count__64148_64554,i__64149_64555,item_64572,seq__64146_64566__$1,temp__5753__auto___64565,send_queue,vec__64143,p,serial,front,send_queues,remote_names,operations,map__64142,map__64142__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_64572,remote);\n});})(seq__64146_64552,chunk__64147_64553,count__64148_64554,i__64149_64555,item_64572,seq__64146_64566__$1,temp__5753__auto___64565,send_queue,vec__64143,p,serial,front,send_queues,remote_names,operations,map__64142,map__64142__$1,app__$1,runtime_atom))\n);\n\n\nvar G__64574 = cljs.core.next(seq__64146_64566__$1);\nvar G__64575 = null;\nvar G__64576 = (0);\nvar G__64577 = (0);\nseq__64146_64552 = G__64574;\nchunk__64147_64553 = G__64575;\ncount__64148_64554 = G__64576;\ni__64149_64555 = G__64577;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\n} else {\nvar map__64151 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote,serial);\nvar map__64151__$1 = cljs.core.__destructure_map(map__64151);\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64151__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64151__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,(function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node,remote);\n}));\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\n}\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n\nvar seq__64153_64579 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__64154_64580 = null;\nvar count__64155_64581 = (0);\nvar i__64156_64582 = (0);\nwhile(true){\nif((i__64156_64582 < count__64155_64581)){\nvar op_64585 = chunk__64154_64580.cljs$core$IIndexed$_nth$arity$2(null,i__64156_64582);\n(op_64585.cljs$core$IFn$_invoke$arity$0 ? op_64585.cljs$core$IFn$_invoke$arity$0() : op_64585.call(null));\n\n\nvar G__64587 = seq__64153_64579;\nvar G__64588 = chunk__64154_64580;\nvar G__64589 = count__64155_64581;\nvar G__64590 = (i__64156_64582 + (1));\nseq__64153_64579 = G__64587;\nchunk__64154_64580 = G__64588;\ncount__64155_64581 = G__64589;\ni__64156_64582 = G__64590;\ncontinue;\n} else {\nvar temp__5753__auto___64591 = cljs.core.seq(seq__64153_64579);\nif(temp__5753__auto___64591){\nvar seq__64153_64592__$1 = temp__5753__auto___64591;\nif(cljs.core.chunked_seq_QMARK_(seq__64153_64592__$1)){\nvar c__4638__auto___64593 = cljs.core.chunk_first(seq__64153_64592__$1);\nvar G__64595 = cljs.core.chunk_rest(seq__64153_64592__$1);\nvar G__64596 = c__4638__auto___64593;\nvar G__64597 = cljs.core.count(c__4638__auto___64593);\nvar G__64598 = (0);\nseq__64153_64579 = G__64595;\nchunk__64154_64580 = G__64596;\ncount__64155_64581 = G__64597;\ni__64156_64582 = G__64598;\ncontinue;\n} else {\nvar op_64599 = cljs.core.first(seq__64153_64592__$1);\n(op_64599.cljs$core$IFn$_invoke$arity$0 ? op_64599.cljs$core$IFn$_invoke$arity$0() : op_64599.call(null));\n\n\nvar G__64600 = cljs.core.next(seq__64153_64592__$1);\nvar G__64601 = null;\nvar G__64602 = (0);\nvar G__64603 = (0);\nseq__64153_64579 = G__64600;\nchunk__64154_64580 = G__64601;\ncount__64155_64581 = G__64602;\ni__64156_64582 = G__64603;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn new_send_queues;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\nvar G__64169 = arguments.length;\nswitch (G__64169) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\n})),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\n}))),ast_nodes);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\nvar G__64179 = arguments.length;\nswitch (G__64179) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,p__64183,addl){\nvar map__64184 = p__64183;\nvar map__64184__$1 = cljs.core.__destructure_map(map__64184);\nvar tx_node = map__64184__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64184__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nvar map__64186 = options;\nvar map__64186__$1 = cljs.core.__destructure_map(map__64186);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64186__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64186__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__64188 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app__$1], null)], 0));\nvar G__64188__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64188,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__64188);\nvar G__64188__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64188__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__64188__$1);\nif(cljs.core.truth_(component)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64188__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__64188__$2;\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__64189){\nvar map__64190 = p__64189;\nvar map__64190__$1 = cljs.core.__destructure_map(map__64190);\nvar tx_node = map__64190__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64190__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3);\n\n/**\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n *   of things to do on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\n}catch (e64191){var e = e64191;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,247,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch for mutation\",(function (){var G__64192 = env__$1;\nvar G__64192__$1 = (((G__64192 == null))?null:new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(G__64192));\nif((G__64192__$1 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(G__64192__$1);\n}\n})(),\"failed with an exception. No dispatch generated.\"], null);\n}),null)),null,53319846);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\nvar dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__64193){\nvar map__64194 = p__64193;\nvar map__64194__$1 = cljs.core.__destructure_map(map__64194);\nvar ele = map__64194__$1;\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64194__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__64195 = original_ast_node;\nvar map__64195__$1 = cljs.core.__destructure_map(map__64195);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64195__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\nvar G__64196 = ele;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__64196,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\n} else {\nreturn G__64196;\n}\n});\nvar dispatch_all = (function (eles){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\n});\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.application_rendered_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$application_rendered_BANG_(p__64200,options){\nvar map__64201 = p__64200;\nvar map__64201__$1 = cljs.core.__destructure_map(map__64201);\nvar app__$1 = map__64201__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64201__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nif(cljs.core.truth_(cljs.core.some((function (p1__64198_SHARP_){\nreturn cljs.core.boolean$(new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(p1__64198_SHARP_)));\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom))))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n}),queue);\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0)) : com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.call(null,app__$1,(0)));\n} else {\nreturn null;\n}\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__64205){\nvar map__64206 = p__64205;\nvar map__64206__$1 = cljs.core.__destructure_map(map__64206);\nvar app__$1 = map__64206__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64206__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__64207 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar map__64207__$1 = cljs.core.__destructure_map(map__64207);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64207__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64207__$1,false);\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__64203_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__64203_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__64203_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n}),ready);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (a){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),(function (p1__64204_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__64204_SHARP_,dispatched_nodes);\n})),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.vec(blocked));\n}));\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app__$1));\n});\n/**\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\nvar G__64211 = arguments.length;\nswitch (G__64211) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\n * If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\nvar G__64214 = arguments.length;\nswitch (G__64214) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\nvar G__64218 = arguments.length;\nswitch (G__64218) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Runs any incomplete and non-blocked optimistic operations on a node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app__$1,p__64220){\nvar map__64222 = p__64220;\nvar map__64222__$1 = cljs.core.__destructure_map(map__64222);\nvar node = map__64222__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64222__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64222__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__64223,element){\nvar map__64224 = p__64223;\nvar map__64224__$1 = cljs.core.__destructure_map(map__64224);\nvar acc = map__64224__$1;\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64224__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64224__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\nif(cljs.core.truth_(done_QMARK_)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\n} else {\nvar map__64225 = element;\nvar map__64225__$1 = cljs.core.__destructure_map(map__64225);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64225__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64225__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64225__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64225__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar map__64226 = dispatch;\nvar map__64226__$1 = cljs.core.__destructure_map(map__64226);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64226__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\nvar exec_QMARK_ = (function (){var and__4210__auto__ = action;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not((function (){var or__4212__auto__ = done_QMARK_;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})());\n} else {\nreturn and__4210__auto__;\n}\n})();\nvar fully_complete_QMARK_ = (function (){var and__4210__auto__ = (function (){var or__4212__auto__ = exec_QMARK_;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})();\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\n} else {\nreturn and__4210__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{if(cljs.core.truth_(action)){\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n} else {\n}\n}catch (e64229){var e_64651 = e64229;\nvar mutation_symbol_64652 = new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,340,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_64651,\"The `action` section of mutation\",mutation_symbol_64652,\"threw an exception.\"], null);\n}),null)),null,1483683956);\n}\nif(cljs.core.truth_((function (){var and__4210__auto__ = (function (){var or__4212__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4210__auto__;\n}\n})())){\ntry{var tx_64655 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_64655], null));\n}catch (e64231){var e_64656 = e64231;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app__$1,p__64233){\nvar map__64234 = p__64233;\nvar map__64234__$1 = cljs.core.__destructure_map(map__64234);\nvar node = map__64234__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64234__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64234__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_elements,element){\nvar map__64236 = element;\nvar map__64236__$1 = cljs.core.__destructure_map(map__64236);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64236__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64236__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64236__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64236__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__64237 = dispatch;\nvar map__64237__$1 = cljs.core.__destructure_map(map__64237);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64237__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar exec_QMARK_ = (function (){var and__4210__auto__ = action;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024))));\n} else {\nreturn and__4210__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n}catch (e64238){var e_64670 = e64238;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,373,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_64670,\"The `action` section threw an exception for mutation: \",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n}),null)),null,142487446);\n}\nif(cljs.core.truth_((function (){var and__4210__auto__ = (function (){var or__4212__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4210__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4210__auto__;\n}\n})())){\ntry{var tx_64678 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_64678], null));\n}catch (e64240){var e_64682 = e64240;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}),cljs.core.PersistentVector.EMPTY,elements);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app__$1,p__64242){\nvar map__64243 = p__64242;\nvar map__64243__$1 = cljs.core.__destructure_map(map__64243);\nvar tx_node = map__64243__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64243__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nvar element_complete_QMARK_ = (function (p__64245){\nvar map__64246 = p__64245;\nvar map__64246__$1 = cljs.core.__destructure_map(map__64246);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64246__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64246__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\n});\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\n});\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__64248,remote,txn_id,ele_idx){\nvar map__64249 = p__64248;\nvar map__64249__$1 = cljs.core.__destructure_map(map__64249);\nvar app__$1 = map__64249__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64249__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__64250 = cljs.core.deref(runtime_atom);\nvar map__64250__$1 = cljs.core.__destructure_map(map__64250);\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64250__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar old_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\nvar queue = cljs.core.filterv((function (p__64251){\nvar map__64253 = p__64251;\nvar map__64253__$1 = cljs.core.__destructure_map(map__64253);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64253__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64253__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n}),old_queue);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue);\n});\n/**\n * Record a network result on the given txn/element.\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n * queue so that remaining items can proceed, and schedules send processing.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\nvar G__64256 = arguments.length;\nswitch (G__64256) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__64258,txn_id,ele_idx,remote,result,result_key){\nvar map__64259 = p__64258;\nvar map__64259__$1 = cljs.core.__destructure_map(map__64259);\nvar app__$1 = map__64259__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64259__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__64260){\nvar map__64261 = p__64260;\nvar map__64261__$1 = cljs.core.__destructure_map(map__64261);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64261__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n}),(0),active_queue);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,421,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue!\"], null);\n}),null)),null,-804160516);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nnew cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\n\n/**\n * Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$compute_desired_ast_node(app__$1,remote,tx_node,tx_element){\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nvar map__64264 = tx_element;\nvar map__64264__$1 = cljs.core.__destructure_map(map__64264);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64264__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\nvar desired_ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,442,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire], null);\n}),null)),null,-1721167758);\n\nreturn remote_desire;\n})()\n\n))));\nvar query_transform = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nvar ast = (cljs.core.truth_((function (){var and__4210__auto__ = desired_ast;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn query_transform;\n} else {\nreturn and__4210__auto__;\n}\n})())?(query_transform.cljs$core$IFn$_invoke$arity$1 ? query_transform.cljs$core$IFn$_invoke$arity$1(desired_ast) : query_transform.call(null,desired_ast)):desired_ast);\nvar G__64267 = tx_element;\nvar G__64267__$1 = (cljs.core.truth_(desired_ast)?cljs.core.assoc_in(G__64267,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425),remote], null),desired_ast):G__64267);\nif(cljs.core.truth_(ast)){\nreturn cljs.core.assoc_in(G__64267__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null),ast);\n} else {\nreturn G__64267__$1;\n}\n});\n/**\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__64269,p__64270,ele_idx,remote){\nvar map__64271 = p__64269;\nvar map__64271__$1 = cljs.core.__destructure_map(map__64271);\nvar app__$1 = map__64271__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64271__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__64272 = p__64270;\nvar map__64272__$1 = cljs.core.__destructure_map(map__64272);\nvar tx_node = map__64272__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64272__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64272__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),null)], null);\n\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(1));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\n\nreturn send_node;\n} else {\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n\nreturn null;\n}\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__64275){\nvar map__64276 = p__64275;\nvar map__64276__$1 = cljs.core.__destructure_map(map__64276);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64276__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64276__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64276__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\n\nreturn updated_node;\n}\n}),tx_node,to_dispatch);\n});\n/**\n * Returns true if the given node has no active network operations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__64279){\nvar map__64280 = p__64279;\nvar map__64280__$1 = cljs.core.__destructure_map(map__64280);\nvar tx_node = map__64280__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64280__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn cljs.core.every_QMARK_((function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__64281){\nvar map__64282 = p__64281;\nvar map__64282__$1 = cljs.core.__destructure_map(map__64282);\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64282__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64282__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\nreturn cljs.core.empty_QMARK_(in_progress);\n}),elements);\n});\n/**\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n * is no such element.\n * \n *   remote-names is the set of legal remote names.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__64284){\nvar map__64285 = p__64284;\nvar map__64285__$1 = cljs.core.__destructure_map(map__64285);\nvar element = map__64285__$1;\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64285__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64285__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),null)], null);\n\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\nif(cljs.core.seq(remaining)){\nreturn element;\n} else {\nreturn null;\n}\n});\n/**\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n *   tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app__$1,p__64287){\nvar map__64288 = p__64287;\nvar map__64288__$1 = cljs.core.__destructure_map(map__64288);\nvar tx_node = map__64288__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64288__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\nvar element = cljs.core.some(with_work,elements);\nif(cljs.core.truth_(element)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,tx_node,element);\n} else {\nreturn tx_node;\n}\n} else {\nreturn tx_node;\n}\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app__$1,p__64290){\nvar map__64291 = p__64290;\nvar map__64291__$1 = cljs.core.__destructure_map(map__64291);\nvar tx_node = map__64291__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64291__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64291__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nif(optimistic_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n}),tx_node,elements);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app__$1,tx_node);\n}\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__64293,remote){\nvar map__64294 = p__64293;\nvar map__64294__$1 = cljs.core.__destructure_map(map__64294);\nvar tx_element = map__64294__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64294__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64294__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64294__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64294__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64294__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nvar result_64756 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_64757 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_64757)){\nvar env_64759 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_64756], null));\ntry{(handler_64757.cljs$core$IFn$_invoke$arity$1 ? handler_64757.cljs$core$IFn$_invoke$arity$1(env_64759) : handler_64757.call(null,env_64759));\n}catch (e64296){var e_64767 = e64296;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,574,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_64767,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception.\"], null);\n}),null)),null,1600819175);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__64298){\nvar map__64299 = p__64298;\nvar map__64299__$1 = cljs.core.__destructure_map(map__64299);\nvar tx_element = map__64299__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64299__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64299__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n}),tx_element,cljs.core.keys(results));\n});\n/**\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\n *   not been distributed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app__$1,p__64301){\nvar map__64302 = p__64301;\nvar map__64302__$1 = cljs.core.__destructure_map(map__64302);\nvar tx_node = map__64302__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64302__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app__$1,tx_node,element);\n}),elements));\n});\n/**\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\n *   Returns the updated tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app__$1,p__64304){\nvar map__64306 = p__64304;\nvar map__64306__$1 = cljs.core.__destructure_map(map__64306);\nvar tx_node = map__64306__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64306__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar get_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,p__64307){\nvar map__64308 = p__64307;\nvar map__64308__$1 = cljs.core.__destructure_map(map__64308);\nvar element = map__64308__$1;\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64308__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64308__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64308__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64308__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar seq__64310_64793 = cljs.core.seq(progress);\nvar chunk__64311_64794 = null;\nvar count__64312_64795 = (0);\nvar i__64313_64796 = (0);\nwhile(true){\nif((i__64313_64796 < count__64312_64795)){\nvar vec__64324_64797 = chunk__64311_64794.cljs$core$IIndexed$_nth$arity$2(null,i__64313_64796);\nvar remote_64798 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64324_64797,(0),null);\nvar value_64799 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64324_64797,(1),null);\nvar env_64800 = get_env(remote_64798,value_64799);\nvar action_64801 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_64801)){\ntry{(action_64801.cljs$core$IFn$_invoke$arity$1 ? action_64801.cljs$core$IFn$_invoke$arity$1(env_64800) : action_64801.call(null,env_64800));\n}catch (e64327){var e_64802 = e64327;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64310_64793,chunk__64311_64794,count__64312_64795,i__64313_64796,e_64802,env_64800,action_64801,vec__64324_64797,remote_64798,value_64799,map__64308,map__64308__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64306,map__64306__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_64802,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n});})(seq__64310_64793,chunk__64311_64794,count__64312_64795,i__64313_64796,e_64802,env_64800,action_64801,vec__64324_64797,remote_64798,value_64799,map__64308,map__64308__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64306,map__64306__$1,tx_node,elements))\n,null)),null,535122994);\n}} else {\n}\n\n\nvar G__64805 = seq__64310_64793;\nvar G__64806 = chunk__64311_64794;\nvar G__64807 = count__64312_64795;\nvar G__64808 = (i__64313_64796 + (1));\nseq__64310_64793 = G__64805;\nchunk__64311_64794 = G__64806;\ncount__64312_64795 = G__64807;\ni__64313_64796 = G__64808;\ncontinue;\n} else {\nvar temp__5753__auto___64809 = cljs.core.seq(seq__64310_64793);\nif(temp__5753__auto___64809){\nvar seq__64310_64811__$1 = temp__5753__auto___64809;\nif(cljs.core.chunked_seq_QMARK_(seq__64310_64811__$1)){\nvar c__4638__auto___64813 = cljs.core.chunk_first(seq__64310_64811__$1);\nvar G__64814 = cljs.core.chunk_rest(seq__64310_64811__$1);\nvar G__64815 = c__4638__auto___64813;\nvar G__64816 = cljs.core.count(c__4638__auto___64813);\nvar G__64817 = (0);\nseq__64310_64793 = G__64814;\nchunk__64311_64794 = G__64815;\ncount__64312_64795 = G__64816;\ni__64313_64796 = G__64817;\ncontinue;\n} else {\nvar vec__64329_64820 = cljs.core.first(seq__64310_64811__$1);\nvar remote_64821 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64329_64820,(0),null);\nvar value_64822 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64329_64820,(1),null);\nvar env_64825 = get_env(remote_64821,value_64822);\nvar action_64826 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_64826)){\ntry{(action_64826.cljs$core$IFn$_invoke$arity$1 ? action_64826.cljs$core$IFn$_invoke$arity$1(env_64825) : action_64826.call(null,env_64825));\n}catch (e64333){var e_64831 = e64333;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64310_64793,chunk__64311_64794,count__64312_64795,i__64313_64796,e_64831,env_64825,action_64826,vec__64329_64820,remote_64821,value_64822,seq__64310_64811__$1,temp__5753__auto___64809,map__64308,map__64308__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64306,map__64306__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_64831,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node)], null);\n});})(seq__64310_64793,chunk__64311_64794,count__64312_64795,i__64313_64796,e_64831,env_64825,action_64826,vec__64329_64820,remote_64821,value_64822,seq__64310_64811__$1,temp__5753__auto___64809,map__64308,map__64308__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__64306,map__64306__$1,tx_node,elements))\n,null)),null,417607075);\n}} else {\n}\n\n\nvar G__64838 = cljs.core.next(seq__64310_64811__$1);\nvar G__64839 = null;\nvar G__64840 = (0);\nvar G__64841 = (0);\nseq__64310_64793 = G__64838;\nchunk__64311_64794 = G__64839;\ncount__64312_64795 = G__64840;\ni__64313_64796 = G__64841;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n}),tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app__$1,p__64335){\nvar map__64336 = p__64335;\nvar map__64336__$1 = cljs.core.__destructure_map(map__64336);\nvar tx_node = map__64336__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64336__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),null)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app__$1,(function (){var G__64337 = tx_node;\nvar G__64337__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,G__64337):G__64337);\nif((!(optimistic_QMARK_))){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app__$1,G__64337__$1);\n} else {\nreturn G__64337__$1;\n}\n})())));\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app__$1,queue){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64339){\nreturn cljs.core.coll_QMARK_(G__64339);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.set_QMARK_], null);\n\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,tx_node);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,element){\nvar map__64341 = element;\nvar map__64341__$1 = cljs.core.__destructure_map(map__64341);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64341__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\nif(cljs.core.truth_(refresh)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\n} else {\nreturn acc;\n}\n}),outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__64343,remotes){\nvar map__64344 = p__64343;\nvar map__64344__$1 = cljs.core.__destructure_map(map__64344);\nvar tx_node = map__64344__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64344__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nvar active_on_element = (function (p__64345){\nvar map__64346 = p__64345;\nvar map__64346__$1 = cljs.core.__destructure_map(map__64346);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64346__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64346__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes__$1 = cljs.core.set(remotes);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\n});\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,ele){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\n}),cljs.core.PersistentHashSet.EMPTY,elements);\n});\n/**\n * Calculate which remotes still have network activity to do on the given active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__64349){\nvar map__64350 = p__64349;\nvar map__64350__$1 = cljs.core.__destructure_map(map__64350);\nvar app__$1 = map__64350__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64350__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64350__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar new_node = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : schedule_render_BANG_.call(null,app__$1));\n\nreturn null;\n});\n/**\n * Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n * have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n * are allowed to).\n * \n * NOTE: any *remote* behaviors of `tx` will *still be async*.\n * \n * This function:\n * \n * * Runs the optimistic side of the mutation(s)\n * * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n *   but with the optimistic part already done.\n * * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n * \n * If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n * component so it can refresh immediately and avoid DOM input issues.\n * \n * Returns the new component props or the final state map if no component was used in the transaction.\n * \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$transact_sync_BANG_(app__$1,tx,p__64354){\nvar map__64355 = p__64354;\nvar map__64355__$1 = cljs.core.__destructure_map(map__64355);\nvar options = map__64355__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64355__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar mutation_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(tx));\nvar ast_node__GT_operation = cljs.core.zipmap(mutation_nodes,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (ast_node){\nreturn com.fulcrologic.fulcro.mutations.mutate.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),ast_node], null));\n}),mutation_nodes));\nvar map__64357 = cljs.core.group_by((function (p1__64353_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),null], null), null),cljs.core.set(cljs.core.keys((ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1 ? ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1(p1__64353_SHARP_) : ast_node__GT_operation.call(null,p1__64353_SHARP_)))));\n}),mutation_nodes);\nvar map__64357__$1 = cljs.core.__destructure_map(map__64357);\nvar optimistic = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64357__$1,true);\nvar mixed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64357__$1,false);\nvar optimistic_tx_node = ((cljs.core.seq(optimistic))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),optimistic], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar mixed_tx_node = ((cljs.core.seq(mixed))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),mixed], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar resulting_node_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nif(cljs.core.truth_(optimistic_tx_node)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,optimistic_tx_node);\n} else {\n}\n\nif(cljs.core.truth_(mixed_tx_node)){\nvar node_64891 = com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,mixed_tx_node);\nvar runtime_atom_64892 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.reset_BANG_(resulting_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node_64891));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom_64892,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),cljs.core.conj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([node_64891], 0));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(20));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4210__auto__ = component;\nif(cljs.core.truth_(and__4210__auto__)){\nvar and__4210__auto____$1 = (com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,component));\nif(cljs.core.truth_(and__4210__auto____$1)){\nreturn com.fulcrologic.fulcro.components.has_ident_QMARK_(component);\n} else {\nreturn and__4210__auto____$1;\n}\n} else {\nreturn and__4210__auto__;\n}\n})())){\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,743,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen.\"], null);\n}),null)),null,-62043531);\n} else {\n}\n}\n\nreturn cljs.core.deref(resulting_node_id);\n});\n/**\n * Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n *   that might be used by the transaction processing (or UI refresh).\n * \n *   Some that may be supported (depending on application settings):\n * \n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI.\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n *         rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n *         force a normal refresh via `app/render!`.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n *   algorithm will influence their necessity.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$default_tx_BANG_(var_args){\nvar G__64363 = arguments.length;\nswitch (G__64363) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__64365,tx,p__64366){\nvar map__64367 = p__64365;\nvar map__64367__$1 = cljs.core.__destructure_map(map__64367);\nvar app__$1 = map__64367__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64367__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__64368 = p__64366;\nvar map__64368__$1 = cljs.core.__destructure_map(map__64368);\nvar options = map__64368__$1;\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64368__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nif(cljs.core.truth_(synchronous_QMARK_)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_(app__$1,tx,options);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1);\n\nvar map__64369 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null),options], 0));\nvar map__64369__$1 = cljs.core.__destructure_map(map__64369);\nvar options__$1 = map__64369__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64369__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64369__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64369__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__64360_SHARP_){\nreturn (((p1__64360_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__64360_SHARP_)));\n}),tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});\nvar refresh__$1 = (function (){var G__64371 = cljs.core.set(refresh);\nvar G__64371__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__64371,follow_on_reads):G__64371);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__64371__$1,ref);\n} else {\nreturn G__64371__$1;\n}\n})();\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\nvar G__64373 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (v,n){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(v),n);\n}),node);\nvar G__64373__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__64373,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__64373);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__64373__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__64373__$1;\n}\n}));\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}\n}));\n\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Abort any elements in the given send-queue that have the given abort id.\n * \n *   Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n *   virtual result will still be sent for that node.\n * \n *   Returns a new send-queue that no longer contains the aborted nodes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_elements_BANG_(p__64375,send_queue,abort_id){\nvar map__64376 = p__64375;\nvar map__64376__$1 = cljs.core.__destructure_map(map__64376);\nvar remote = map__64376__$1;\nvar abort_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64376__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nif(cljs.core.truth_(abort_BANG_)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__64378){\nvar map__64379 = p__64378;\nvar map__64379__$1 = cljs.core.__destructure_map(map__64379);\nvar send_node = map__64379__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64379__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64379__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64379__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar aid = (function (){var or__4212__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})();\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(aid,abort_id)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,send_node);\n} else {\nif(cljs.core.truth_(active_QMARK_)){\n(abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(remote,abort_id) : abort_BANG_.call(null,remote,abort_id));\n\nreturn result;\n} else {\nvar G__64380_64946 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Cancelled\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__64380_64946) : result_handler.call(null,G__64380_64946));\n\nreturn result;\n\n}\n}\n}),cljs.core.PersistentVector.EMPTY,send_queue);\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,821,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot abort network requests. The remote has no abort support!\"], null);\n}),null)),null,1309900613);\n\nreturn send_queue;\n}\n});\n/**\n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_BANG_(app__$1,abort_id){\nvar map__64382 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__64382__$1 = cljs.core.__destructure_map(map__64382);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64382__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar runtime_state = cljs.core.deref(runtime_atom);\nvar map__64383 = runtime_state;\nvar map__64383__$1 = cljs.core.__destructure_map(map__64383);\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64383__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517));\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64383__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar remote_names = cljs.core.keys(send_queues);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,remote_name){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,remote_name,com.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(remotes,remote_name),cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote_name),abort_id));\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n});\n/**\n * Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n *   items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n *   that is in the send queue of the given remote.\n * \n *   This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_remote_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_remote_BANG_(app_ish,remote){\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(app_ish);\nvar map__64386 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__64386__$1 = cljs.core.__destructure_map(map__64386);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64386__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64386__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__64387 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),remote], null));\nvar map__64387__$1 = cljs.core.__destructure_map(map__64387);\nvar the_remote = map__64387__$1;\nvar abort_network_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64387__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nvar old_send_queue = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.PersistentVector.EMPTY);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.disj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([remote], 0));\n\nvar seq__64389 = cljs.core.seq(old_send_queue);\nvar chunk__64394 = null;\nvar count__64395 = (0);\nvar i__64396 = (0);\nwhile(true){\nif((i__64396 < count__64395)){\nvar map__64430 = chunk__64394.cljs$core$IIndexed$_nth$arity$2(null,i__64396);\nvar map__64430__$1 = cljs.core.__destructure_map(map__64430);\nvar send_node = map__64430__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64430__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64430__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64430__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__64397_64954 = cljs.core.seq((function (){var or__4212__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__64398_64955 = null;\nvar count__64399_64956 = (0);\nvar i__64400_64957 = (0);\nwhile(true){\nif((i__64400_64957 < count__64399_64956)){\nvar aid_64964 = chunk__64398_64955.cljs$core$IIndexed$_nth$arity$2(null,i__64400_64957);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_64964) : abort_network_BANG_.call(null,the_remote,aid_64964));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,aid_64964,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,aid_64964,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-177258143);\n}\n} else {\n}\n\nvar G__64440_64978 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__64440_64978) : result_handler.call(null,G__64440_64978));\n}catch (e64439){var e_64980 = e64439;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,e_64980,aid_64964,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_64980,\"Failed to abort send node\"], null);\n});})(seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,e_64980,aid_64964,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-957072156);\n}\n\nvar G__64992 = seq__64397_64954;\nvar G__64993 = chunk__64398_64955;\nvar G__64994 = count__64399_64956;\nvar G__64995 = (i__64400_64957 + (1));\nseq__64397_64954 = G__64992;\nchunk__64398_64955 = G__64993;\ncount__64399_64956 = G__64994;\ni__64400_64957 = G__64995;\ncontinue;\n} else {\nvar temp__5753__auto___64997 = cljs.core.seq(seq__64397_64954);\nif(temp__5753__auto___64997){\nvar seq__64397_64998__$1 = temp__5753__auto___64997;\nif(cljs.core.chunked_seq_QMARK_(seq__64397_64998__$1)){\nvar c__4638__auto___64999 = cljs.core.chunk_first(seq__64397_64998__$1);\nvar G__65000 = cljs.core.chunk_rest(seq__64397_64998__$1);\nvar G__65001 = c__4638__auto___64999;\nvar G__65002 = cljs.core.count(c__4638__auto___64999);\nvar G__65003 = (0);\nseq__64397_64954 = G__65000;\nchunk__64398_64955 = G__65001;\ncount__64399_64956 = G__65002;\ni__64400_64957 = G__65003;\ncontinue;\n} else {\nvar aid_65004 = cljs.core.first(seq__64397_64998__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_65004) : abort_network_BANG_.call(null,the_remote,aid_65004));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,aid_65004,seq__64397_64998__$1,temp__5753__auto___64997,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,aid_65004,seq__64397_64998__$1,temp__5753__auto___64997,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-2030218490);\n}\n} else {\n}\n\nvar G__64444_65005 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__64444_65005) : result_handler.call(null,G__64444_65005));\n}catch (e64442){var e_65006 = e64442;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,e_65006,aid_65004,seq__64397_64998__$1,temp__5753__auto___64997,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65006,\"Failed to abort send node\"], null);\n});})(seq__64397_64954,chunk__64398_64955,count__64399_64956,i__64400_64957,seq__64389,chunk__64394,count__64395,i__64396,e_65006,aid_65004,seq__64397_64998__$1,temp__5753__auto___64997,map__64430,map__64430__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,435776157);\n}\n\nvar G__65011 = cljs.core.next(seq__64397_64998__$1);\nvar G__65012 = null;\nvar G__65013 = (0);\nvar G__65014 = (0);\nseq__64397_64954 = G__65011;\nchunk__64398_64955 = G__65012;\ncount__64399_64956 = G__65013;\ni__64400_64957 = G__65014;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__65015 = seq__64389;\nvar G__65016 = chunk__64394;\nvar G__65017 = count__64395;\nvar G__65018 = (i__64396 + (1));\nseq__64389 = G__65015;\nchunk__64394 = G__65016;\ncount__64395 = G__65017;\ni__64396 = G__65018;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__64389);\nif(temp__5753__auto__){\nvar seq__64389__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__64389__$1)){\nvar c__4638__auto__ = cljs.core.chunk_first(seq__64389__$1);\nvar G__65024 = cljs.core.chunk_rest(seq__64389__$1);\nvar G__65025 = c__4638__auto__;\nvar G__65026 = cljs.core.count(c__4638__auto__);\nvar G__65027 = (0);\nseq__64389 = G__65024;\nchunk__64394 = G__65025;\ncount__64395 = G__65026;\ni__64396 = G__65027;\ncontinue;\n} else {\nvar map__64445 = cljs.core.first(seq__64389__$1);\nvar map__64445__$1 = cljs.core.__destructure_map(map__64445);\nvar send_node = map__64445__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64445__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64445__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64445__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__64390_65034 = cljs.core.seq((function (){var or__4212__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__64391_65035 = null;\nvar count__64392_65036 = (0);\nvar i__64393_65037 = (0);\nwhile(true){\nif((i__64393_65037 < count__64392_65036)){\nvar aid_65038 = chunk__64391_65035.cljs$core$IIndexed$_nth$arity$2(null,i__64393_65037);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_65038) : abort_network_BANG_.call(null,the_remote,aid_65038));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,aid_65038,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,aid_65038,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1529273596);\n}\n} else {\n}\n\nvar G__64455_65040 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__64455_65040) : result_handler.call(null,G__64455_65040));\n}catch (e64453){var e_65042 = e64453;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,e_65042,aid_65038,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65042,\"Failed to abort send node\"], null);\n});})(seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,e_65042,aid_65038,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,358361144);\n}\n\nvar G__65047 = seq__64390_65034;\nvar G__65048 = chunk__64391_65035;\nvar G__65049 = count__64392_65036;\nvar G__65050 = (i__64393_65037 + (1));\nseq__64390_65034 = G__65047;\nchunk__64391_65035 = G__65048;\ncount__64392_65036 = G__65049;\ni__64393_65037 = G__65050;\ncontinue;\n} else {\nvar temp__5753__auto___65051__$1 = cljs.core.seq(seq__64390_65034);\nif(temp__5753__auto___65051__$1){\nvar seq__64390_65052__$1 = temp__5753__auto___65051__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__64390_65052__$1)){\nvar c__4638__auto___65053 = cljs.core.chunk_first(seq__64390_65052__$1);\nvar G__65054 = cljs.core.chunk_rest(seq__64390_65052__$1);\nvar G__65055 = c__4638__auto___65053;\nvar G__65056 = cljs.core.count(c__4638__auto___65053);\nvar G__65057 = (0);\nseq__64390_65034 = G__65054;\nchunk__64391_65035 = G__65055;\ncount__64392_65036 = G__65056;\ni__64393_65037 = G__65057;\ncontinue;\n} else {\nvar aid_65058 = cljs.core.first(seq__64390_65052__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_65058) : abort_network_BANG_.call(null,the_remote,aid_65058));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,861,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,aid_65058,seq__64390_65052__$1,temp__5753__auto___65051__$1,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\"], null);\n});})(seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,aid_65058,seq__64390_65052__$1,temp__5753__auto___65051__$1,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1436815873);\n}\n} else {\n}\n\nvar G__64458_65060 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__64458_65060) : result_handler.call(null,G__64458_65060));\n}catch (e64457){var e_65062 = e64457;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,867,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,e_65062,aid_65058,seq__64390_65052__$1,temp__5753__auto___65051__$1,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65062,\"Failed to abort send node\"], null);\n});})(seq__64390_65034,chunk__64391_65035,count__64392_65036,i__64393_65037,seq__64389,chunk__64394,count__64395,i__64396,e_65062,aid_65058,seq__64390_65052__$1,temp__5753__auto___65051__$1,map__64445,map__64445__$1,send_node,active_QMARK_,options,result_handler,seq__64389__$1,temp__5753__auto__,app__$1,map__64386,map__64386__$1,state_atom,runtime_atom,map__64387,map__64387__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-1269445966);\n}\n\nvar G__65064 = cljs.core.next(seq__64390_65052__$1);\nvar G__65065 = null;\nvar G__65066 = (0);\nvar G__65067 = (0);\nseq__64390_65034 = G__65064;\nchunk__64391_65035 = G__65065;\ncount__64392_65036 = G__65066;\ni__64393_65037 = G__65067;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__65068 = cljs.core.next(seq__64389__$1);\nvar G__65069 = null;\nvar G__65070 = (0);\nvar G__65071 = (0);\nseq__64389 = G__65068;\nchunk__64394 = G__65069;\ncount__64395 = G__65070;\ni__64396 = G__65071;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^G","~$>defn","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^X","^?","^@","^J","^J","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^X","~$com.fulcrologic.fulcro.algorithms.denormalize","^12","~$cljs.core","^13","^G","^G","~$goog","^14","~$com.fulcrologic.fulcro.specs","^15","~$inspect","^G","^W","^W","~$com.fulcrologic.fulcro.algorithms.tempid","^17","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^19","~$sched","^19","~$enc","~$taoensso.encore","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1<","^1<","^@","^@","~$fdn","^12","~$tempid","^17","^1>","^1>"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$schedule!","^19","^F","^G","^H","^G","^I","^J","~$=>","^J","~$|","^J"],"~:require-macros",["^ ","^?","^@","^J","^J","^Y","^Z","^[","^10","^13","^13","^G","^G","^16","^G","~$m","^18","^1;","^1<","^18","^18","~$s","^@","^10","^10","^Z","^Z","^1<","^1<","^@","^@"],"~:form",["~#list",["~$ns","^N","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ",["^1H",["^1B",["^W","~:as","^V"],["^?","^1J","~$s"],["^U","^1J","^T"],["^17","^1J","^1@"],["^12","^1J","^1?"],["^1>","^1J","^1="],["^19","^1J","^1:","~:refer",["^1D"]],["^18","^1J","~$m"],["^10","^1J","^["],["^15"],["^G","^1J","^16","^1K",["^F","^H"]],"^15",["^J","^1K",["^I","^1E","~$|"]],["^X","^1J","^11"],["^1<","^1J","^1;"],["^Z","^1J","^Y"]]]]],"~:flags",["^ ","^1B",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]],"^Q","^N","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1636481277421,"^O",["^ ","^T","^U","^V","^W","^X","^X","^?","^@","^J","^J","^Y","^Z","^[","^10","^11","^X","^12","^12","^13","^13","^G","^G","^14","^14","^15","^15","^16","^G","^W","^W","^17","^17","~$m","^18","^19","^19","^1:","^19","^1;","^1<","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","^1=","^1>","^1<","^1<","^@","^@","^1?","^12","^1@","^17","^1>","^1>"],"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. \"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [com.fulcrologic.guardrails.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (futil/ast->query ast)]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (if (map? body)\n                                                                 (select-keys body (top-keys ast))\n                                                                 body)\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app combined-node-id (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote    (get (app->remotes app) remote-name)\n               transmit! (get remote :transmit!)]\n    (try\n      (inspect/ilet [tx (futil/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception for tx:\" (futil/ast->query (::ast send-node)))\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name)\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        operations      (atom [])\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (swap! operations conj #(net-send! app item remote)))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (swap! operations conj #(net-send! app send-node remote)))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, the queue updates of those handlers would be overwritten by our swap on the\n    ;; prior line\n    (doseq [op @operations]\n      (op))\n    new-send-queues))\n\n(defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch for mutation\" (some-> env :ast futil/ast->query) \"failed with an exception. No dispatch generated.\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(defn application-rendered!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app} options]\n  (when (some #(boolean (-> % ::options :after-render?)) (-> runtime-atom deref ::submission-queue))\n    (swap! runtime-atom update ::submission-queue\n      (fn [queue] (mapv (fn [node] (update node ::options dissoc :after-render?)) queue)))\n    (schedule-activation! app 0)))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::options) (::submission-queue @runtime-atom))\n        dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) ready)]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue (vec blocked)))))\n    (process-queue! app)))\n\n(defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 0)))\n\n(defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 0)))\n\n(defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-id-before (inspect/current-history-id app)\n                                 state           (:com.fulcrologic.fulcro.application/state-atom app)\n                                 state-before    @state\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (let [mutation-symbol (:dispatch-key original-ast-node)]\n                                     (log/error e \"The `action` section of mutation\" mutation-symbol \"threw an exception.\"))))\n                               (ilet [tx (eql/ast->expr original-ast-node true)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                               :state-id-before state-id-before\n                                                                               :db-before       state-before\n                                                                               :db-after        @state\n                                                                               :tx              tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?           (and action (not (complete? :action)))\n                               state-id-before (inspect/current-history-id app)\n                               state           (:com.fulcrologic.fulcro.application/state-atom app)\n                               state-before    @state\n                               updated-node    (if exec? (-> element\n                                                           (assoc ::state-before-action state-before)\n                                                           (update ::complete? conj :action)) element)\n                               new-acc         (conj new-elements updated-node)\n                               env             (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"The `action` section threw an exception for mutation: \" (:dispatch-key original-ast-node))))\n                             (ilet [tx (eql/ast->expr original-ast-node true)]\n                               (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                             :state-id-before state-id-before\n                                                                             :db-before       state-before\n                                                                             :db-after        @state\n                                                                             :tx              tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        old-queue (get send-queues remote)\n        queue     (filterv (fn [{:keys [::id ::idx]}]\n                             (not (and (= txn-id id) (= ele-idx idx)))) old-queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue!\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(defn compute-desired-ast-node\n  \"Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\"\n  [app remote tx-node tx-element]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::tx-node ::tx-element => ::tx-element]\n  (let [{::keys [dispatch original-ast-node state-before-action]} tx-element\n        env             (build-env app tx-node {:ast                 original-ast-node\n                                                :state-before-action state-before-action})\n        remote-fn       (get dispatch remote)\n        remote-desire   (when remote-fn (remote-fn env))\n        desired-ast     (cond\n                          (or (false? remote-desire) (nil? remote-desire)) nil\n                          (true? remote-desire) original-ast-node\n                          (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                          (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                          :else (do\n                                  (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire)\n                                  remote-desire))\n        ;; The EQL transform from fulcro app config ONLY affects the network layer (the AST we put on the send node).\n        ;; The response gets dispatched on network return, but the original query\n        ;; is needed at the top app layer so that :pre-merge can use the complete query\n        ;; as opposed to the pruned one.\n        query-transform (ah/app-algorithm app :global-eql-transform)\n        ast             (if (and desired-ast query-transform)\n                          (query-transform desired-ast)\n                          desired-ast)]\n    (cond-> tx-element\n      desired-ast (assoc-in [::desired-ast-nodes remote] desired-ast)\n      ast (assoc-in [::transmitted-ast-nodes remote] ast))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name\n   => (s/nilable ::send-node)]\n  (let [update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        ast            (get-in tx-node [::elements ele-idx ::transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (handler {:status-code 200 :body {}})\n        nil))))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::elements idx] (fn [tx-element] (compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::elements idx ::started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch        dispatch\n                                        :transacted-ast  original-ast-node\n                                        :mutation-ast    (get desired-ast-nodes remote)\n                                        :transmitted-ast (get transmitted-ast-nodes remote)\n                                        :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception.\"))))))\n  (update tx-element ::complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {::keys [idx progress dispatch original-ast-node] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception in mutation\" (:dispatch-key original-ast-node)))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (schedule-render! app)\n    nil))\n\n(defn transact-sync!\n  \"Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   \"\n  [app tx {:keys [component] :as options}]\n  (let [mutation-nodes      (:children (eql/query->ast tx))\n        ast-node->operation (zipmap mutation-nodes (map (fn [ast-node] (m/mutate {:ast ast-node})) mutation-nodes))\n        {optimistic true\n         mixed      false} (group-by #(= #{:action :result-action} (-> (ast-node->operation %) keys set)) mutation-nodes)\n        optimistic-tx-node  (when (seq optimistic)\n                              (let [node (tx-node (eql/ast->query {:type :root :children optimistic}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        mixed-tx-node       (when (seq mixed)\n                              (let [node (tx-node (eql/ast->query {:type :root :children mixed}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        resulting-node-id   (atom nil)]\n    (when optimistic-tx-node (run-actions! app optimistic-tx-node))\n    (when mixed-tx-node\n      (let [node         (run-actions! app mixed-tx-node)\n            runtime-atom (:com.fulcrologic.fulcro.application/runtime-atom app)]\n        (reset! resulting-node-id (::id node))\n        (swap! runtime-atom update ::active-queue conj node)\n        (schedule-queue-processing! app 20)))\n    (if (and component (comp/component? component) (comp/has-ident? component))\n      (comp/refresh-component! component)\n      (when #?(:cljs js/goog.DEBUG :clj true)\n        (log/warn \"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen.\")))\n    @resulting-node-id))\n\n(defn default-tx!\n  \"Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app tx]\n   [:com.fulcrologic.fulcro.application/app ::tx => ::id]\n   (default-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx {:keys [synchronous?] :as options}]\n   [:com.fulcrologic.fulcro.application/app ::tx ::options => ::id]\n   (if synchronous?\n     (transact-sync! app tx options)\n     (do\n       (schedule-activation! app)\n       (let [{:keys [refresh only-refresh ref] :as options} (merge {:optimistic? true} options)\n             follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n             node            (tx-node tx options)\n             accumulate      (fn [r items] (into (set r) items))\n             refresh         (cond-> (set refresh)\n                               (seq follow-on-reads) (into follow-on-reads)\n                               ref (conj ref))]\n         (swap! runtime-atom (fn [s] (cond-> (update s ::submission-queue (fn [v n] (conj (vec v) n)) node)\n                                       ;; refresh sets are cumulative because rendering is debounced\n                                       (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                       (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n         (::id node))))))\n\n(defn- abort-elements!\n  \"Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes.\"\n  [{:keys [abort!] :as remote} send-queue abort-id]\n  (if abort!\n    (reduce\n      (fn [result {::keys [active? options result-handler] :as send-node}]\n        (let [aid (or (-> options ::abort-id) (-> options :abort-id))]\n          (cond\n            (not= aid abort-id) (do\n                                  (conj result send-node))\n            active? (do\n                      (abort! remote abort-id)\n                      result)\n            :otherwise (do\n                         (result-handler {:status-text \"Cancelled\" ::aborted? true})\n                         result))))\n      []\n      send-queue)\n    (do\n      (log/error \"Cannot abort network requests. The remote has no abort support!\")\n      send-queue)))\n\n(defn abort!\n  \"Implementation of abort when using this tx processing\"\n  [app abort-id]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} (comp/any->app app)\n        runtime-state   @runtime-atom\n        {:com.fulcrologic.fulcro.application/keys [remotes]\n         ::keys                                   [send-queues]} runtime-state\n        remote-names    (keys send-queues)\n        new-send-queues (reduce\n                          (fn [result remote-name]\n                            (assoc result remote-name (abort-elements!\n                                                        (get remotes remote-name)\n                                                        (get send-queues remote-name) abort-id)))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)))\n\n(defn abort-remote!\n  \"Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \\\"received\\\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\"\n  [app-ish remote]\n  (let [app            (comp/any->app app-ish)\n        {:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} (comp/any->app app)\n        {abort-network! :abort!\n         :as            the-remote} (get @runtime-atom [:com.fulcrologic.fulcro.application/remotes remote])\n        old-send-queue (get-in @runtime-atom [::send-queues remote])]\n    (swap! runtime-atom assoc-in [::send-queues remote] [])\n    (swap! state-atom update :com.fulcrologic.fulcro.application/active-remotes (fnil disj #{}) remote)\n    (doseq [{::keys [active? options result-handler] :as send-node} old-send-queue\n            aid (or (-> options ::abort-id) (-> options :abort-id))]\n      (try\n        (when active?\n          (if abort-network!\n            (abort-network! the-remote aid)\n            (log/warn \"Remote does not support abort. Clearing the queue, but a spurious result may still appear.\")))\n        (result-handler {:status-code 500\n                         :body        {}\n                         :status-text \"Globally Aborted\"\n                         ::aborted?   true})\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Failed to abort send node\"))))))","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","com.fulcrologic.guardrails.core/=>","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","cljs.spec.alpha.every_impl","G__64015","cljs.core/vector?","cljs.spec.alpha/cat-impl","map__64017","cljs.core/--destructure-map","cljs.core.get","parallel?","p__64018","map__64019","options","cljs.core/boolean","or__4212__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core/fn?","cljs.core/boolean?","cljs.core._EQ_","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__64020#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__64022#","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__64025","cljs.core.nth","map__64028","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv","n","cljs.core/first","cljs.core.partition_by","clusters","reads","writes","cljs.core.reduce","result","id","vec__64031","seq__64032","cljs.core/seq","first__64033","cljs.core/next","map__64034","ast","_","cluster","cljs.core.update","cljs.core/into","cljs.core.into","cljs.core.concat","p__64035","map__64036","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","G__64038","cljs.core/coll?","cljs.core.map","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","cljs.spec.alpha/map-spec-impl","G__64041","cljs.core/map?","cljs.core/contains?","vec__64063","vec__64066","active-nodes","id-to-send","to-send","to-defer","p1__64039#","tx","p__64073","map__64074","acc","com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid","combined-node-idx","combined-node","p__64075","map__64076","body","combined-result","seq__64077","chunk__64079","count__64080","i__64081","map__64094","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__64096","update-handler","p__64098","map__64099","seq__64100","chunk__64101","count__64102","i__64103","map__64119","map__64125","result-handler","new-body","cljs.core/select-keys","cljs.core.assoc","and__4210__auto__","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__64122","e","e64121","map__64127","e64126","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","cljs.core/any?","b2__49185__auto__","remote","transmit!","e64130","e64136","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e64131","e64133","G__64135","fexpr__64134","G__64138","fexpr__64137","G__64140","fexpr__64139","p__64141","map__64142","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","operations","cljs.core.atom","new-send-queues","vec__64143","p","serial","front","seq__64146","chunk__64147","count__64148","i__64149","item","cljs.core.swap_BANG_","cljs.core/conj","map__64151","cljs.core/assoc","seq__64153","chunk__64154","count__64155","i__64156","op","var_args","G__64169","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","ast-nodes","elements","cljs.core.comp","cljs.core.filter","cljs.core.map_indexed","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__64179","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__64183","map__64184","p__64189","map__64190","tx-node","addl","map__64186","ref","component","G__64188","cljs.core.merge","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e64191","G__64192","dispatch","p__64193","map__64194","original-ast-node","ele","map__64195","G__64196","dispatch-all","eles","p__64200","map__64201","com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","p1__64198#","cljs.core/some","cljs.core/update","queue","node","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","p__64205","map__64206","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","map__64207","blocked","ready","dispatched-nodes","p1__64203#","com.fulcrologic.fulcro.mutations/mutate","a","p1__64204#","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__64211","tm","cljs.core/int?","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_","G__64214","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_","G__64218","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_","p__64220","map__64222","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","remotes","reduction","p__64223","map__64224","done?","new-elements","element","map__64225","map__64226","complete?","action","remote-set","clojure.set.intersection","exec?","cljs.core/not","fully-complete?","cljs.core/empty?","clojure.set.difference","state-id-before","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","state","state-before","updated-element","new-acc","cljs.core.conj","e64229","mutation-symbol","e64231","edn_query_language.core.ast__GT_expr","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__64233","map__64234","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__64236","map__64237","updated-node","e64238","e64240","p__64242","map__64243","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__64245","map__64246","active-keys","clojure.set.union","desired-set","p__64248","map__64249","txn-id","ele-idx","map__64250","old-queue","cljs.core/filterv","p__64251","map__64253","cljs.core/assoc-in","G__64256","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__64258","map__64259","result-key","cljs.core/keyword?","txn-idx","p__64260","map__64261","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","tx-element","map__64264","state-before-action","remote-fn","remote-desire","desired-ast","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","G__64267","p__64269","p__64270","map__64271","map__64272","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","cljs.spec.alpha/nilable-impl","cljs.core.get_in","handler","cljs.core/update-in","cljs.core.fnil","p__64275","map__64276","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.update_in","p__64279","map__64280","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__64281","map__64282","in-progress","p__64284","map__64285","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__64287","map__64288","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial","p__64290","map__64291","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__64293","map__64294","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","results","desired-ast-nodes","transmitted-ast-nodes","e64296","p__64298","map__64299","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__64301","map__64302","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__64304","map__64306","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__64307","map__64308","seq__64310","chunk__64311","count__64312","i__64313","vec__64324","vec__64329","value","e64327","e64333","p__64335","map__64336","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__64337","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","G__64339","cljs.core/set?","outer-acc","map__64341","refresh","p__64343","map__64344","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__64345","map__64346","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__64349","map__64350","state-atom","new-queue","temp__5751__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","p__64354","map__64355","com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","map__64357","mutation-nodes","ast-node->operation","cljs.core/zipmap","optimistic","mixed","p1__64353#","optimistic-tx-node","edn-query-language.core/ast->query","mixed-tx-node","resulting-node-id","cljs.core/reset!","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/has-ident?","com.fulcrologic.fulcro.components/refresh-component!","G__64363","com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","p__64365","p__64366","map__64367","map__64368","com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_","synchronous?","map__64369","only-refresh","follow-on-reads","p1__64360#","cljs.core/Keyword","edn-query-language.core/ident?","G__64371","s","G__64373","v","p__64375","map__64376","com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","abort!","abort-id","p__64378","map__64379","active?","aid","G__64380","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","map__64382","map__64383","com.fulcrologic.fulcro.components/any->app","runtime-state","com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","app-ish","map__64386","map__64387","abort-network!","the-remote","old-send-queue","cljs.core/disj","seq__64389","chunk__64394","count__64395","i__64396","map__64430","seq__64397","chunk__64398","count__64399","i__64400","map__64445","seq__64390","chunk__64391","count__64392","i__64393","e64439","e64442","e64453","e64457","G__64440","G__64444","G__64455","G__64458"]],"~:used-vars",["^L",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$cljs.core/--destructure-map","~$cljs.core/comp","~$clojure.set/intersection","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","~$cljs.core/boolean?","~$cljs.core/keyword?","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$edn-query-language.core/query->ast","~$cljs.spec.alpha/every-impl","~$com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","~$cljs.core/vector?","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","~$cljs.core/partial","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.mutations/mutate","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","~$edn-query-language.core/ident?","~$com.fulcrologic.guardrails.core/=>","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/int?","~$cljs.core/group-by","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","~$cljs.core/mapv","~$cljs.spec.alpha/nilable-impl","~$cljs.core/not=","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","~$cljs.core/concat","~$com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","~$cljs.core/empty?","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.spec.alpha/map-spec-impl","~$cljs.core/reset!","~$com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tempid/uuid","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$cljs.core/zipmap","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","~$cljs.core/map","~$cljs.core/fn?","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$cljs.core/filterv","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","~$edn-query-language.core/ast->expr","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","~$com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","~$com.fulcrologic.fulcro.algorithms.do-not-use/now","~$com.fulcrologic.fulcro.components/component?","~$cljs.core/partition-by","~$cljs.core/-nth","~$cljs.spec.alpha/cat-impl","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","~$clojure.set/difference","~$com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/reduced","~$cljs.core/set?","~$com.fulcrologic.fulcro.components/any->app","~$com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","~$cljs.core/nth","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","~$js/goog.DEBUG","~$cljs.core/split-with","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$cljs.core/select-keys","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/disj","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","~$clojure.set/union","~$cljs.core/assoc-in","~$cljs.core/map-indexed","~$com.fulcrologic.fulcro.algorithms.scheduling/schedule!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-started!","~$cljs.core/coll?","~$com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$cljs.core/first","~$edn-query-language.core/ast->query","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/merge","~$cljs.core/every?","~$cljs.core/update-in","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","~$js/Error","~$cljs.core/any?","~$cljs.core/boolean","~$cljs.core/some","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1P","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^14","^13","^1>","^X","^Z","^10"]]],["^1P","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.dom.HtmlElement"]]],["^1P","goog/async/freelist.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core/async/impl/ioc_helpers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cljs.core.async.impl.protocols"]]],["^1P","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.labs.userAgent.util","~$goog.string"]]],["^1P","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/crypt/crypt.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.array","~$goog.asserts"]]],["^1P","cljs/core/async.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","^5B"]]],["^1P","goog/timer/timer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1P","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z"]]],["^1P","cljs/spec/gen/alpha.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$goog.Uri"]]],["^1P","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$clojure.string","^5A"]]],["^1P","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C"]]],["^1P","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/string/stringformat.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5A"]]],["^1P","goog/events/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1P","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5@","~$goog.object","~$goog.string.internal"]]],["^1P","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5Q"]]],["^1P","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C"]]],["^1P","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z","^5M","^X","^5P","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1P","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$expound.paths","^@"]]],["^1P","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5@","~$goog.reflect","^5A"]]],["^1P","goog/structs/prioritypool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1P","goog/async/run.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1P","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1P","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^W","~$cljs.reader","~$cljs.tools.reader.edn","^5P","^5A","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1P","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/async/workqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","~$goog.async.FreeList"]]],["^1P","com/fulcrologic/fulcro/dom/events.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/events/events.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^5N","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","~$goog.events.EventId","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1P","goog/promise/resolver.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5I"]]],["^1P","goog/events/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5O"]]],["^1P","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5A","^6="]]],["^1P","goog/structs/priorityqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs.Heap"]]],["^1P","goog/net/xhrio.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Timer","^5B","^5C","^6F","^5J","~$goog.json.hybrid","~$goog.log","^6C","^6B","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^5P","^5A","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^5O","^5L","^6J","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1P","goog/promise/thenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5I"]]],["^1P","com/fulcrologic/fulcro/algorithms/transit.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cognitect.transit","^J","^@","^17"]]],["^1P","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5P"]]],["^1P","cljs/pprint.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^5A","^6="]]],["^1P","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@","^W","^J","^Z","^X"]]],["^1P","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6Q","^6R","^6S","^6P","^5B","^5A","^6="]]],["^1P","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$expound.problems","^@","^5M","^W","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1P","goog/net/wrapperxmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^72","^73"]]],["^1P","goog/events/eventtarget.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Disposable","^5C","^6>","~$goog.events.Event","^6H","^6I","^5P","^6K","^6L","^6N"]]],["^1P","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^Z","^@","~$expound.alpha"]]],["^1P","goog/disposable/disposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.disposable.IDisposable"]]],["^1P","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M"]]],["^1P","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1P","shadow/js.js"],["0273d29a26c6414d6326ed34664dcb7e98415b06","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C"]]],["^1P","goog/structs/set.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6[","~$goog.structs.Collection","^70","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1635907472000,1635907472000,1635907547000],["^7=","node_modules/react/cjs/react.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","754b7a48941975257c8955f6d5e511cb3a878737","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^7>","~$module$node_modules$object_assign$index"]]],["^1P","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","^62"]]],["^1P","goog/events/listener.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6N","^6H"]]],["^1P","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","~$goog.fs.blob","^5R","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5T","^5U","^5V","^5W"]]],["^1P","goog/debug/tracer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C","~$goog.debug","~$goog.debug.Logger","~$goog.iter","^6X","^70","~$goog.structs.SimplePool"]]],["^1P","cljs/core/async/impl/channels.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","^5G","^5E"]]],["^1P","goog/events/listenermap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^6O","^5P","^6K","^6H","^6N"]]],["^1P","goog/events/eventid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$taoensso.truss.impl"]]],["^1P","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/eventwrapper.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1P","com/fulcrologic/fulcro/algorithms/merge.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.fulcro.algorithms.data-targeting","^10","^U","~$com.fulcrologic.fulcro.algorithms.normalize","^12","^1>","^X","^Z","^17"]]],["^1P","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@"]]],["^1P","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core/async/impl/dispatch.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5E","^66"]]],["^1P","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C","~$goog.html.SafeUrl","^5V","^5W","^5Q"]]],["^1P","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^7F","~$goog.html.SafeStyle","^7Q","^5S","~$goog.html.uncheckedconversions","^5V","^5Q"]]],["^1P","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@","^77"]]],["^1P","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W"]]],["^1P","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/useragent/product.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5[","^61","^5O"]]],["^1P","cljs/core/async/impl/protocols.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/net/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^7B","~$goog.iter.StopIteration"]]],["^1P","goog/net/xhriopool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6?","~$goog.structs.PriorityPool","^70"]]],["^1P","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C","~$goog.dom.TagName","~$goog.dom.tags","^7F","^7U","~$goog.html.SafeStyleSheet","^7Q","^5S","^7G","^5T","^5U","^5[","^5P","^5V","^5W","^5Q"]]],["^1P","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5P"]]],["^1P","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/structs/queue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B"]]],["^1P","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5@","^5A"]]],["^1P","com/fulcrologic/fulcro/inspect/transit.cljs"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^74","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit","^Z"]]],["^1P","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^69","^80"]]],["^1P","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B"]]],["^1P","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^1<"]]],["^1P","cljs/reader.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5P","^6T","^6;","^6="]]],["^1P","com/fulcrologic/fulcro/mutations.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^10","~$com.fulcrologic.fulcro.dom.events","^J","^X","^Z","^1<","^@","^1>","^7O","~$com.fulcrologic.fulcro.algorithms.merge","^U","^17","^5M"]]],["^1P","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7Y","~$goog.dom.safe","^7T","^7V","~$goog.math.Coordinate","~$goog.math.Size","^5P","^5A","^5V","~$goog.string.Unicode","^5O"]]],["^1P","com/fulcrologic/fulcro/components.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5P","~$cljsjs.react","^X","^@","^Z","^1<","~$clojure.walk","^5M","^1>","^12","^U","^J","^W"]]],["^1P","com/fulcrologic/fulcro/specs.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@","^J","^1>","^X"]]],["^1P","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.debug.Error","^87"]]],["^1P","cljs/core/async/impl/buffers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?"]]],["^1P","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C","^5A","^6[","^70","^71","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1P","goog/net/errorcode.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^7=","node_modules/object-assign/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","519ffd5a4c91b67302cc9947b794966d629860cd","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^7>"]]],["^1P","goog/debug/errorhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^79","^5C","^7H","~$goog.debug.EntryPointMonitor","^8>","~$goog.debug.Trace"]]],["^1P","goog/disposable/idisposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/promise/promise.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5K","^5C","^6E","~$goog.async.run","^67","^8>","~$goog.promise.Resolver"]]],["^1P","cljs/core/async/impl/timers.cljs"],["68f362bbfe82f1288335b07d726f5cd014e3e9dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","^5D","^5G"]]],["^1P","cljs/spec/alpha.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5P","^8=","~$cljs.spec.gen.alpha","^5M"]]],["^1P","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",[]]],["^1P","goog/json/hybrid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","~$goog.json"]]],["^1P","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5P"]]],["^1P","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6Q","^5M","~$cljs.tools.reader.impl.inspect"]]],["^1P","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^J","^D","^Z"]]],["^1P","cljsjs/react.cljs"],["4323f8e603a952cae34c4c6db04141e97928434f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$module$node_modules$react$index"]]],["^1P","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5A","^6="]]],["^1P","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z","^8="]]],["^1P","goog/structs/pool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^79","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1P","com/fulcrologic/fulcro/inspect/diff.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@"]]],["^7=","node_modules/react/cjs/react.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","0a81b45abe33f0ad39b726512604018f94261db9","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^7>","^7D"]]],["^1P","goog/net/httpstatus.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^82","^80","~$goog.math.Long"]]],["^1P","goog/structs/heap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5P","~$goog.structs.Node"]]],["^1P","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C"]]],["^1P","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^88","^7V","^5V","^5Q"]]],["^1P","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^82","~$com.cognitect.transit.eq","^8K"]]],["^1P","clojure/data.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W"]]],["^1P","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5Q"]]],["^1P","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^@","^B","^W","^77","^78","^5Z","^8=","^6<","^5A"]]],["^1P","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]]],["^1P","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^82"]]],["^1P","goog/debug/debug.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.debug.errorcontext","^5O"]]],["^1P","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.math"]]],["^1P","goog/debug/errorcontext.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6R","^5A","^6="]]],["^1P","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5C","^7S","^8O"]]],["^1P","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6F","~$goog.dom","^7Y","^7S","^5[","^60"]]],["^1P","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","^7T","^7F","^7U","^7[","^7Q","^5S","^5V","^5Q","^5T"]]],["^1P","goog/debug/logger.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^7H","^6X","~$goog.log.Level","~$goog.log.LogRecord","~$goog.log.Logger"]]],["^1P","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^83"]]],["^1P","goog/events/event.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^79","^6K"]]],["^1P","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6P","^6Q","^6R"]]],["^1P","goog/events/eventhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^79","^6>","^5P","^7:","^6K","^5J","^6M"]]],["^1P","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8K","~$goog.math.Integer","^5A","^5P","^5B","^5L","^6="]]],["^1P","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^82","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^80","^8M","^68","^69"]]],["^1P","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5V","^5W","^7G","^5C"]]],["^1P","goog/log/log.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","^7H"]]],["^1P","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5V","^7U","^5W","^5B","^5P","^5C","^5Q"]]],["^1P","goog/structs/collection.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/browserevent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^7H","^5N","^7:","~$goog.events.EventType","^62","^5O"]]],["^1P","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^62"]]],["^1P","goog/structs/node.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/structs/simplepool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^79"]]],["^1P","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5O"]]],["^1P","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","^5A"]]],["^1P","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","^5W"]]],["^1P","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^1<","~$taoensso.timbre.appenders.core"]]],["^1P","goog/json/json.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/listenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6K","^6L"]]],["^1P","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^82","^69","~$com.cognitect.transit.handlers","^80","^83","^8K"]]],["^1P","goog/net/xmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^72"]]],["^1P","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z","^W","^X"]]],["^1P","goog/net/xmlhttp.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","~$goog.net.WrapperXmlHttpFactory","^73","^72"]]],["^1P","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^X","^U","^5P","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^D","~$clojure.data","^1<","^Z"]]],["^1P","goog/net/xhrlike.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.cognitect.transit","^80","^8M","^8K"]]],["^1P","goog/crypt/base64.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5C","^5X","^5A","^5O","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/pprint.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1617990988000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/concurrent.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1617990988000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/mutations.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/protocols.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/spec/alpha.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/data.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/dispatch.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/reader.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/clojure/core/async/impl/exec/threadpool.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/cljs/core/async/impl/ioc_macros.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/org/clojure/core.async/1.3.618/core.async-1.3.618.jar!/cljs/core/async.clj",1621683011000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/components.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/spec/gen/alpha.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/dom/events.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1635907473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G","^H","^G","^I","^J"],"^K",["^L",[]],"^M","^N","^O",["^ "],"^R",null,"^S",["^ ","^T","^U","^V","^W","^X","^X","^?","^@","^J","^J","^Y","^Z","^[","^10","^11","^X","^12","^12","^13","^13","^G","^G","^14","^14","^15","^15","^16","^G","^W","^W","^17","^17","~$m","^18","^19","^19","^1:","^19","^1;","^1<","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","^1=","^1>","^1<","^1<","^@","^@","^1?","^12","^1@","^17","^1>","^1>"],"^1A",["^L",["^1B"]],"~:shadow/js-access-global",["^L",["Error"]],"^1C",["^ ","^1D","^19","^F","^G","^H","^G","^I","^J","^1E","^J","~$|","^J"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",142,"^9",7,"^:",142,"^;",16,"~:arglists",["^1H",["~$quote",["^1H",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^M","^27","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"~:method-params",["^1H",[["^;0","^;1","^;2"]]],"~:protocol-impl",null,"~:arglists-meta",["^1H",[null,null]],"^9",1,"~:variadic?",false,"^8",142,"~:ret-tag",["^L",[null,"~$any"]],"^:",142,"~:max-fixed-arity",3,"~:fn-var",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;1","^;2"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",577,"^9",7,"^:",577,"^;",34,"^:Z",["^1H",["^:[",["^1H",[["^;0","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1J","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^M","^2D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^;3",["^1H",[["^;0","^;<","~$p__64298"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",577,"^;7",["^L",[null,"^;8"]],"^:",577,"^;9",3,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;<",["^ ","^;=",["^;>","^;?"],"^1J","^;@"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",599,"^9",7,"^:",599,"^;",23,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1J","^;<"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^M","^2=","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;3",["^1H",[["^;0","~$p__64304"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",599,"^;7",["^L",[null,"^;8"]],"^:",599,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;C"],"^1J","^;<"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",652,"^9",7,"^:",652,"^;",29,"^:Z",["^1H",["^:[",["^1H",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1J","^;<"],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^M","^2>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^;3",["^1H",[["~$p__64343","^;H"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",652,"^;7",["^L",[null,"^;8"]],"^:",652,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;F",["^;G"],"^1J","^;<"],"^;H"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",32,"^9",7,"^:",32,"^;",24,"^:Z",["^1H",["^:[",["^1H",[["^;0"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^M","^2C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;3",["^1H",[["^;0"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",32,"^;7",["^L",["~$clj","^;8","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",32,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",525,"^9",7,"^:",525,"^;",23,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;C"],"^1J","^;<"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^M","^2?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;3",["^1H",[["^;0","~$p__64287"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",525,"^;7",["^L",[null,"^;8"]],"^:",525,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;C"],"^1J","^;<"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$abort-remote!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",841,"^9",7,"^:",841,"^;",20,"^:Z",["^1H",["^:[",["^1H",[["~$app-ish","~$remote"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"^M","^2Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;3",["^1H",[["^;R","^;S"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",841,"^;7","^;N","^:",841,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;R","^;S"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"~$active-remotes",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",668,"^9",7,"^:",668,"^;",21,"^:Z",["^1H",["^:[",["^1H",[["~$queue","^;H"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^M","^4U","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;3",["^1H",[["^;U","^;H"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",668,"^;7",["^L",[null,"^;8"]],"^:",668,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;U","^;H"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",540,"^9",7,"^:",540,"^;",19,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^;C"],"^1J","^;<"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^M","^2L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;3",["^1H",[["^;0","~$p__64290"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",540,"^;7",["^L",[null,"^;8"]],"^:",540,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;W","^;C"],"^1J","^;<"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",679,"^9",7,"^:",679,"^;",21,"^:Z",["^1H",["^:[",["^1H",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1J","^;0"]]]]]],"^6","Run through the active queue and do a processing step."],"^M","^4L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;3",["^1H",[["~$p__64349"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",679,"^;7","^;N","^:",679,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^;[","^<0"],"^1J","^;0"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",238,"^9",7,"^:",238,"^;",24,"^:Z",["^1H",["^:[",["^1H",[["^;<","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^M","^28","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;3",["^1H",[["^;<","^<3","^<4"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",238,"^;7",["^L",["^;K","^;8"]],"^:",238,"^;9",3,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;<","^<3","^<4"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$abort-elements!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",797,"^9",8,"^:",797,"^;",23,"~:private",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["~$abort!"],"^1J","^;S"],"~$send-queue","~$abort-id"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"^<6",true,"^M","^33","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;3",["^1H",[["~$p__64375","^<8","^<9"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",797,"^;7",["^L",[null,"^;8"]],"^:",797,"^;9",3,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["^<7"],"^1J","^;S"],"^<8","^<9"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"~$remove-send!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",395,"^9",7,"^:",395,"^;",19,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^;S","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^M","^2P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;3",["^1H",[["~$p__64248","^;S","^<<","^<="]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",395,"^;7",["^L",[null,"^;8"]],"^:",395,"^;9",4,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^;S","^<<","^<="]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",485,"^9",7,"^:",485,"^;",27,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;<",["^ ","^;=",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^M","^4C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^;3",["^1H",[["^;0","^;<","~$p__64275"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",485,"^;7",["^L",[null,"^;8"]],"^:",485,"^;9",3,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;<",["^ ","^;=",["^<@","^<A","^<B"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",90,"^9",7,"^:",90,"^;",15,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["~$type","~$key","~$children"],"^1J","~$ast"]]]]]]],"^M","^24","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^;3",["^1H",[["~$p__64035"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",90,"^;7",["^L",["^;K","^;8","^;L"]],"^:",90,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["^<E","^<F","^<G"],"^1J","^<H"]]]]]]],"~$schedule-activation!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",281,"^9",7,"^:",281,"^;",27,"^:Z",["^1H",["^:[",["^1H",[["^;0","~$tm"],["^;0"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:top-fn",["^ ","^;6",false,"~:fixed-arity",2,"^;9",2,"^;3",[["^;0","^<K"],["^;0"]],"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^;5",["^1H",[null,null]]]],"^M","^37","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^<L",["^ ","^;6",false,"^<M",2,"^;9",2,"^;3",[["^;0","^<K"],["^;0"]],"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^;5",["^1H",[null,null]]],"^;3",[["^;0","^<K"],["^;0"]],"^;4",null,"^<M",2,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"~:methods",[["^ ","^<M",2,"^;6",false,"~:tag",["^L",["~$js","^;N"]]],["^ ","^<M",1,"^;6",false,"^<O",["^L",["^<P","^;N"]]]],"^8",281,"^:",281,"^;9",2,"^;:",true,"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms."],"~$record-result!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",405,"^9",7,"^:",405,"^;",21,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^<<","^<=","^;S","~$result","~$result-key"],["^;0","^<<","^<=","^;S","^<R"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^<L",["^ ","^;6",false,"^<M",6,"^;9",6,"^;3",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^<<","^<=","^;S","^<R","^<S"],["^;0","^<<","^<=","^;S","^<R"]],"^:Z",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^<<","^<=","^;S","^<R","^<S"],["^;0","^<<","^<=","^;S","^<R"]]],"^;5",["^1H",[null,null]]]],"^M","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^<L",["^ ","^;6",false,"^<M",6,"^;9",6,"^;3",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^<<","^<=","^;S","^<R","^<S"],["^;0","^<<","^<=","^;S","^<R"]],"^:Z",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^<<","^<=","^;S","^<R","^<S"],["^;0","^<<","^<=","^;S","^<R"]]],"^;5",["^1H",[null,null]]],"^;3",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^<<","^<=","^;S","^<R","^<S"],["^;0","^<<","^<=","^;S","^<R"]],"^;4",null,"^<M",6,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^<N",[["^ ","^<M",6,"^;6",false,"^<O",["^L",[null,"^;8","^;N"]]],["^ ","^<M",5,"^;6",false,"^<O",["^L",[null,"^;8","^;N"]]]],"^8",405,"^:",405,"^;9",6,"^;:",true,"^:Z",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],"^<<","^<=","^;S","^<R","^<S"],["^;0","^<<","^<=","^;S","^<R"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing."],"~$process-tx-node!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",619,"^9",7,"^:",619,"^;",23,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]]]]]],"^M","^2I","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;3",["^1H",[["^;0","~$p__64335"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",619,"^;7",["^L",["^;K","^;8","^;N"]],"^:",619,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]]]]]],"~$add-send!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",456,"^9",7,"^:",456,"^;",16,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],["^ ","^;F",["~$id","~$options"],"^1J","^;<"],"^<=","^;S"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^M","^2E","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^;3",["^1H",[["~$p__64269","~$p__64270","^<=","^;S"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",456,"^;7",["^L",["~$cljs.core/IMap","^;N"]],"^:",456,"^;9",4,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"],["^ ","^;F",["^<W","^<X"],"^1J","^;<"],"^<=","^;S"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",49,"^9",7,"^:",49,"^;",17,"^:Z",["^1H",["^:[",["^1H",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^M","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;3",["^1H",[["^=1","^=2"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",49,"^;7",["^L",["~$boolean","^;8"]],"^:",49,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^=1","^=2"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",63,"^9",7,"^:",63,"^;",17,"^:Z",["^1H",["^:[",["^1H",[["^=1"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^M","^3O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;3",["^1H",[["^=1"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",63,"^;7",["^L",["^=3","^;8"]],"^:",63,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^=1"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",589,"^9",7,"^:",589,"^;",26,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;C"],"^1J","^;<"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^M","^3K","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^;3",["^1H",[["^;0","~$p__64301"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",589,"^;7",["^L",["^;K","^;8"]],"^:",589,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;C"],"^1J","^;<"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",385,"^9",7,"^:",385,"^;",22,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;C"],"^1J","^;<"]]]]]]],"^M","^3G","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^;3",["^1H",[["^;0","~$p__64242"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",385,"^;7","^=3","^:",385,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;=",["^;C"],"^1J","^;<"]]]]]]],"~$schedule-queue-processing!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",291,"^9",7,"^:",291,"^;",33,"^:Z",["^1H",["^:[",["^1H",[["^;0","^<K"],["^;0"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^<L",["^ ","^;6",false,"^<M",2,"^;9",2,"^;3",[["^;0","^<K"],["^;0"]],"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^;5",["^1H",[null,null]]]],"^M","^3V","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",33,"^<L",["^ ","^;6",false,"^<M",2,"^;9",2,"^;3",[["^;0","^<K"],["^;0"]],"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^;5",["^1H",[null,null]]],"^;3",[["^;0","^<K"],["^;0"]],"^;4",null,"^<M",2,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^<N",[["^ ","^<M",2,"^;6",false,"^<O",["^L",["^<P","^;N"]]],["^ ","^<M",1,"^;6",false,"^<O",["^L",["^<P","^;N"]]]],"^8",291,"^:",291,"^;9",2,"^;:",true,"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms."],"~$app->remotes",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",26,"^9",7,"^:",26,"^;",19,"^:Z",["^1H",["^:[",["^1H",[["^;0"]]]]],"^6","Returns the remotes map from an app"],"^M","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;3",["^1H",[["^;0"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",26,"^;7","^;8","^:",26,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",353,"^9",7,"^:",353,"^;",19,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;F",["^<W","^;G"],"^1J","~$node"]]]]]]],"^M","^3P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;3",["^1H",[["^;0","~$p__64233"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",353,"^;7",["^L",["^;K","^;8"]],"^:",353,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;F",["^<W","^;G"],"^1J","^=<"]]]]]]],"~$process-send-queues!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",7,"^:",167,"^;",27,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^M","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^;3",["^1H",[["~$p__64141"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",167,"^;7",["^L",[null,"^;8"]],"^:",167,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;Z",["^<0"],"^1J","^;0"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",513,"^9",7,"^:",513,"^;",24,"^:Z",["^1H",["^:[",["^1H",[["~$remote-names",["^ ","^;=",["^<A","^<B"],"^1J","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^M","^3X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;3",["^1H",[["^=A","~$p__64284"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",513,"^;7",["^L",[null,"^;8","^;N"]],"^:",513,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^=A",["^ ","^;=",["^<A","^<B"],"^1J","^=B"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",38,"^9",7,"^:",38,"^;",23,"^:Z",["^1H",["^:[",["^1H",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^M","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;3",["^1H",[["^=E"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",38,"^;7","~$cljs.core/IVector","^:",38,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^=E"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$application-rendered!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",257,"^9",7,"^:",257,"^;",28,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1J","^;0"],"^<X"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^M","^2Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^;3",["^1H",[["~$p__64200","^<X"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",257,"^;7",["^L",["^;8","^;N"]],"^:",257,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["^=H"],"^1J","^;0"],"^<X"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$build-env",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",225,"^9",7,"^:",225,"^;",16,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;F",["^<X"],"^1J","^;<"],"~$addl"],["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]]]]],"^<L",["^ ","^;6",false,"^<M",3,"^;9",3,"^;3",[["^;0",["^ ","^;F",["^<X"],"^1J","^;<"],"^=K"],["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]],"^:Z",["^1H",[["^;0",["^ ","^;F",["^<X"],"^1J","^;<"],"^=K"],["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]]],"^;5",["^1H",[null,null]]]],"^M","^4D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^<L",["^ ","^;6",false,"^<M",3,"^;9",3,"^;3",[["^;0",["^ ","^;F",["^<X"],"^1J","^;<"],"^=K"],["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]],"^:Z",["^1H",[["^;0",["^ ","^;F",["^<X"],"^1J","^;<"],"^=K"],["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]]],"^;5",["^1H",[null,null]]],"^;3",[["^;0",["^ ","^;F",["^<X"],"^1J","^;<"],"^=K"],["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]],"^;4",null,"^<M",3,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^<N",[["^ ","^<M",3,"^;6",false,"^<O",["^L",["^;K","^;8","^;N"]]],["^ ","^<M",2,"^;6",false,"^<O",["^L",["^;K","^;8","^;N"]]]],"^8",225,"^:",225,"^;9",3,"^;:",true,"^:Z",["^1H",[["^;0",["^ ","^;F",["^<X"],"^1J","^;<"],"^=K"],["^;0",["^ ","^;=",["^;W"],"^1J","^;<"]]]]],"~$schedule-sends!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",301,"^9",7,"^:",301,"^;",22,"^:Z",["^1H",["^:[",["^1H",[["^;0","^<K"],["^;0"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^<L",["^ ","^;6",false,"^<M",2,"^;9",2,"^;3",[["^;0","^<K"],["^;0"]],"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^;5",["^1H",[null,null]]]],"^M","^2Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^<L",["^ ","^;6",false,"^<M",2,"^;9",2,"^;3",[["^;0","^<K"],["^;0"]],"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^;5",["^1H",[null,null]]],"^;3",[["^;0","^<K"],["^;0"]],"^;4",null,"^<M",2,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^<N",[["^ ","^<M",2,"^;6",false,"^<O",["^L",["^<P","^;N"]]],["^ ","^<M",1,"^;6",false,"^<O",["^L",["^<P","^;N"]]]],"^8",301,"^:",301,"^;9",2,"^;:",true,"^:Z",["^1H",[["^;0","^<K"],["^;0"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms."],"~$sort-queue-writes-before-reads",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",69,"^9",7,"^:",69,"^;",37,"^:Z",["^1H",["^:[",["^1H",[["^<8"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^M","^2X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",37,"^;3",["^1H",[["^<8"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",69,"^;7",["^L",[null,"^;K","^;8"]],"^:",69,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^<8"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^<7",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",824,"^9",7,"^:",824,"^;",13,"^:Z",["^1H",["^:[",["^1H",[["^;0","^<9"]]]]],"^6","Implementation of abort when using this tx processing"],"^M","^4T","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",13,"^;3",["^1H",[["^;0","^<9"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",824,"^;7",["^L",[null,"^;8"]],"^:",824,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^<9"]]]]],"^6","Implementation of abort when using this tx processing"],"~$compute-desired-ast-node",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",427,"^9",7,"^:",427,"^;",31,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;S","^;<","^;@"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"^M","^4Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",31,"^;3",["^1H",[["^;0","^;S","^;<","^;@"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",427,"^;7",["^L",[null,"^;K","^;8"]],"^:",427,"^;9",4,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;S","^;<","^;@"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"~$advance-actions!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",310,"^9",7,"^:",310,"^;",23,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;F",["^<W","^;G"],"^1J","^=<"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^M","^4>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;3",["^1H",[["^;0","~$p__64220"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",310,"^;7",["^L",["^;K","^;8"]],"^:",310,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0",["^ ","^;F",["^<W","^;G"],"^1J","^=<"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",57,"^9",7,"^:",57,"^;",20,"^:Z",["^1H",["^:[",["^1H",[["^=1"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^M","^4X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;3",["^1H",[["^=1"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",57,"^;7",["^L",["^=3","^;8"]],"^:",57,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^=1"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",266,"^9",7,"^:",266,"^;",28,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["^=H"],"^1J","^;0"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^M","^47","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^;3",["^1H",[["~$p__64205"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",266,"^;7","^;8","^:",266,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["^=H"],"^1J","^;0"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$combine-sends",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",97,"^9",7,"^:",97,"^;",20,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;2","^<8"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^M","^57","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;3",["^1H",[["^;0","^;2","^<8"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",97,"^;7","^<[","^:",97,"^;9",3,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;2","^<8"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$default-tx!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",746,"^9",7,"^:",746,"^;",18,"^:Z",["^1H",["^:[",["^1H",[["^;0","~$tx"],[["^ ","^;Z",["^<0"],"^1J","^;0"],"^=V",["^ ","^;=",["~$synchronous?"],"^1J","^<X"]]]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^<L",["^ ","^;6",false,"^<M",3,"^;9",3,"^;3",[["^;0","^=V"],[["^ ","^;Z",["^<0"],"^1J","^;0"],"^=V",["^ ","^;=",["^=W"],"^1J","^<X"]]],"^:Z",["^1H",[["^;0","^=V"],[["^ ","^;Z",["^<0"],"^1J","^;0"],"^=V",["^ ","^;=",["^=W"],"^1J","^<X"]]]],"^;5",["^1H",[null,null]]]],"^M","^4<","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^<L",["^ ","^;6",false,"^<M",3,"^;9",3,"^;3",[["^;0","^=V"],[["^ ","^;Z",["^<0"],"^1J","^;0"],"^=V",["^ ","^;=",["^=W"],"^1J","^<X"]]],"^:Z",["^1H",[["^;0","^=V"],[["^ ","^;Z",["^<0"],"^1J","^;0"],"^=V",["^ ","^;=",["^=W"],"^1J","^<X"]]]],"^;5",["^1H",[null,null]]],"^;3",[["^;0","^=V"],[["^ ","^;Z",["^<0"],"^1J","^;0"],"^=V",["^ ","^;=",["^=W"],"^1J","^<X"]]],"^;4",null,"^<M",3,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^<N",[["^ ","^<M",2,"^;6",false,"^<O","^;8"],["^ ","^<M",3,"^;6",false,"^<O","^;8"]],"^8",746,"^:",746,"^;9",3,"^;:",true,"^:Z",["^1H",[["^;0","^=V"],[["^ ","^;Z",["^<0"],"^1J","^;0"],"^=V",["^ ","^;=",["^=W"],"^1J","^<X"]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$transact-sync!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",702,"^9",7,"^:",702,"^;",21,"^:Z",["^1H",["^:[",["^1H",[["^;0","^=V",["^ ","^;=",["~$component"],"^1J","^<X"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"^M","^46","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;3",["^1H",[["^;0","^=V","~$p__64354"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",702,"^;7","^;8","^:",702,"^;9",3,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^=V",["^ ","^;=",["^=Y"],"^1J","^<X"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"~$idle-node?",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",503,"^9",7,"^:",503,"^;",17,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["^;C"],"^1J","^;<"]]]]]],"^6","Returns true if the given node has no active network operations."],"^M","^51","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;3",["^1H",[["~$p__64279"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",503,"^;7","^=3","^:",503,"^;9",1,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[[["^ ","^;=",["^;C"],"^1J","^;<"]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",634,"^9",7,"^:",634,"^;",26,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;U"]]]]]],"^M","^20","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^;3",["^1H",[["^;0","^;U"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",634,"^;7",["^L",[null,"^;8"]],"^:",634,"^;9",2,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;U"]]]]]],"~$dispatch-result!",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",555,"^9",7,"^:",555,"^;",23,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;<",["^ ","^;F",["~$results","~$dispatch","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1J","^;@"],"^;S"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^M","^43","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;3",["^1H",[["^;0","^;<","~$p__64293","^;S"]]],"^;4",null,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^8",555,"^;7",["^L",["^;K","^;8"]],"^:",555,"^;9",4,"^;:",true,"^:Z",["^1H",["^:[",["^1H",[["^;0","^;<",["^ ","^;F",["^>3","^>4","^>5","^>6","^>7"],"^1J","^;@"],"^;S"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^;<",["^ ","^:Y",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",199,"^9",7,"^:",199,"^;",14,"^:Z",["^1H",["^:[",["^1H",[["^=V"],["^=V","^<X"]]]]],"^<L",["^ ","^;6",false,"^<M",2,"^;9",2,"^;3",[["^=V"],["^=V","^<X"]],"^:Z",["^1H",[["^=V"],["^=V","^<X"]]],"^;5",["^1H",[null,null]]]],"^M","^4H","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",14,"^<L",["^ ","^;6",false,"^<M",2,"^;9",2,"^;3",[["^=V"],["^=V","^<X"]],"^:Z",["^1H",[["^=V"],["^=V","^<X"]]],"^;5",["^1H",[null,null]]],"^;3",[["^=V"],["^=V","^<X"]],"^;4",null,"^<M",2,"^;5",["^1H",[null,null]],"^9",1,"^;6",false,"^<N",[["^ ","^<M",1,"^;6",false,"^<O","^;8"],["^ ","^<M",2,"^;6",false,"^<O","^<["]],"^8",199,"^:",199,"^;9",2,"^;:",true,"^:Z",["^1H",[["^=V"],["^=V","^<X"]]]]],"^1F",["^ ","^?","^@","^J","^J","^Y","^Z","^[","^10","^13","^13","^G","^G","^16","^G","~$m","^18","^1;","^1<","^18","^18","~$s","^@","^10","^10","^Z","^Z","^1<","^1<","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1A",["^L",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~:req-un","~:opt-un","~:remote","~:state-id-before","~:only-refresh","~:gfn","~:children","~:pred-exprs","~:keys-pred","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","^2<","^;>","~:transacted-ast","~:opt-keys","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:com.fulcrologic.fulcro.algorithms.tx-processing/aborted?","~:db-after","~:ref","~$cljs.spec.alpha/coll-of","~:synchronous?","~:cljs.spec.alpha/kind-form","~:warn","~:req-specs","~:transmitted-ast","~:done?","~:status-text","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element","~:state","^3?","^3A","~:cljs.spec.alpha/cpred","~:status-code","~:after-render?","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^;C","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~$%","~:abort!","~:otherwise","~:state-before-action","~:fatal","~:db-before","~:com.fulcrologic.fulcro.application/app","~:dispatch","~:transmit!","~:req","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:root","~:result","^=H","^<A","~:kind","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","~:req-keys","^<B","~$cljs.core/fn","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:opt-specs","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:pred-forms","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.application/remote-name","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:abort-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^;W","~:parallel?","~:auto","~:edn-query-language.ast/key","~:p","~:new-elements","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:cljs.spec.alpha/conform-all","~:rest","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^;?","^<@","~:message","~:com.fulcrologic.fulcro.application/remote-names","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:cljs.spec.alpha/describe","~:opt","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^?B","^@>","^=H","^@E","^@?","^>U","^?5","^?L","^@@","^@G","^2<","^>S","~:p","^@A","^>D","^;W","^@9","^@I","^>I","^?J","^?1","^>A","^>O","^@C","^?W","^@J","^>E","^>M","^>K","^@;","^@1","^>;","^><","^>@","^>B","^>C","^>G","^>W","^?E","^?Q","^?U","^?X","^@H","^?R","~~:ns-specs",["^ ","^>:","^53","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^>D",["^1H",["^>S","^@?","^?L","^2<"]],"^;>",["^1H",["~$cljs.spec.alpha/map-of","^26","^53"]],"^>H","^@P","^>I","~:edn-query-language.ast/node","^>J","^3M","^>N","^25","^>[","^25","^?3",["^1H",["~$cljs.spec.alpha/keys","^?E",["^<@","^@=","^<B","^;?","^;>","^<A"],"^@H",["^@F","^@L","^@4"]]],"^;C",["^1H",["^>S","^?3","^?L","^2<"]],"^?F",["^1H",["^@S","^?E",["^?W","^>H","^;W","^?N","^;C"],"^@H",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^@O"]]],"^<A","^3A","^?N","^2<","^<B","^4:","^?T",["^1H",["^>S","^?F","^?L","^2<"]],"^?V",["^1H",["^>S","^?F","^?L","^2<"]],"^?W","~$cljs.core/uuid?","^@T","^@P","^@2",["^1H",["^@Q","^@1","^>D"]],"^@4",["^1H",["^@Q","^26","^53"]],"^@8","^25","^;W",["^1H",["^@S","^@H",["^>:"],"^><",["^>:"]]],"^@=","^>I","^@?",["^1H",["^@S","^?E",["^?W","^<@","^>I","^@K","^>J","^@C"],"^@H",["^;W"]]],"^@C","^25","^;?","^4:","^<@","^2V","^@F",["^1H",["^@Q","^26","^@R"]],"^@I","^25","^@K","^3M","^@L",["^1H",["^@Q","^26","^@R"]]],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^59",[["^@W","~:static-fns"],true,["^@W","~:shadow-tweaks"],null,["^@W","~:source-map-inline"],null,["^@W","~:elide-asserts"],false,["^@W","~:optimize-constants"],null,["^@W","^1S"],null,["^@W","~:external-config"],null,["^@W","~:tooling-config"],null,["^@W","~:emit-constants"],null,["^@W","~:load-tests"],null,["^@W","~:form-size-threshold"],null,["^@W","~:data-readers"],null,["^@W","~:infer-externs"],"^@:",["^@W","^1U"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^@W","~:fn-invoke-direct"],null,["^@W","~:source-map"],"/dev/null"]]]