["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.rendering.multiple_roots_renderer');\n/**\n * Register a mounted react component as a new root that should be managed. The\n *   options map can contain:\n * \n *   - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n *   to true, which causes it to happen once (on initial mount).\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$register_root_BANG_(var_args){\nvar G__56061 = arguments.length;\nswitch (G__56061) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118),true], null));\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__56096){\nvar map__56098 = p__56096;\nvar map__56098__$1 = cljs.core.__destructure_map(map__56098);\nvar app = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56098__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56098__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118));\nvar app__$1 = (function (){var or__4212__auto__ = app;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nvar or__4212__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\nif(cljs.core.truth_(or__4212__auto____$1)){\nreturn or__4212__auto____$1;\n} else {\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\n}\n}\n})();\nif(cljs.core.map_QMARK_(app__$1)){\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\nvar k = com.fulcrologic.fulcro.components.class__GT_registry_key(class$);\nvar initialize_state_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"initialize-state!\",\"initialize-state!\",-1114074844));\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar known_roots = (function (){var G__56136 = app__$1;\nvar G__56136__$1 = (((G__56136 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__56136));\nvar G__56136__$2 = (((G__56136__$1 == null))?null:cljs.core.deref(G__56136__$1));\nif((G__56136__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__56136__$2);\n}\n})();\nvar initialized_QMARK_ = cljs.core.contains_QMARK_(known_roots,k);\nif(cljs.core.truth_((function (){var and__4210__auto__ = initialize_QMARK_;\nif(cljs.core.truth_(and__4210__auto__)){\nreturn (!(initialized_QMARK_));\n} else {\nreturn and__4210__auto__;\n}\n})())){\n(initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2 ? initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,class$) : initialize_state_BANG_.call(null,app__$1,class$));\n\nvar G__56141_56338 = app__$1;\nvar G__56142_56339 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(G__56141_56338,G__56142_56339) : schedule_render_BANG_.call(null,G__56141_56338,G__56142_56339));\n} else {\n}\n\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,90,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\n}),null)),null,2083505288);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\n} else {\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,92,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Register-root cannot find app. Pass your Fulcro app via options.\"], null);\n}),null)),null,-828338194);\n}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Deregister a mounted root that should no longer be managed.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$deregister_root_BANG_(var_args){\nvar G__56171 = arguments.length;\nswitch (G__56171) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__56181){\nvar map__56187 = p__56181;\nvar map__56187__$1 = cljs.core.__destructure_map(map__56187);\nvar options = map__56187__$1;\nvar app = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56187__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar app__$1 = (function (){var or__4212__auto__ = app;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nvar or__4212__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\nif(cljs.core.truth_(or__4212__auto____$1)){\nreturn or__4212__auto____$1;\n} else {\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\n}\n}\n})();\nif(cljs.core.map_QMARK_(app__$1)){\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\nvar k = com.fulcrologic.fulcro.components.class__GT_registry_key(class$);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,103,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\n}),null)),null,-1685503018);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.disj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\n} else {\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,105,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Deregister-root cannot find app. Pass your Fulcro app via options.\"], null);\n}),null)),null,-1796560193);\n}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$lang$maxFixedArity = 2);\n\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_roots_BANG_(app,options){\nvar state_map = (function (){var G__56228 = app;\nvar G__56228__$1 = (((G__56228 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__56228));\nif((G__56228__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__56228__$1);\n}\n})();\nvar known_roots = (function (){var G__56229 = app;\nvar G__56229__$1 = (((G__56229 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__56229));\nvar G__56229__$2 = (((G__56229__$1 == null))?null:cljs.core.deref(G__56229__$1));\nif((G__56229__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__56229__$2);\n}\n})();\ncom.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app,options);\n\nvar seq__56232 = cljs.core.seq(cljs.core.keys(known_roots));\nvar chunk__56234 = null;\nvar count__56235 = (0);\nvar i__56236 = (0);\nwhile(true){\nif((i__56236 < count__56235)){\nvar k = chunk__56234.cljs$core$IIndexed$_nth$arity$2(null,i__56236);\nvar cls_56346 = com.fulcrologic.fulcro.components.registry_key__GT_class(k);\nvar query_56347 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_56346,state_map);\nvar root_props_56348 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_56347,state_map,state_map);\nvar seq__56269_56349 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\nvar chunk__56270_56350 = null;\nvar count__56271_56351 = (0);\nvar i__56272_56352 = (0);\nwhile(true){\nif((i__56272_56352 < count__56271_56351)){\nvar root_56353 = chunk__56270_56350.cljs$core$IIndexed$_nth$arity$2(null,i__56272_56352);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_56353,root_props_56348);\n\n\nvar G__56354 = seq__56269_56349;\nvar G__56355 = chunk__56270_56350;\nvar G__56356 = count__56271_56351;\nvar G__56357 = (i__56272_56352 + (1));\nseq__56269_56349 = G__56354;\nchunk__56270_56350 = G__56355;\ncount__56271_56351 = G__56356;\ni__56272_56352 = G__56357;\ncontinue;\n} else {\nvar temp__5753__auto___56358 = cljs.core.seq(seq__56269_56349);\nif(temp__5753__auto___56358){\nvar seq__56269_56359__$1 = temp__5753__auto___56358;\nif(cljs.core.chunked_seq_QMARK_(seq__56269_56359__$1)){\nvar c__4638__auto___56360 = cljs.core.chunk_first(seq__56269_56359__$1);\nvar G__56362 = cljs.core.chunk_rest(seq__56269_56359__$1);\nvar G__56363 = c__4638__auto___56360;\nvar G__56364 = cljs.core.count(c__4638__auto___56360);\nvar G__56365 = (0);\nseq__56269_56349 = G__56362;\nchunk__56270_56350 = G__56363;\ncount__56271_56351 = G__56364;\ni__56272_56352 = G__56365;\ncontinue;\n} else {\nvar root_56366 = cljs.core.first(seq__56269_56359__$1);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_56366,root_props_56348);\n\n\nvar G__56367 = cljs.core.next(seq__56269_56359__$1);\nvar G__56368 = null;\nvar G__56369 = (0);\nvar G__56370 = (0);\nseq__56269_56349 = G__56367;\nchunk__56270_56350 = G__56368;\ncount__56271_56351 = G__56369;\ni__56272_56352 = G__56370;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__56371 = seq__56232;\nvar G__56372 = chunk__56234;\nvar G__56373 = count__56235;\nvar G__56374 = (i__56236 + (1));\nseq__56232 = G__56371;\nchunk__56234 = G__56372;\ncount__56235 = G__56373;\ni__56236 = G__56374;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__56232);\nif(temp__5753__auto__){\nvar seq__56232__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__56232__$1)){\nvar c__4638__auto__ = cljs.core.chunk_first(seq__56232__$1);\nvar G__56375 = cljs.core.chunk_rest(seq__56232__$1);\nvar G__56376 = c__4638__auto__;\nvar G__56377 = cljs.core.count(c__4638__auto__);\nvar G__56378 = (0);\nseq__56232 = G__56375;\nchunk__56234 = G__56376;\ncount__56235 = G__56377;\ni__56236 = G__56378;\ncontinue;\n} else {\nvar k = cljs.core.first(seq__56232__$1);\nvar cls_56379 = com.fulcrologic.fulcro.components.registry_key__GT_class(k);\nvar query_56380 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_56379,state_map);\nvar root_props_56381 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_56380,state_map,state_map);\nvar seq__56284_56382 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\nvar chunk__56285_56383 = null;\nvar count__56286_56384 = (0);\nvar i__56287_56385 = (0);\nwhile(true){\nif((i__56287_56385 < count__56286_56384)){\nvar root_56386 = chunk__56285_56383.cljs$core$IIndexed$_nth$arity$2(null,i__56287_56385);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_56386,root_props_56381);\n\n\nvar G__56387 = seq__56284_56382;\nvar G__56388 = chunk__56285_56383;\nvar G__56389 = count__56286_56384;\nvar G__56390 = (i__56287_56385 + (1));\nseq__56284_56382 = G__56387;\nchunk__56285_56383 = G__56388;\ncount__56286_56384 = G__56389;\ni__56287_56385 = G__56390;\ncontinue;\n} else {\nvar temp__5753__auto___56391__$1 = cljs.core.seq(seq__56284_56382);\nif(temp__5753__auto___56391__$1){\nvar seq__56284_56392__$1 = temp__5753__auto___56391__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__56284_56392__$1)){\nvar c__4638__auto___56393 = cljs.core.chunk_first(seq__56284_56392__$1);\nvar G__56394 = cljs.core.chunk_rest(seq__56284_56392__$1);\nvar G__56395 = c__4638__auto___56393;\nvar G__56396 = cljs.core.count(c__4638__auto___56393);\nvar G__56397 = (0);\nseq__56284_56382 = G__56394;\nchunk__56285_56383 = G__56395;\ncount__56286_56384 = G__56396;\ni__56287_56385 = G__56397;\ncontinue;\n} else {\nvar root_56398 = cljs.core.first(seq__56284_56392__$1);\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_56398,root_props_56381);\n\n\nvar G__56399 = cljs.core.next(seq__56284_56392__$1);\nvar G__56400 = null;\nvar G__56401 = (0);\nvar G__56402 = (0);\nseq__56284_56382 = G__56399;\nchunk__56285_56383 = G__56400;\ncount__56286_56384 = G__56401;\ni__56287_56385 = G__56402;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\n\nvar G__56403 = cljs.core.next(seq__56232__$1);\nvar G__56404 = null;\nvar G__56405 = (0);\nvar G__56406 = (0);\nseq__56232 = G__56403;\nchunk__56234 = G__56404;\ncount__56235 = G__56405;\ni__56236 = G__56406;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n/**\n * This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n * uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n * When it finds data that has changed it renders all of the components that depend on that data.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_stale_components_BANG_(app,options){\nvar map__56292 = app;\nvar map__56292__$1 = cljs.core.__destructure_map(map__56292);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56292__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__56293 = cljs.core.deref(runtime_atom);\nvar map__56293__$1 = cljs.core.__destructure_map(map__56293);\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56293__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206));\nvar limited_refresh_QMARK_ = cljs.core.seq(only_refresh);\nif(limited_refresh_QMARK_){\nvar map__56299 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,only_refresh);\nvar map__56299__$1 = cljs.core.__destructure_map(map__56299);\nvar limited_idents = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56299__$1,true);\nvar seq__56300 = cljs.core.seq(limited_idents);\nvar chunk__56301 = null;\nvar count__56302 = (0);\nvar i__56303 = (0);\nwhile(true){\nif((i__56303 < count__56302)){\nvar i = chunk__56301.cljs$core$IIndexed$_nth$arity$2(null,i__56303);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app,i);\n\n\nvar G__56421 = seq__56300;\nvar G__56422 = chunk__56301;\nvar G__56423 = count__56302;\nvar G__56424 = (i__56303 + (1));\nseq__56300 = G__56421;\nchunk__56301 = G__56422;\ncount__56302 = G__56423;\ni__56303 = G__56424;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__56300);\nif(temp__5753__auto__){\nvar seq__56300__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__56300__$1)){\nvar c__4638__auto__ = cljs.core.chunk_first(seq__56300__$1);\nvar G__56425 = cljs.core.chunk_rest(seq__56300__$1);\nvar G__56426 = c__4638__auto__;\nvar G__56427 = cljs.core.count(c__4638__auto__);\nvar G__56428 = (0);\nseq__56300 = G__56425;\nchunk__56301 = G__56426;\ncount__56302 = G__56427;\ni__56303 = G__56428;\ncontinue;\n} else {\nvar i = cljs.core.first(seq__56300__$1);\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app,i);\n\n\nvar G__56429 = cljs.core.next(seq__56300__$1);\nvar G__56430 = null;\nvar G__56431 = (0);\nvar G__56432 = (0);\nseq__56300 = G__56429;\nchunk__56301 = G__56430;\ncount__56302 = G__56431;\ni__56303 = G__56432;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n} else {\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app,options);\n}\n});\n/**\n * The top-level call for using this optimized render in your application.\n * \n *   If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n * \n *   This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n *   (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n *   will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n *   ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n *   events that should really only affect a known set of components (like the input field).\n * \n *   This option does *not* currently support using query keywords in the refresh set. Only idents.\n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_BANG_(var_args){\nvar G__56307 = arguments.length;\nswitch (G__56307) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2(app,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app,p__56308){\nvar map__56309 = p__56308;\nvar map__56309__$1 = cljs.core.__destructure_map(map__56309);\nvar options = map__56309__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56309__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\nvar root_props_changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__56309__$1,new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835));\nif(cljs.core.truth_((function (){var or__4212__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn root_props_changed_QMARK_;\n}\n})())){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app,options);\n} else {\ntry{return com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_(app,options);\n}catch (e56310){var e = e56310;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,152,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Optimized render failed. Falling back to root render.\"], null);\n}),null)),null,240020945);\n\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app,options);\n}}\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$lang$maxFixedArity = 2);\n\n/**\n * Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n *   in the component lifecycle:\n * \n *   ```\n *   (defsc UIRoot [this props]\n *  {:componentDidMount     (fn [this] (mroot/register-root! this))\n *   :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n *   :initial-state {}\n *   :query [root-like-query]}\n *  ...)\n *   ```\n * \n *   The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n *   one mounted app.\n *   \n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_react_class = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_react_class(UIRoot,fulcro_app){\nvar cls = (function (){\nreturn null;\n});\nvar ui_root = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIRoot);\ngoog.object.extend(cls.prototype,React.Component.prototype,cljs.core.clj__GT_js(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (){\nreturn false;\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),(function (){\nvar this$ = this;\nvar js_props = this$.props;\nvar app__50861__auto__ = (function (){var or__4212__auto__ = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn fulcro_app;\n}\n})();\nvar d__50862__auto__ = (function (){var or__4212__auto__ = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn (0);\n}\n})();\nvar _STAR_app_STAR__orig_val__56314 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar _STAR_shared_STAR__orig_val__56315 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\nvar _STAR_depth_STAR__orig_val__56316 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\nvar _STAR_app_STAR__temp_val__56317 = app__50861__auto__;\nvar _STAR_shared_STAR__temp_val__56318 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(app__50861__auto__);\nvar _STAR_depth_STAR__temp_val__56319 = d__50862__auto__;\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__56317);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__56318);\n\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__56319);\n\ntry{var _STAR_denormalize_time_STAR__orig_val__56320 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__56321 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(fulcro_app)));\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__56321);\n\ntry{var query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1(UIRoot);\nvar state_map = (function (){var G__56322 = fulcro_app;\nvar G__56322__$1 = (((G__56322 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__56322));\nif((G__56322__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__56322__$1);\n}\n})();\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\nvar G__56323 = props;\nvar G__56324 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"js-props\",\"js-props\",1900369280),js_props], null);\nreturn (ui_root.cljs$core$IFn$_invoke$arity$2 ? ui_root.cljs$core$IFn$_invoke$arity$2(G__56323,G__56324) : ui_root.call(null,G__56323,G__56324));\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__56320);\n}}finally {(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__56316);\n\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__56315);\n\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__56314);\n}})], null)));\n\nreturn cls;\n});\n/**\n * Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n * has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n * \n *   `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n *   to regsiter/deregister itself as a root.\n * \n *   `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n *   props, so a `:keyfn` would have to be based on something else.\n * \n *   You normally do not pass any props to this factory because it is controlling the component and feeding props from\n *   the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n *   have a bunch of sibling roots and need to set the react key for each.\n *   \n */\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_factory(var_args){\nvar G__56326 = arguments.length;\nswitch (G__56326) {\ncase 1:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1 = (function (UIClass){\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2(UIClass,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2 = (function (UIClass,options){\nvar constructor$ = (function (){\nreturn null;\n});\nvar ui_factory = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIClass);\nvar render = (function (this$){\nvar _STAR_denormalize_time_STAR__orig_val__56328 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__56329 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components._STAR_app_STAR_)));\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__56329);\n\ntry{var state_map = (function (){var G__56331 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar G__56331__$1 = (((G__56331 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__56331));\nif((G__56331__$1 == null)){\nreturn null;\n} else {\nreturn cljs.core.deref(G__56331__$1);\n}\n})();\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(UIClass,state_map);\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\nvar G__56332 = (function (){var or__4212__auto__ = props;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nvar G__56333 = com.fulcrologic.fulcro.components.props(this$);\nreturn (ui_factory.cljs$core$IFn$_invoke$arity$2 ? ui_factory.cljs$core$IFn$_invoke$arity$2(G__56332,G__56333) : ui_factory.call(null,G__56332,G__56333));\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__56328);\n}});\nvar wrapper_class = com.fulcrologic.fulcro.components.configure_component_BANG_(constructor$,new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"wrapper\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper\",-2035797237),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (_,___$1,___$2){\nreturn false;\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),render], null));\nvar wrapper_factory = com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(wrapper_class,options);\nreturn wrapper_factory;\n}));\n\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","~:file","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",61],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$with-app-context","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer"],"~:excludes",["~#set",[]],"~:macros",["^ ","^F",["^ ","~:arglists",["~#list",[["~$fulcro-app","~$&","~$body"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:name","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/with-app-context","~:ns","^G","~:macro",true]],"^O","^G","~:reader-aliases",["^ "],"~:op","^Q","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^Y","~$log","~$taoensso.timbre","~$ior","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","~$kr","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^Y","~$com.fulcrologic.fulcro.algorithms.denormalize","^17","~$cljs.core","^18","~$gobj","~$goog.object","~$goog","^1;","^1:","^1:","~$cljsjs.react","^1<","^13","^13","^X","^X","^11","^11","^15","^15","^[","^[","~$fdn","^17"],"~:seen",["^I",["~:require","~:require-macros"]],"~:uses",null,"^1@",["^ ","^G","^G","^18","^18","^Z","^[","^14","^15","^15","^15","^[","^["],"~:form",["^L",["~$ns","^G","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ",["^L",["^1@",["^G","~:refer",["^F"]]]],["^L",["^1?",["^13","~:as","^12"],["^11","^1E","^10"],["^17","^1E","^1="],["^15","^1E","^14"],["^X","^1E","^W"],["^Y","^1E","^16"],["^[","^1E","^Z"],"^1<",["^1:","^1E","^19"]]]]],"~:flags",["^ ","^1@",["^I",[]],"^1?",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^1;","^18","^13","^11","^17","^15","^X","^Y","^[","^1<","^1:"]],"^Q","^G","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],"~:compiled-at",1636231901168,"^S",["^ ","^W","^X","^Y","^Y","^Z","^[","^10","^11","^12","^13","^14","^15","^16","^Y","^17","^17","^18","^18","^19","^1:","^1;","^1;","^1:","^1:","^1<","^1<","^13","^13","^X","^X","^11","^11","^15","^15","^[","^[","^G","^G","^1=","^17"],"~:resource-name","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.rendering.multiple-roots-renderer\n  \"Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :refer [with-app-context]]))\n  (:require\n    [com.fulcrologic.fulcro.rendering.keyframe-render :as kr]\n    [com.fulcrologic.fulcro.rendering.ident-optimized-render :as ior]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    #?@(:cljs\n        [cljsjs.react\n         [goog.object :as gobj]])))\n\n(defn register-root!\n  \"Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).\"\n  ([react-instance]\n   (register-root! react-instance {:initialize? true}))\n  ([react-instance {:keys [app initialize?]}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class             (comp/react-type react-instance)\n             k                 (comp/class->registry-key class)\n             initialize-state! (ah/app-algorithm app :initialize-state!)\n             schedule-render!  (ah/app-algorithm app :schedule-render!)\n             known-roots       (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)\n             initialized?      (contains? known-roots k)]\n         (when (and initialize? (not initialized?))\n           (initialize-state! app class)\n           ;; We've already rendered this frame, so if we need initialized, we need a refresh\n           (schedule-render! app {:force-root? true}))\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] (fnil conj #{}) react-instance))\n       (log/error \"Register-root cannot find app. Pass your Fulcro app via options.\")))))\n\n(defn deregister-root!\n  \"Deregister a mounted root that should no longer be managed.\"\n  ([react-instance]\n   (deregister-root! react-instance {}))\n  ([react-instance {:keys [app] :as options}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class (comp/react-type react-instance)\n             k     (comp/class->registry-key class)]\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] disj react-instance))\n       (log/error \"Deregister-root cannot find app. Pass your Fulcro app via options.\")))))\n\n(defn render-roots! [app options]\n  (let [state-map   (some-> app :com.fulcrologic.fulcro.application/state-atom deref)\n        known-roots (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)]\n    (kr/render! app options)\n    (doseq [k (keys known-roots)\n            :let [cls        (comp/registry-key->class k)\n                  query      (comp/get-query cls state-map)\n                  root-props (fdn/db->tree query state-map state-map)]]\n      (doseq [root (get known-roots k)]\n        (comp/tunnel-props! root root-props)))))\n\n(defn render-stale-components!\n  \"This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data.\"\n  [app options]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [only-refresh]} @runtime-atom\n        limited-refresh? (seq only-refresh)]\n    (if limited-refresh?\n      (let [{limited-idents true} (group-by eql/ident? only-refresh)]\n        (doseq [i limited-idents]\n          (ior/render-components-with-ident! app i)))\n      (render-roots! app options))))\n\n(defn render!\n  \"The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.\"\n  ([app]\n   (render! app {}))\n  ([app {:keys [force-root? root-props-changed?] :as options}]\n   (if (or force-root? root-props-changed?)\n     (render-roots! app options)\n     (try\n       (render-stale-components! app options)\n       (catch #?(:clj Exception :cljs :default) e\n         (log/info \"Optimized render failed. Falling back to root render.\")\n         (render-roots! app options))))))\n\n#?(:clj\n   (defmacro with-app-context\n     \"Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     \"\n     [fulcro-app & body]\n     (if-not (:ns &env)\n       `(do ~@body)\n       `(let [app# (or comp/*app* ~fulcro-app)\n              d#   (or comp/*depth* 0)]\n          (binding [comp/*app*    app#\n                    comp/*shared* (comp/shared app#)\n                    comp/*depth*  d#]\n            ~@body)))))\n\n(defn floating-root-react-class\n  \"Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  \"\n  [UIRoot fulcro-app]\n  (let [cls     (fn [])\n        ui-root (comp/computed-factory UIRoot)]\n    #?(:cljs\n       (gobj/extend (.-prototype cls) js/React.Component.prototype\n         (clj->js\n           {:shouldComponentUpdate (fn [] false)\n            :render                (fn []\n                                     (this-as ^js this\n                                       (let [js-props (.-props this)]\n                                         (with-app-context fulcro-app\n                                           (binding [fdn/*denormalize-time* (-> fulcro-app :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                                             (let [query     (comp/get-query UIRoot)\n                                                   state-map (some-> fulcro-app :com.fulcrologic.fulcro.application/state-atom deref)\n                                                   props     (fdn/db->tree query state-map state-map)]\n                                               (ui-root props {:js-props js-props})))))))})))\n    cls))\n\n(defn floating-root-factory\n  \"Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  \"\n  ([UIClass]\n   (floating-root-factory UIClass {}))\n  ([UIClass options]\n   (let [constructor     (fn [])\n         ui-factory      (comp/computed-factory UIClass)\n         render          (fn [this]\n                           (binding [fdn/*denormalize-time* (-> comp/*app* :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                             (let [state-map (some-> comp/*app* :com.fulcrologic.fulcro.application/state-atom deref)\n                                   query     (comp/get-query UIClass state-map)\n                                   props     (fdn/db->tree query state-map state-map)]\n                               (ui-factory (or props {}) (comp/props this)))))\n         wrapper-class   (comp/configure-component! constructor ::wrapper\n                           {:shouldComponentUpdate (fn [_ _ _] false)\n                            :render                render})\n         wrapper-factory (comp/factory wrapper-class options)]\n     wrapper-factory)))\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__56061","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","js/Error","p__56096","map__56098","cljs.core/--destructure-map","cljs.core.get","react-instance","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_","app","initialize?","or__4212__auto__","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.components/*app*","cljs.core/map?","class","com.fulcrologic.fulcro.components/react-type","k","com.fulcrologic.fulcro.components/class->registry-key","initialize-state!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","schedule-render!","known-roots","G__56136","cljs.core/deref","initialized?","cljs.core/contains?","and__4210__auto__","G__56141","G__56142","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.fnil","cljs.core/conj","G__56171","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","p__56181","map__56187","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_","options","cljs.core/disj","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","state-map","G__56228","G__56229","com.fulcrologic.fulcro.rendering.keyframe-render/render!","seq__56232","cljs.core/seq","chunk__56234","count__56235","i__56236","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/keys","cls","com.fulcrologic.fulcro.components/registry-key->class","query","com.fulcrologic.fulcro.components.get_query","root-props","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","seq__56269","chunk__56270","count__56271","i__56272","seq__56284","chunk__56285","count__56286","i__56287","root","com.fulcrologic.fulcro.components/tunnel-props!","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","map__56292","map__56293","runtime-atom","only-refresh","limited-refresh?","map__56299","limited-idents","cljs.core/group-by","edn-query-language.core/ident?","seq__56300","chunk__56301","count__56302","i__56303","i","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","G__56307","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","p__56308","map__56309","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_","force-root?","root-props-changed?","e56310","e","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","UIRoot","fulcro-app","ui-root","com.fulcrologic.fulcro.components.computed_factory","goog.object/extend","js/React.Component.prototype","cljs.core/clj->js","this","js-props","app__50861__auto__","d__50862__auto__","com.fulcrologic.fulcro.components/*depth*","*app*-orig-val__56314","*shared*-orig-val__56315","com.fulcrologic.fulcro.components/*shared*","*depth*-orig-val__56316","*app*-temp-val__56317","*shared*-temp-val__56318","com.fulcrologic.fulcro.components.shared","*depth*-temp-val__56319","*denormalize-time*-orig-val__56320","*denormalize-time*-temp-val__56321","com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","G__56322","props","G__56323","G__56324","G__56326","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","UIClass","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory","constructor","ui-factory","render","*denormalize-time*-orig-val__56328","*denormalize-time*-temp-val__56329","G__56331","G__56332","G__56333","com.fulcrologic.fulcro.components/props","wrapper-class","com.fulcrologic.fulcro.components/configure-component!","_","wrapper-factory","com.fulcrologic.fulcro.components.factory"]],"~:used-vars",["^I",["~$cljs.core/--destructure-map","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","~$cljs.core/keys","~$taoensso.timbre/-log!","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.components/react-type","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/props","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/group-by","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","~$cljs.core/fnil","~$cljs.core/contains?","~$cljs.core/map?","~$cljs.core/conj","~$taoensso.timbre/*config*","~$cljs.core/swap!","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","~$com.fulcrologic.fulcro.components/shared","~$cljs.core/get","~$com.fulcrologic.fulcro.components/*app*","~$cljs.core/-nth","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","~$com.fulcrologic.fulcro.components/*shared*","~$cljs.core/clj->js","~$com.fulcrologic.fulcro.algorithms.denormalize/db->tree","~$com.fulcrologic.fulcro.components/any->app","~$com.fulcrologic.fulcro.components/tunnel-props!","~$com.fulcrologic.fulcro.components/configure-component!","~$com.fulcrologic.fulcro.components/*depth*","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","~$cljs.core/next","~$com.fulcrologic.fulcro.rendering.keyframe-render/render!","~$com.fulcrologic.fulcro.components/get-query","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","~$com.fulcrologic.fulcro.components/registry-key->class","~$com.fulcrologic.fulcro.components/factory","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$cljs.core/disj","~$com.fulcrologic.fulcro.components/computed-factory","~$goog.object/extend","~$com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","~$js/React.Component.prototype","~$com.fulcrologic.fulcro.components/class->registry-key","~$cljs.core/first","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","~$cljs.core/update-in","~$js/Error","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^1J","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^1;","~$goog.dom.HtmlElement"]]],["^1J","goog/async/freelist.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/labs/useragent/platform.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.labs.userAgent.util","~$goog.string"]]],["^1J","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18"]]],["^1J","goog/crypt/crypt.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.array","~$goog.asserts"]]],["^1J","goog/timer/timer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1J","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^["]]],["^1J","cljs/spec/gen/alpha.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","~$goog.Uri"]]],["^1J","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","~$clojure.string","^3="]]],["^1J","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3?"]]],["^1J","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/string/stringformat.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3="]]],["^1J","goog/events/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1J","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3<","^1:","~$goog.string.internal"]]],["^1J","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3G"]]],["^1J","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?"]]],["^1J","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^[","^3D","^Y","^1:","~$goog.crypt","~$goog.crypt.base64","^B"]]],["^1J","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","~$expound.paths","^B"]]],["^1J","goog/useragent/useragent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3<","~$goog.reflect","^3="]]],["^1J","goog/structs/prioritypool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1J","goog/async/run.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1J","taoensso/encore.cljs"],["19e6b7df8d479139a889d03eb0612d0b7a326998","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3D","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^1:","^3=","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1J","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/async/workqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","~$goog.async.FreeList"]]],["^1J","goog/events/events.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^3E","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","~$goog.events.EventId","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1J","goog/promise/resolver.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3@"]]],["^1J","goog/events/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3F"]]],["^1J","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^3=","^42"]]],["^1J","goog/structs/priorityqueue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.structs.Heap"]]],["^1J","goog/net/xhrio.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.Timer","^3>","^3?","^4;","^3A","~$goog.json.hybrid","~$goog.log","^48","^47","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1:","^3=","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^3F","^3C","^4?","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1J","goog/promise/thenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3@"]]],["^1J","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18"]]],["^1J","cljs/pprint.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3D","^3=","^42"]]],["^1J","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^4F","^4G","^4H","^4E","^3>","^3=","^42"]]],["^1J","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","~$expound.problems","^B","^3D","^3Z","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1J","goog/net/wrapperxmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4S","^4T"]]],["^1J","goog/events/eventtarget.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.Disposable","^3?","^43","~$goog.events.Event","^4=","^4>","^1:","^4@","^4A","^4C"]]],["^1J","com/fulcrologic/guardrails/core.cljc"],["fea1142983ea044a9d4139a04fb7599e98df5174","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3D","^[","^B","~$expound.alpha"]]],["^1J","goog/disposable/disposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.disposable.IDisposable"]]],["^1J","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3D"]]],["^1J","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1J","shadow/js.js"],["0273d29a26c6414d6326ed34664dcb7e98415b06","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?"]]],["^1J","goog/structs/set.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4P","~$goog.structs.Collection","^4Q","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1635907472000,1635907472000,1635907547000],["^51","node_modules/react/cjs/react.development.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","754b7a48941975257c8955f6d5e511cb3a878737","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^52","~$module$node_modules$object_assign$index"]]],["^1J","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","^3T"]]],["^1J","goog/events/listener.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4C","^4="]]],["^1J","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","~$goog.fs.blob","^3H","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3J","^3K","^3L","^3M"]]],["^1J","goog/debug/tracer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3?","~$goog.debug","~$goog.debug.Logger","~$goog.iter","^4M","^4Q","~$goog.structs.SimplePool"]]],["^1J","goog/events/listenermap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^4D","^1:","^4@","^4=","^4C"]]],["^1J","goog/events/eventid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","taoensso/truss.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","~$taoensso.truss.impl"]]],["^1J","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/events/eventwrapper.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1J","edn_query_language/core.cljc"],["89cd2ff9787f6dfcb81506253473dfa9b27d718a","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^B"]]],["^1J","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^13","^11","^17","^15","^X","^Y","^[","^1<","^1:"]]],["^1J","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3?","~$goog.html.SafeUrl","^3L","^3M","^3G"]]],["^1J","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5:","~$goog.html.SafeStyle","^5C","^3I","~$goog.html.uncheckedconversions","^3L","^3G"]]],["^1J","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^B","^4W"]]],["^1J","taoensso/truss/impl.cljs"],["ef3f595da76cbcbe40124ee0a858b7ca635d30f2","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3Z"]]],["^1J","clojure/walk.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18"]]],["^1J","goog/useragent/product.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3Q","^3S","^3F"]]],["^1J","goog/net/eventtype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^56","~$goog.iter.StopIteration"]]],["^1J","goog/net/xhriopool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^44","~$goog.structs.PriorityPool","^4Q"]]],["^1J","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3?","~$goog.dom.TagName","~$goog.dom.tags","^5:","^5G","~$goog.html.SafeStyleSheet","^5C","^3I","^5;","^3J","^3K","^3Q","^1:","^3L","^3M","^3G"]]],["^1J","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^1:"]]],["^1J","goog/math/size.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/structs/queue.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>"]]],["^1J","goog/labs/useragent/engine.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3<","^3="]]],["^1J","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>"]]],["^1J","taoensso/timbre/appenders/core.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3D","~$taoensso.encore"]]],["^1J","cljs/reader.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^1:","^4I","^40","^42"]]],["^1J","goog/dom/dom.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3?","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^5K","~$goog.dom.safe","^5F","^5H","~$goog.math.Coordinate","~$goog.math.Size","^1:","^3=","^3L","~$goog.string.Unicode","^3F"]]],["^1J","com/fulcrologic/fulcro/components.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^1:","^1<","^Y","^B","^[","^5N","~$clojure.walk","^3D","~$com.fulcrologic.fulcro.algorithms.do-not-use","^17","^X","~$com.fulcrologic.guardrails.core","^3Z"]]],["^1J","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.debug.Error","^5P"]]],["^1J","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3?","^3=","^4P","^4Q","^4R","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1J","goog/net/errorcode.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^51","node_modules/object-assign/index.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","519ffd5a4c91b67302cc9947b794966d629860cd","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^52"]]],["^1J","goog/debug/errorhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4Y","^3?","^5<","~$goog.debug.EntryPointMonitor","^5X","~$goog.debug.Trace"]]],["^1J","goog/disposable/idisposable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/promise/promise.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3B","^3?","^4:","~$goog.async.run","^3Y","^5X","~$goog.promise.Resolver"]]],["^1J","cljs/spec/alpha.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^1:","^5U","~$cljs.spec.gen.alpha","^3D"]]],["^1J","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",[]]],["^1J","goog/json/hybrid.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","~$goog.json"]]],["^1J","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^1:"]]],["^1J","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^4F","^3D","~$cljs.tools.reader.impl.inspect"]]],["^1J","cljsjs/react.cljs"],["4323f8e603a952cae34c4c6db04141e97928434f","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","~$module$node_modules$react$index"]]],["^1J","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3=","^42"]]],["^1J","goog/structs/pool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4Y","~$goog.structs.Queue","~$goog.structs.Set"]]],["^51","node_modules/react/cjs/react.production.min.js"],["e8091a4577ab6b32c9fa13d5dfc59db052218e1e","4e9614cdc0e2c223ef717009a8fd70c2c8df01cc","0a81b45abe33f0ad39b726512604018f94261db9","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^52","^58"]]],["^1J","goog/net/httpstatus.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/structs/heap.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^1:","~$goog.structs.Node"]]],["^1J","goog/debug/entrypointregistry.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?"]]],["^1J","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^5Q","^5H","^3L","^3G"]]],["^1J","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^17","^X","^15"]]],["^1J","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3G"]]],["^1J","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3D","^B","^@","^3Z","^4W","^4X","^3P","^5U","^41","^3="]]],["^1J","goog/debug/debug.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","~$goog.debug.errorcontext","^3F"]]],["^1J","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/math/coordinate.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.math"]]],["^1J","goog/debug/errorcontext.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^4G","^3=","^42"]]],["^1J","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3>","^3?","^5E","^6;"]]],["^1J","goog/async/nexttick.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4;","~$goog.dom","^5K","^5E","^3Q","^3R"]]],["^1J","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","^5F","^5:","^5G","^5M","^5C","^3I","^3L","^3G","^3J"]]],["^1J","goog/debug/logger.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^5<","^4M","~$goog.log.Level","~$goog.log.LogRecord","~$goog.log.Logger"]]],["^1J","goog/events/event.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4Y","^4@"]]],["^1J","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^4E","^4F","^4G"]]],["^1J","goog/events/eventhandler.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4Y","^43","^1:","^4Z","^4@","^3A","^4B"]]],["^1J","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","~$goog.math.Long","~$goog.math.Integer","^3=","^1:","^3>","^3C","^42"]]],["^1J","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3L","^3M","^5;","^3?"]]],["^1J","goog/log/log.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","^5<"]]],["^1J","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3L","^5G","^3M","^3>","^1:","^3?","^3G"]]],["^1J","goog/structs/collection.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/events/browserevent.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^5<","^3E","^4Z","~$goog.events.EventType","^3T","^3F"]]],["^1J","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3T"]]],["^1J","goog/structs/node.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/structs/simplepool.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4Y"]]],["^1J","goog/dom/browserfeature.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3F"]]],["^1J","clojure/set.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18"]]],["^1J","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","^3="]]],["^1J","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","^3M"]]],["^1J","taoensso/timbre.cljs"],["daf6b8826cb16aed7fb3e0dd7a5c5266d2a53854","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^3D","^5N","~$taoensso.timbre.appenders.core"]]],["^1J","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^13","^17","^15","^3Z","^Y","^["]]],["^1J","goog/json/json.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/events/listenable.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4@","^4A"]]],["^1J","goog/net/xmlhttpfactory.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^4S"]]],["^1J","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["1caf5ece14d08c1a1f2d6dbda6366e56e941c356","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^18","^[","^3Z","^Y"]]],["^1J","goog/net/xmlhttp.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","~$goog.net.WrapperXmlHttpFactory","^4T","^4S"]]],["^1J","goog/net/xhrlike.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;"]]],["^1J","goog/crypt/base64.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^37",["^ ","^38",null,"^39",["^I",[]],"^3:",["^1;","^3?","^3N","^3=","^3F","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/pprint.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1617990988000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1617990988000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/core.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/rendering/keyframe_render.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/spec/alpha.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/utils.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1635907473000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/edn-query-language/eql/1.0.0/eql-1.0.0.jar!/edn_query_language/core.cljc",1635907473000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/encore/2.120.0/encore-2.120.0.jar!/taoensso/encore.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/reader.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1635907474000,"jar:file:/Users/nitin/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/fulcro/3.4.14/fulcro-3.4.14.jar!/com/fulcrologic/fulcro/components.cljc",1635907474000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1617991017000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/spec/gen/alpha.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1635907472000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1621233320000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1635907547000,"jar:file:/Users/nitin/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1635907547000,"jar:file:/Users/nitin/.m2/repository/com/fulcrologic/guardrails/0.0.12/guardrails-0.0.12.jar!/com/fulcrologic/guardrails/config.cljc",1635907473000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",1,"^9",5,"^:",1,"^;",61],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G"],"^H",["^I",[]],"^J",["^ ","^F",["^ ","^K",["^L",[["^M","~$&","^N"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^O","^P","^Q","^G","^R",true]],"~:shadow/js-access-properties",["^I",["Component"]],"^O","^G","^S",["^ "],"^U",null,"^V",["^ ","^W","^X","^Y","^Y","^Z","^[","^10","^11","^12","^13","^14","^15","^16","^Y","^17","^17","^18","^18","^19","^1:","^1;","^1;","^1:","^1:","^1<","^1<","^13","^13","^X","^X","^11","^11","^15","^15","^[","^[","^1=","^17"],"^1>",["^I",["^1?","^1@"]],"~:shadow/js-access-global",["^I",["React","Error"]],"^1A",null,"~:defs",["^ ","~$register-root!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",69,"^9",7,"^:",69,"^;",21,"^K",["^L",["~$quote",["^L",[["~$react-instance"],["^86",["^ ","~:keys",["~$app","~$initialize?"]]]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^86"],["^86",["^ ","^87",["^88","^89"]]]],"^K",["^L",[["^86"],["^86",["^ ","^87",["^88","^89"]]]]],"~:arglists-meta",["^L",[null,null]]]],"^O","^29","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",21,"^8:",["^ ","^8;",false,"^8<",2,"^8=",2,"^8>",[["^86"],["^86",["^ ","^87",["^88","^89"]]]],"^K",["^L",[["^86"],["^86",["^ ","^87",["^88","^89"]]]]],"^8?",["^L",[null,null]]],"^8>",[["^86"],["^86",["^ ","^87",["^88","^89"]]]],"~:protocol-impl",null,"^8<",2,"^8?",["^L",[null,null]],"^9",1,"^8;",false,"~:methods",[["^ ","^8<",1,"^8;",false,"~:tag","~$any"],["^ ","^8<",2,"^8;",false,"^8B",["^I",[null,"^8C","~$clj-nil"]]]],"^8",69,"^:",69,"^8=",2,"~:fn-var",true,"^K",["^L",[["^86"],["^86",["^ ","^87",["^88","^89"]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount)."],"~$deregister-root!",["^ ","^84",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",94,"^9",7,"^:",94,"^;",23,"^K",["^L",["^85",["^L",[["^86"],["^86",["^ ","^87",["^88"],"^1E","~$options"]]]]]],"^6","Deregister a mounted root that should no longer be managed.","^8:",["^ ","^8;",false,"^8<",2,"^8=",2,"^8>",[["^86"],["^86",["^ ","^87",["^88"],"^1E","^8G"]]],"^K",["^L",[["^86"],["^86",["^ ","^87",["^88"],"^1E","^8G"]]]],"^8?",["^L",[null,null]]]],"^O","^2M","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",23,"^8:",["^ ","^8;",false,"^8<",2,"^8=",2,"^8>",[["^86"],["^86",["^ ","^87",["^88"],"^1E","^8G"]]],"^K",["^L",[["^86"],["^86",["^ ","^87",["^88"],"^1E","^8G"]]]],"^8?",["^L",[null,null]]],"^8>",[["^86"],["^86",["^ ","^87",["^88"],"^1E","^8G"]]],"^8@",null,"^8<",2,"^8?",["^L",[null,null]],"^9",1,"^8;",false,"^8A",[["^ ","^8<",1,"^8;",false,"^8B","^8C"],["^ ","^8<",2,"^8;",false,"^8B",["^I",[null,"^8C","^8D"]]]],"^8",94,"^:",94,"^8=",2,"^8E",true,"^K",["^L",[["^86"],["^86",["^ ","^87",["^88"],"^1E","^8G"]]]],"^6","Deregister a mounted root that should no longer be managed."],"~$render-roots!",["^ ","^84",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",107,"^9",7,"^:",107,"^;",20,"^K",["^L",["^85",["^L",[["^88","^8G"]]]]]],"^O","^2@","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",20,"^8>",["^L",[["^88","^8G"]]],"^8@",null,"^8?",["^L",[null,null]],"^9",1,"^8;",false,"^8",107,"~:ret-tag","^8D","^:",107,"^8=",2,"^8E",true,"^K",["^L",["^85",["^L",[["^88","^8G"]]]]]],"~$render-stale-components!",["^ ","^84",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",118,"^9",7,"^:",118,"^;",31,"^K",["^L",["^85",["^L",[["^88","^8G"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"^O","^2E","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",31,"^8>",["^L",[["^88","^8G"]]],"^8@",null,"^8?",["^L",[null,null]],"^9",1,"^8;",false,"^8",118,"^8I","^8D","^:",118,"^8=",2,"^8E",true,"^K",["^L",["^85",["^L",[["^88","^8G"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"~$render!",["^ ","^84",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",132,"^9",7,"^:",132,"^;",14,"^K",["^L",["^85",["^L",[["^88"],["^88",["^ ","^87",["~$force-root?","~$root-props-changed?"],"^1E","^8G"]]]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.","^8:",["^ ","^8;",false,"^8<",2,"^8=",2,"^8>",[["^88"],["^88",["^ ","^87",["^8L","^8M"],"^1E","^8G"]]],"^K",["^L",[["^88"],["^88",["^ ","^87",["^8L","^8M"],"^1E","^8G"]]]],"^8?",["^L",[null,null]]]],"^O","^31","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",14,"^8:",["^ ","^8;",false,"^8<",2,"^8=",2,"^8>",[["^88"],["^88",["^ ","^87",["^8L","^8M"],"^1E","^8G"]]],"^K",["^L",[["^88"],["^88",["^ ","^87",["^8L","^8M"],"^1E","^8G"]]]],"^8?",["^L",[null,null]]],"^8>",[["^88"],["^88",["^ ","^87",["^8L","^8M"],"^1E","^8G"]]],"^8@",null,"^8<",2,"^8?",["^L",[null,null]],"^9",1,"^8;",false,"^8A",[["^ ","^8<",1,"^8;",false,"^8B","^8C"],["^ ","^8<",2,"^8;",false,"^8B",["^I",[null,"^8D"]]]],"^8",132,"^:",132,"^8=",2,"^8E",true,"^K",["^L",[["^88"],["^88",["^ ","^87",["^8L","^8M"],"^1E","^8G"]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents."],"~$floating-root-react-class",["^ ","^84",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",173,"^9",7,"^:",173,"^;",32,"^K",["^L",["^85",["^L",[["~$UIRoot","^M"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"^O","^26","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",32,"^8>",["^L",[["^8O","^M"]]],"^8@",null,"^8?",["^L",[null,null]],"^9",1,"^8;",false,"^8",173,"^8I","~$function","^:",173,"^8=",2,"^8E",true,"^K",["^L",["^85",["^L",[["^8O","^M"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"~$floating-root-factory",["^ ","^84",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",207,"^9",7,"^:",207,"^;",28,"^K",["^L",["^85",["^L",[["~$UIClass"],["^8R","^8G"]]]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  ","^8:",["^ ","^8;",false,"^8<",2,"^8=",2,"^8>",[["^8R"],["^8R","^8G"]],"^K",["^L",[["^8R"],["^8R","^8G"]]],"^8?",["^L",[null,null]]]],"^O","^2Q","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",28,"^8:",["^ ","^8;",false,"^8<",2,"^8=",2,"^8>",[["^8R"],["^8R","^8G"]],"^K",["^L",[["^8R"],["^8R","^8G"]]],"^8?",["^L",[null,null]]],"^8>",[["^8R"],["^8R","^8G"]],"^8@",null,"^8<",2,"^8?",["^L",[null,null]],"^9",1,"^8;",false,"^8A",[["^ ","^8<",1,"^8;",false,"^8B","^8C"],["^ ","^8<",2,"^8;",false,"^8B",["^I",["~$clj","~$cljs.core/MetaFn","^8D"]]]],"^8",207,"^:",207,"^8=",2,"^8E",true,"^K",["^L",[["^8R"],["^8R","^8G"]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  "]],"^1@",["^ ","^G","^G","^18","^18","^Z","^[","^14","^15","^15","^15","^[","^["],"~:cljs.analyzer/constants",["^ ","^1>",["^I",["~:js-props","~:initialize-state!","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper","~:debug","~:force-root?","~:schedule-render!","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:shouldComponentUpdate","~:render","~:root-props-changed?","~:com.fulcrologic.fulcro.application/runtime-atom","~:app","~:info","~:error","~:initialize?","~:auto","~:p","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t"]],"~:order",["^9:","^97","^8W","^90","^96","^8X","^8[","^8Z","~:p","^9;","^99","^91","^92","^95","^98","^93","^94","^9<","^8V","^8Y"]],"^1F",["^ ","^1@",["^I",[]],"^1?",["^I",[]]],"^1G",["^ "],"^1H",["^1;","^18","^13","^11","^17","^15","^X","^Y","^[","^1<","^1:"]],"^Q","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^36",[["^9@","~:static-fns"],true,["^9@","~:shadow-tweaks"],null,["^9@","~:source-map-inline"],null,["^9@","~:elide-asserts"],false,["^9@","~:optimize-constants"],null,["^9@","^1M"],null,["^9@","~:external-config"],null,["^9@","~:tooling-config"],null,["^9@","~:emit-constants"],null,["^9@","~:load-tests"],null,["^9@","~:form-size-threshold"],null,["^9@","~:data-readers"],null,["^9@","~:infer-externs"],"^9;",["^9@","^1O"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9@","~:fn-invoke-direct"],null,["^9@","~:source-map"],"/dev/null"]]]