{"version":3,"sources":["com/fulcrologic/guardrails/core.cljc"],"mappings":";AAwBA,2CAAA,3CAAKA;AACL,wCAAA,xCAAKC;AACL,wCAAA,xCAAKC;AAGL,4CAAA,5CAAOC,gGAAWC;AAAlB,AACE,IAAAC,aACiCD;IADjCC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAcG;iBAAd,AAAAD,4CAAAF,eAAA,xEAAoBI;WAApB,AAAAF,4CAAAF,eAAA,lEAAyBK;oBAAzB,AAAAH,4CAAAF,eAAA,3EAA8BM;kBAA9B,AAAAJ,4CAAAF,eAAA,zEAAsCO;gBAAtC,AAAAL,4CAAAF,eAAA,vEAA4CQ;iBAA5C,AAAAN,4CAAAF,eAAA,xEACcS;kBADd,AAAAP,4CAAAF,eAAA,zEACyBU;AADzB,AAEE,yDAAA,jDACE,AAACC,0BAAkB,AAACC,eAAKT,wDACzB,AAACU,gBAAMR,OACP,iBAAAS,qBAAeV;AAAf,AAAA,oBAAAU;AAAA,AAAA,UAAAA,NAAWC;AAAX,AACE,QAAA,KAAU,6DAAA,7DAACC,yDAAeD;;AAD5B;;;;AAGN,4CAAA,gEAAAE,5GAAME,gGAAWC,qBAAiDK,KAAKC;AAAvE,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAjB,4BAAAiB;gBAAA,AAAAhB,4CAAAgB,eAAA,vEAA+BG;oBAA/B,AAAAnB,4CAAAgB,eAAA,3EAAyCI;mBAAzC,AAAApB,4CAAAgB,eAAA,1EAAiDK;cAAjD,AAAArB,4CAAAgB,eAAA,rEAAwDM;AAAxD,AACE,IAAMG,qBAAgB,iBAAAC,oBAAKR;AAAL,AAAA,oBAAAQ;AAAWN;;AAAXM;;;IAChBC,aAAgB,2EAAA,zDAAIF,oBAAO,AAACG,eAAK,AAACC,cAAIL;IACtCM,sBAAgB,kBAAIL,oBACF,EAAI,AAACM,qBAAKJ,aAAM,AAACK,6CAAK,AAACC,cAAI,AAACC,kBAAQV,QAAQ,AAACW,kBAAQ,AAACN,cAAIF,cAAQ,AAACK,6CAAK,AAACC,cAAI,AAACC,kBAAQV,QAAQ,AAACK,cAAIF,cACnGH;IAClBY,wBAAgB,6CAAA,7CAACC;AALvB,AAME,IAAA,AACE,GAAU,AAACE,2DAAShB,KAAKO;AAAzB;AAAA,AACE,IAAMU,eAAQ,iFAAA,jFAACC,8CAAMC,kGAAwB9C;IACvC+C,gBAAQ,AAACC,wDAAgBrB,KAAKO;AADpC,AAEE,AAAAe,0DAAUL,aAAO,iBAAAO,mBAAI5B;AAAJ,AAAA,oBAAA4B;AAAAA;;AAAA;;KAAjB,kCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAD,gBAAA;AAAA,AAAA,0FAAuC,sHAAA,zEAAKxB,SAAQ,+BAAA,iBAAA,9BAAIJ,6DAA6CyB;GAArG,OAAA,KAAA;;AACA,oBAAMtB;AAAN,AACE,AAAC2B,sBAAOZ,sBAAgB,8DAAA,2CAAA,zGAACa,gDAAQN,oHAAkB,4CAAKrB;;AAD1D;;gBALN,cAAAgB,VAO2CY;AAP3C,AAQI,AAAAL,0DAAAH,mCAAA,uDAAA,kCAAA,KAAA,GAAA,8CAAA,qDAAA,KAAAI,gBAAA;AAAA,AAAA,kGAAA,RAAWI;GAAX,OAAA,KAAA;;AACJ,oBAAA,AAAAC,gBAAOf;AAAP,AACE,MAAA,AAAAe,gBAAQf;;AADV;;AAhBJ","names":["com.fulcrologic.guardrails.core/=>","com.fulcrologic.guardrails.core/|","com.fulcrologic.guardrails.core/<-","com.fulcrologic.guardrails.core/output-fn","data","map__55034","cljs.core/--destructure-map","cljs.core.get","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","cljs.core/force","temp__5753__auto__","err","taoensso.timbre.stacktrace","p__55044","map__55046","com.fulcrologic.guardrails.core/run-check","args?","log-level","vararg?","throw?","fn-name","spec","value","vargs?","and__4210__auto__","varg","cljs.core/last","cljs.core/seq","specable-args","cljs.core/map?","cljs.core.into","cljs.core/vec","cljs.core/butlast","cljs.core/flatten","valid-exception","cljs.core.atom","e55056","cljs.spec.alpha.valid_QMARK_","config","cljs.core.assoc","taoensso.timbre/*config*","problem","expound.alpha.expound_str","taoensso.timbre._log_BANG_","cljs.core/Delay","or__4212__auto__","cljs.core/reset!","cljs.core.ex_info","e","cljs.core/deref"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; Additional code Copyright Fulcrologic, LLC.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns com.fulcrologic.guardrails.core\n  #?(:cljs (:require-macros com.fulcrologic.guardrails.core))\n  (:require\n    #?@(:clj [[clojure.set :refer [union difference map-invert]]\n              [clojure.walk :as walk]\n              [com.fulcrologic.guardrails.utils :refer [cljs-env? clj->cljs]]\n              [com.fulcrologic.guardrails.config :as cfg]])\n    [clojure.string :as string]\n    [taoensso.timbre :as log]\n    [clojure.spec.alpha :as s]\n    [expound.alpha :as exp]))\n\n;; It doesn't actually matter what these are bound to, they are stripped by\n;; the macros they're used in and never end up in the final code. This is just\n;; so they can be used without '=> cannot be resolved' errors in the IDE.\n(def => :ret)\n(def | :st)\n(def <- :gen)\n\n;; runtime checking (both clj and cljs\n(defn- output-fn [data]\n  (let [{:keys [level ?err msg_ ?ns-str ?file hostname_\n                timestamp_ ?line]} data]\n    (str\n      (string/upper-case (name level)) \" \"\n      (force msg_)\n      (when-let [err ?err]\n        (str \"\\n\" (log/stacktrace err {}))))))\n\n(defn run-check [args? {:keys [log-level vararg? throw? fn-name]} spec value]\n  (let [vargs?          (and args? vararg?)\n        varg            (if vargs? (last (seq value)) nil)\n        specable-args   (if vargs?\n                          (if (map? varg) (into (vec (butlast value)) (flatten (seq varg))) (into (vec (butlast value)) (seq varg)))\n                          value)\n        valid-exception (atom nil)]\n    (try\n      (when-not (s/valid? spec specable-args)\n        (let [config  (assoc log/*config* :output-fn output-fn)\n              problem (exp/expound-str spec specable-args)]\n          (log/log* config (or log-level :error) (str fn-name (if args? \" argument list\" \" return type\") \"\\n\") problem)\n          (when throw?\n            (reset! valid-exception (ex-info problem {:fn-name (str fn-name)})))))\n      (catch #?(:cljs :default :clj Throwable) e\n        (log/error e \"BUG: Internal error in expound or clojure spec.\")))\n    (when @valid-exception\n      (throw @valid-exception)))\n  nil)\n\n\n#?(:clj\n   (defn clean-defn\n     \"This removes the gspec and returns a\n     clean defn for use in production builds.\"\n     [op forms]\n     (let [single-arity? (fn [fn-forms] (boolean (some vector? fn-forms)))\n           strip-gspec   (fn [body] (let [[args _gspec & more] body]\n                                      (cons args more)))]\n       (->> (if (single-arity? forms)\n              (let [[head-forms body-forms] (split-with (complement vector?) forms)]\n                `(~op ~@head-forms ~@(strip-gspec body-forms)))\n              (let [[head-forms body-forms tail-attr-map] (partition-by (complement seq?) forms)]\n                `(~op ~@head-forms ~@(map strip-gspec body-forms) ~@tail-attr-map)))\n         (remove nil?)))))\n\n#?(:clj\n   (defn- count-args\n     \"Returns a tuple with the number of regular and non-variadic arguments.\"\n     [conformed-args]\n     [(count (:args conformed-args))\n      (if (:varargs conformed-args) 1 0)]))\n\n#?(:clj\n   (defmacro ? [& forms]\n     (cond-> `(s/nilable ~@forms)\n       (cljs-env? &env) clj->cljs)))\n\n#?(:clj\n   (do\n     (s/def ::defn-macro string?)\n     (s/def ::expound (s/map-of keyword? any?))\n     (s/def ::throw? boolean?)\n     (s/def ::emit-spec? boolean?)\n     (s/def ::log-level #{:trace :debug :info :warn :error :fatal :report})\n\n     (s/def ::guardrails-config\n       (s/keys\n         :opt-un [::defn-macro\n                  ::expound\n                  ::throw?\n                  ::emit-spec?\n                  ::log-level]))\n\n     ;; These are lifted straight from clojure.core.specs.alpha, because it\n     ;; didn't seem possible to access them directly in the original namespace.\n     (s/def ::local-name (s/and simple-symbol? #(not= '& %)))\n\n     ;; sequential destructuring\n     (s/def ::seq-binding-form\n       (s/and vector?\n         (s/cat :elems (s/* ::binding-form)\n           :rest (s/? (s/cat :amp #{'&} :form ::binding-form))\n           :as (s/? (s/cat :as #{:as} :sym ::local-name)))))\n\n     ;; map destructuring\n     (s/def ::keys (s/coll-of ident? :kind vector?))\n     (s/def ::syms (s/coll-of symbol? :kind vector?))\n     (s/def ::strs (s/coll-of simple-symbol? :kind vector?))\n     (s/def ::or (s/map-of simple-symbol? any?))\n     (s/def ::as ::local-name)\n\n     (s/def ::map-special-binding\n       (s/keys :opt-un [::as ::or ::keys ::syms ::strs]))\n\n     (s/def ::map-binding (s/tuple ::binding-form any?))\n\n     (s/def ::ns-keys\n       (s/tuple\n         (s/and qualified-keyword? #(-> % name #{\"keys\" \"syms\"}))\n         (s/coll-of simple-symbol? :kind vector?)))\n\n     (s/def ::map-bindings\n       (s/every (s/or :mb ::map-binding\n                  :nsk ::ns-keys\n                  :msb (s/tuple #{:as :or :keys :syms :strs} any?))\n         :into {}))\n\n     (s/def ::map-binding-form (s/merge ::map-bindings ::map-special-binding))\n\n     (s/def ::binding-form\n       (s/or :sym ::local-name\n         :seq ::seq-binding-form\n         :map ::map-binding-form))\n\n     ;;; Function and >defn specs\n\n     (s/def ::arg-list\n       (s/and vector?\n         (s/cat :args (s/* ::binding-form)\n           :varargs (s/? (s/cat :amp #{'&} :form ::binding-form)))))\n\n     (s/def ::pred-arg-list\n       (s/and vector?\n         (s/cat :args (s/* (s/or :sym ::local-name)))))\n\n     (s/def ::anon-args+body\n       (s/cat :args ::arg-list\n         :body (s/* any?)))\n\n     (s/def ::anon-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :bs (s/alt :arity-1 ::anon-args+body\n                 :arity-n (s/+ (s/spec ::anon-args+body))))))\n\n     (s/def ::pred-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :args ::pred-arg-list\n           :body any?)))\n\n     (s/def ::spec-elem\n       (s/or :set set?\n         :pred-sym (s/and symbol?\n                     (complement #{'| '=>})\n                     ;; REVIEW: should the `?` be a requirement?\n                     #(string/ends-with? (str %) \"?\"))\n         :gspec (s/or :nilable-gspec ::nilable-gspec :gspec ::gspec)\n         :spec-key qualified-keyword?\n         :fun ::pred-fn\n         :list seq?))\n\n     (s/def ::such-that-op #{:st '|})\n     (s/def ::ret-op #{:ret '=>})\n     (s/def ::gen-op #{:gen '<-})\n\n     (s/def ::gspec\n       (s/and vector?\n         (s/cat :args (s/? (s/cat :args (s/+ ::spec-elem)\n                             :args-such-that (s/? (s/cat :op ::such-that-op\n                                                    :preds (s/+ ::pred-fn)))))\n           :ret-op ::ret-op\n           :ret ::spec-elem\n           :fn-such-that (s/? (s/cat :op ::such-that-op\n                                :preds (s/+ ::pred-fn)))\n           :gen (s/? (s/cat :op ::gen-op\n                       :gen-fn (s/? (some-fn seq? symbol?)))))))\n\n     (s/def ::nilable-gspec\n       (s/and vector?\n         (s/cat :maybe #{'? 's/nilable}\n           :gspec ::gspec)))\n\n     (s/def ::prepost (s/map-of #{:pre :post}\n                        (s/coll-of seq?\n                          :kind vector?\n                          :distinct true)))\n\n     (s/def ::args+body\n       (s/cat :args ::arg-list\n         :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                      :body (s/+ any?))\n                 :body (s/* any?))))\n\n     (s/def ::args+gspec+body\n       (s/&\n         (s/cat :args ::arg-list\n           :gspec (s/nilable ::gspec)\n           :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                        :body (s/+ any?))\n                   :body (s/* any?)))\n         (fn arg-specs-match-param-count? [{:keys [args gspec]}]\n           (if-not gspec\n             true\n             (let [argcount  (->> args count-args (apply +))\n                   spec-args (:args gspec)]\n               (if spec-args\n                 (-> spec-args :args count (= argcount))\n                 (= argcount 0)))))))\n\n\n     (s/def ::defn\n       (s/and seq?\n         (s/cat :op #{'defn 'defn-}\n           :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+body\n                 :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))\n                            :attr (s/? map?))))))\n\n     ;;;; Main code generating functions\n\n     (defn- unscrew-vec-unform\n       \"Half-arsed workaround for spec bugs CLJ-2003 and CLJ-2021.\"\n       [unformed-arg]\n       (if-not (sequential? unformed-arg)\n         unformed-arg\n         (let [malformed-seq-destructuring? (every-pred seq? (comp #{:as '&} first))\n               [unformed malformed] (split-with (complement malformed-seq-destructuring?) unformed-arg)]\n           (vec (concat unformed (apply concat malformed))))))\n\n\n     (defn- gspec->fspec*\n       [conformed-arg-list conformed-gspec anon-fspec? multi-arity-args? nilable?]\n       (let [{argspec-def              :args\n              retspec                  :ret\n              fn-such-that             :fn-such-that\n              {:keys [gen-fn] :as gen} :gen}\n             conformed-gspec]\n         (if (and anon-fspec?\n               argspec-def\n               (not gen)\n               (some #{'any?} (-> argspec-def :args vals)))\n           (if nilable? `(s/nilable ifn?) `ifn?)\n           (let [extract-spec\n                 (fn extract-spec [[spec-type spec]]\n                   (if (= spec-type :gspec)\n                     (if (= (key spec) :nilable-gspec)\n                       (gspec->fspec* nil (-> spec val :gspec) true false true)\n                       (gspec->fspec* nil (val spec) true false false))\n                     spec))\n\n                 named-conformed-args\n                 (when argspec-def\n                   (let [all-args     (remove nil? (concat (:args conformed-arg-list)\n                                                     [(-> conformed-arg-list :varargs :form)]))\n                         gen-arg-name (fn [index] (str \"arg\" (inc index)))\n                         gen-name     (fn [index [arg-type arg :as full-arg]]\n                                        (let [arg-name (if-not arg-type\n                                                         (gen-arg-name index)\n                                                         (case arg-type\n                                                           :sym arg\n                                                           :seq (or (-> arg :as :sym)\n                                                                  (gen-arg-name index))\n                                                           :map (or (-> arg :as)\n                                                                  (gen-arg-name index))))]\n                                          [(keyword arg-name) full-arg]))]\n                     (map-indexed gen-name (or (seq all-args)\n                                             (-> argspec-def :args count (repeat nil))))))\n\n                 arg-binding-map\n                 (if-not conformed-arg-list\n                   {}\n                   (if (every? #(= (-> % second key) :sym) named-conformed-args)\n                     `{:keys ~(vec (map #(-> % first name symbol) named-conformed-args))}\n                     (->> named-conformed-args\n                       (map (fn [[arg-key conformed-arg]]\n                              [(->> conformed-arg (s/unform ::binding-form) unscrew-vec-unform)\n                               arg-key]))\n                       (into {}))))\n\n                 process-arg-pred\n                 (fn process-arg-pred [{:keys [name args body]}]\n                   (let [bindings (if-let [anon-arg (some-> args :args first second)]\n                                    (assoc arg-binding-map :as anon-arg)\n                                    arg-binding-map)]\n                     (remove nil? `(fn ~name [~bindings] ~body))))\n\n                 processed-args\n                 (if-not argspec-def\n                   `(s/cat)\n                   (let [wrapped-params (->> argspec-def\n                                          :args\n                                          (map extract-spec)\n                                          (interleave (map first named-conformed-args))\n                                          (cons `s/cat))]\n                     (if-let [args-such-that (:args-such-that argspec-def)]\n                       (->> args-such-that\n                         :preds\n                         (map process-arg-pred)\n                         (list* `s/and wrapped-params))\n                       wrapped-params)))\n\n                 process-ret-pred\n                 (fn process-ret-pred [{:keys [name args body]}]\n                   (let [anon-arg       (some-> args :args first second)\n                         ret-sym        (gensym \"ret__\")\n                         bindings       [{(if multi-arity-args?\n                                            ['_ arg-binding-map]\n                                            arg-binding-map) :args\n                                          ret-sym            :ret}]\n                         processed-body (if anon-arg\n                                          (walk/postwalk-replace {anon-arg ret-sym} body)\n                                          body)]\n                     (remove nil? `(fn ~name ~bindings ~processed-body))))\n\n                 fn-spec\n                 (when fn-such-that\n                   (let [processed-ret-preds (map process-ret-pred (:preds fn-such-that))]\n                     (if (next processed-ret-preds)\n                       (cons `s/and processed-ret-preds)\n                       (first processed-ret-preds))))\n\n                 final-fspec\n                 (concat (when anon-fspec? [`s/fspec])\n                   [:args processed-args]\n                   [:ret (extract-spec retspec)]\n                   (when fn-spec [:fn fn-spec])\n                   (when gen-fn [:gen gen-fn]))]\n             (if nilable? `(s/nilable ~final-fspec) final-fspec)))))\n\n\n\n     ;; TODO make sure we check whether the variadic bodies are legit\n     ;; Can not have more than one\n     ;; Can not have one with more regular args than the variadic one\n     ;; To what extent does the compiler already check this?\n     (let [get-fspecs    (fn [fn-body]\n                           (let [[param-count variadic] (-> fn-body :args count-args)\n                                 gspec (or (:gspec fn-body)\n                                         (s/conform ::gspec\n                                           (vec (concat (repeat param-count 'any?)\n                                                  (when (> variadic 0)\n                                                    `[(s/* any?)])\n                                                  '[=> any?]))))]\n                             [(->> (if (> variadic 0) \"n\" param-count)\n                                (str \"arity-\")\n                                keyword)\n                              (gspec->fspec* (:args fn-body) gspec false true false)]))\n           get-spec-part (fn [part spec]\n                           (->> spec\n                             (drop-while (complement #{part}))\n                             second))]\n       (defn- generate-fspec-body [fn-bodies]\n         (case (key fn-bodies)\n           :arity-1\n           (when-let [gspec (-> fn-bodies val :gspec)]\n             (gspec->fspec* (-> fn-bodies val :args) gspec false false false))\n\n           :arity-n\n           (when (some :gspec (val fn-bodies))\n             (let [fspecs           (map get-fspecs (val fn-bodies))\n                   arg-specs        (mapcat (fn [[arity spec]]\n                                              [arity (or (get-spec-part :args spec) `empty?)])\n                                      fspecs)\n                   fn-param         (gensym \"p1__\")\n                   multi-ret-specs  (when (->> fspecs\n                                            (map #(get-spec-part :ret (second %)))\n                                            distinct\n                                            count\n                                            (not= 1))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity `(s/valid? ~(get-spec-part :ret spec)\n                                                          (:ret ~fn-param))])\n                                        fspecs))\n                   get-fn-clause    (partial get-spec-part :fn)\n                   fn-specs         (when (->> fspecs (map second) (some get-fn-clause))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity (if-let [fn-spec (get-fn-clause spec)]\n                                                         `(s/valid? ~fn-spec ~fn-param)\n                                                         true)])\n                                        fspecs))\n                   ;; NOTE: destructure args and ret in the arg vec\n                   multi-ret-clause (when multi-ret-specs\n                                      `(fn ~'valid-multi-arity-ret? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@multi-ret-specs)))\n                   multi-fn-clause  (when fn-specs\n                                      `(fn ~'valid-multi-arity-fn? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@fn-specs)))]\n               ;; Using s/or here even though s/alt seems to be more common\n               ;; for multi-arity specs in the wild. The spec error reporting\n               ;; is much better and it's immediately clear what didn't match.\n               (concat [:args `(s/or ~@arg-specs)]\n                 (when-not multi-ret-clause\n                   [:ret (get-spec-part :ret (-> fspecs first second))])\n                 (when (or multi-ret-clause multi-fn-clause)\n                   [:fn (if multi-fn-clause\n                          (if multi-ret-clause\n                            `(s/and ~multi-ret-clause ~multi-fn-clause)\n                            multi-fn-clause)\n                          multi-ret-clause)])))))))\n\n     (def ^:private spec-op->type\n       (let [map-prot     \"cljs.core.IMap\"\n             coll-prot    \"cljs.core.ICollection\"\n             ;; Needed because Closure compiler/JS doesn't consider strings seqable\n             seqable-prot \"(cljs.core.ISeqable|string)\"]\n         {'number?      \"number\"\n          'integer?     \"number\"\n          'int?         \"number\"\n          'nat-int?     \"number\"\n          'pos-int?     \"number\"\n          'neg-int?     \"number\"\n          'float?       \"number\"\n          'double?      \"number\"\n          'int-in       \"number\"\n          'double-in    \"number\"\n\n          'string?      \"string\"\n\n          'boolean?     \"boolean\"\n\n          'keys         map-prot\n          'map-of       map-prot\n          'map?         map-prot\n          'merge        map-prot\n\n          'set?         \"cljs.core.ISet\"\n          'vector?      \"cljs.core.IVector\"\n          'tuple        \"cljs.core.IVector\"\n          'seq?         \"cljs.core.ISeq\"\n          'seqable?     seqable-prot\n          'associative? \"cljs.core.IAssociative\"\n          'atom?        \"cljs.core.IAtom\"\n\n          'coll-of      coll-prot\n          'every        coll-prot\n\n          'keyword?     \"cljs.core.Keyword\"\n          'ifn?         \"cljs.core.IFn\"\n          'fn?          \"Function\"}))\n\n     (declare get-gspec-type)\n\n     (defn- get-type [recursive-call conformed-spec-elem]\n       (let [[spec-type spec-def] conformed-spec-elem\n             spec-op\n             ;; REVIEW: This kinda wants to be a multi-method when it grows up.\n             (case spec-type\n               :list (let [op (-> spec-def first name symbol)]\n                       (cond\n                         (#{'nilable '?} op) (concat (->> spec-def\n                                                       second\n                                                       (s/conform ::spec-elem)\n                                                       (get-type true))\n                                               [::nilable])\n                         (#{'* '+} op) (concat (->> spec-def\n                                                 second\n                                                 (s/conform ::spec-elem)\n                                                 (get-type true))\n                                         [::variadic])\n                         (#{'and} op) [(-> spec-def second)] ; TODO\n                         (#{'coll-of 'every} op) [(or (->> spec-def\n                                                        (drop-while (complement #{:kind}))\n                                                        second)\n                                                    op)]\n                         :else [op]))\n               ;;TODO support (some-fn and (s/or\n               :gspec (let [gspec-def (val spec-def)]\n                        (if (= (key spec-def) :nilable-gspec)\n                          [(get-gspec-type (:gspec gspec-def)) ::nilable]\n                          [(get-gspec-type gspec-def)]))\n               :pred-sym [spec-def]\n               [nil])]\n         (if recursive-call\n           spec-op\n           (if-let [js-type (spec-op->type (first spec-op))]\n             (let [modifiers (set (rest spec-op))]\n               (as-> js-type t\n                 (str (if (::nilable modifiers) \"?\" \"!\") t)\n                 (str (when (::variadic modifiers) \"...\") t)))\n             \"*\"))))\n\n\n     (defn- get-gspec-type [conformed-gspec]\n       (let [argspec-def (:args conformed-gspec)\n             args-jstype (if-not argspec-def\n                           \"\"\n                           (->> (-> conformed-gspec :args :args)\n                             (map (partial get-type false))\n                             (string/join \", \")))\n             ret-jstype  (get-type false (:ret conformed-gspec))]\n         (str \"function(\" args-jstype \"): \" ret-jstype)))\n\n     (defn- generate-type-annotations [env conformed-bs]\n       (when (cljs-env? env)\n         (case (key conformed-bs)\n           :arity-1 (when-let [gspec (-> conformed-bs val :gspec)]\n                      {:jsdoc [(str \"@type {\" (get-gspec-type gspec) \"}\")]})\n           ;; REVIEW: There doesn't seem to be a way to get valid annotations for args of\n           ;; multi-arity functions and attempts to just annotate the return value(s) failed\n           ;; as well. It wasn't possible to put together an annotation which was both\n           ;; considered valid and resulted in a successful type check.\n           :arity-n nil #_(when-let [ret-types (as-> (val conformed-bs) x\n                                                 (map #(get-type false (-> % :gspec :ret)) x)\n                                                 (distinct x)\n                                                 (when (not-any? #{\"*\" \"?\"} x) x))]\n                            {:jsdoc [(str \"@return {\" (string/join \"|\" ret-types) \"}\")]}))))\n\n     (defn- generate-fdef\n       [env forms]\n       (let [{[type fn-name] :name bs :bs} (s/conform ::>fdef-args forms)]\n         (case type\n           :sym (let [fdef `(s/fdef ~fn-name ~@(generate-fspec-body bs))]\n                  fdef)\n           :key `(s/def ~fn-name (s/fspec ~@(generate-fspec-body bs))))))))\n\n#?(:clj\n   (do\n     (defn- process-defn-body\n       [cfg fspec args+gspec+body]\n       (let [{:keys                                 [env fn-name]\n              {:keys [throw? emit-spec? log-level]} :config} cfg\n             {:keys [args body]} args+gspec+body\n             [prepost orig-body-forms] (case (key body)\n                                         :prepost+body [(-> body val :prepost)\n                                                        (-> body val :body)]\n                                         :body [nil (val body)])\n             process-arg   (fn [[arg-type arg]]\n                             (as-> arg arg\n                               (case arg-type\n                                 :sym [arg-type arg]\n                                 :seq [arg-type (update arg :as #(or % {:as :as :sym (gensym \"arg_\")}))]\n                                 :map [arg-type (update arg :as #(or % (gensym \"arg_\")))])))\n             ;; NOTE: usage of extract-arg isn't elegant, there's duplication, refactor\n             extract-arg   (fn [[arg-type arg]]\n                             (case arg-type\n                               :sym arg\n                               :seq (get-in arg [:as :sym])\n                               :map (:as arg)\n                               nil))\n             {:keys [file line]} (if (cljs-env? env)\n                                   (meta fn-name)\n                                   {:file #?(:clj *file* :cljs \"N/A\")\n                                    :line (some-> env :form meta :line)})\n             unform-arg    #(->> % (s/unform ::binding-form) unscrew-vec-unform)\n             reg-args      (->> args :args (mapv process-arg))\n             arg->sym      #(let [f (into {} [%])]\n                              (or\n                                (:sym f)\n                                (some-> f :seq :as :sym)\n                                (some-> f :map :as)))\n             reg-arg-names (mapv arg->sym reg-args)\n             var-arg       (some-> args :varargs :form process-arg)\n             arg-list      (vec (concat (map unform-arg reg-args)\n                                  (when var-arg ['& (unform-arg var-arg)])))\n             sym-arg-list  (if var-arg\n                             (conj reg-arg-names (arg->sym var-arg))\n                             reg-arg-names)\n             body-forms    orig-body-forms\n             where         (str file \":\" line \" \" fn-name \"'s\")\n             argspec       (gensym \"argspec\")\n             opts          {:fn-name   where :emit-spec? emit-spec?\n                            :log-level log-level :throw? throw? :vararg? (boolean var-arg)}\n             args-check    `(when ~argspec (run-check true ~opts ~argspec ~sym-arg-list))\n             retspec       (gensym \"retspec\")\n             ret           (gensym \"ret\")\n             ret-check     `(when ~retspec (run-check false ~opts ~retspec ~ret))\n             real-function `(fn ~arg-list ~@body-forms)\n             f             (gensym \"f\")\n             call          (if (boolean var-arg)\n                             `(cond\n                                (map? ~(last sym-arg-list)) (apply ~f ~@(butlast sym-arg-list) (apply concat (last ~sym-arg-list)))\n                                (seq ~(last sym-arg-list)) (apply ~f ~@sym-arg-list)\n                                :else (~f ~@(butlast sym-arg-list)))\n                             `(~f ~@sym-arg-list))]\n         `(~@(remove nil? [arg-list prepost])\n            (let [{~argspec :args ~retspec :ret} ~fspec]\n              ~args-check\n              (let [~f ~real-function\n                    ~ret ~call]\n                ~ret-check\n                ~ret)))))\n\n     (defn- generate-defn\n       [forms private env]\n       (let [conformed-gdefn   (s/conform ::>defn-args forms)\n             fn-bodies         (:bs conformed-gdefn)\n             arity             (key fn-bodies)\n             fn-name           (:name conformed-gdefn)\n             docstring         (:docstring conformed-gdefn)\n             meta-map          (merge (:meta conformed-gdefn)\n                                 (generate-type-annotations env fn-bodies)\n                                 {::guardrails true})\n             ;;; Assemble the config\n             {:keys [defn-macro emit-spec?] :as config} (cfg/merge-config env (meta fn-name) meta-map)\n             defn-sym          (cond defn-macro (with-meta (symbol defn-macro) {:private private})\n                                     private 'defn-\n                                     :else 'defn)\n             ;;; Code generation\n             fdef-body         (generate-fspec-body fn-bodies)\n             fdef              (when (and fdef-body emit-spec?) `(s/fdef ~fn-name ~@fdef-body))\n             individual-arity-fspecs\n                               (map (fn [{:keys [args gspec]}]\n                                      (when gspec\n                                        (gspec->fspec* args gspec true false false)))\n                                 (val fn-bodies))\n\n             process-fn-bodies (fn []\n                                 (let [process-cfg {:env     env\n                                                    :config  config\n                                                    :fn-name fn-name}]\n                                   (case arity\n                                     :arity-1 (->> fn-bodies val (process-defn-body process-cfg `(s/fspec ~@fdef-body)))\n                                     :arity-n (map (partial process-defn-body process-cfg)\n                                                individual-arity-fspecs\n                                                (val fn-bodies)))))\n             main-defn         `(~@(remove nil? [defn-sym fn-name docstring meta-map])\n                                  ~@(process-fn-bodies))]\n         `(do ~fdef (declare ~fn-name) ~main-defn)))\n\n     (defmacro emit-specs? []\n       (get (cfg/get-env-config) :emit-spec? true))\n\n     ;;;; Main macros and public API\n\n     (s/def ::>defn-args\n       (s/and seq?                                          ; REVIEW\n         (s/cat :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 ;; TODO: add tail-attr-map support after this\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n\n\n     (defmacro >defn\n       \"Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (if (cfg/get-env-config)\n         (cond-> (remove nil? (generate-defn forms false (assoc &env :form &form)))\n           (cljs-env? &env) clj->cljs)\n         (clean-defn 'defn forms)))\n\n     (s/fdef >defn :args ::>defn-args)\n\n\n     ;; NOTE: lots of duplication - refactor this to set/pass ^:private differently and call >defn\n     (defmacro >defn-\n       \"Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (if (cfg/get-env-config)\n         (cond-> (remove nil? (generate-defn forms true &env))\n           (cljs-env? &env) clj->cljs)\n         (clean-defn 'defn- forms)))\n\n     (s/fdef >defn- :args ::>defn-args)\n\n     (defmacro >def\n       \"Simple pass-through to `s/def`, except it strips the\n       specs in production \u2013 use for data specs you don't need\n       in production when you want to minimise your build size.\n\n       You can optionally send a documentation string as the second parameter, this\n       is intended to be informational for the code reader, currently this is not stored\n       anywhere, meaning you can't access this string at runtime.\"\n       ([k spec-form]\n        (when (emit-specs?)\n          (cond-> `(s/def ~k ~spec-form)\n            (cljs-env? &env) clj->cljs)))\n       ([k _doc spec-form]\n        `(>def ~k ~spec-form)))\n\n     (s/def ::>fdef-args\n       (s/and seq?                                          ;REVIEW\n         (s/cat :name (s/or :sym symbol? :key qualified-keyword?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n     (defmacro >fdef\n       \"Defines an fspec using gspec syntax \u2013 pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). \"\n       {:arglists '([name [params*] gspec]\n                    [name ([params*] gspec) +])}\n       [& forms]\n       (when (emit-specs?)\n         (cond-> (remove nil? (generate-fdef &env forms))\n           (cljs-env? &env) clj->cljs)))\n\n     (s/fdef >fdef :args ::>fdef-args)))\n"]}