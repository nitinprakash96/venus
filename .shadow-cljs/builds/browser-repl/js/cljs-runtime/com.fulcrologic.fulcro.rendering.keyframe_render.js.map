{"version":3,"sources":["com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],"mappings":";AAOA;;;;;;;;;;;;gEAAA,4EAAAA,5IAAMI,wIAWHC;AAXH,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAWyCO;wBAXzC,AAAAL,4CAAAF,eAAA,/EAWeK;qBAXf,AAAAH,4CAAAF,eAAA,5EAW2BM;AAX3B,AAYE,IAAAE,6CAAUE;IAAVD,6CAAgCJ;AAAhC,AAAA,gEAAAI,/DAAUC;;AAAV,IAAA,AACE,IAAAC,aAA2EP;IAA3EO,iBAAA,AAAAV,4BAAAU;mBAAA,AAAAT,4CAAAS,eAAA,1EAAiDG;iBAAjD,AAAAZ,4CAAAS,eAAA,xEAA8DI;IAA9DH,aAAA,AAAAC,gBACuFC;IADvFF,iBAAA,AAAAX,4BAAAW;mBAAA,AAAAV,4CAAAU,eAAA,1EACiDI;iBADjD,AAAAd,4CAAAU,eAAA,xEAC8DK;iBAD9D,AAAAf,4CAAAU,eAAA,xEACyEM;IACnEC,UAAiB,kBAAIb,gBACF,iBAAAc,mBAAI,2DAAA,3DAACC,uDAAiBjB;AAAtB,AAAA,oBAAAgB;AAAAA;;AAAA,IAAAA,uBAAmDE;AAAnD,AAAA,oBAAAF;AAAAA;;AAAiFG;;;KACjF,iBAAAH,mBAAI,2DAAA,3DAACC,uDAAiBjB;AAAtB,AAAA,oBAAAgB;AAAAA;;AAAkDG;;;gBAJ3E,AAAAV,ZAKMW,4BAAkBT;IAClBU,QAAiB,AAACC,0EAAeT,WAAWO;IAC5CG,YAAiB,kBAAIF,OACF,AAACG,0DAAaH,MAAMD,UAAUA,WAC9BA;IACnBK,WACkB,gCAAA,dAAMb,cACJ,iBAAAc,WAAI,CAACd,6CAAAA,wDAAAA,bAAaW,oCAAAA;IAAlBI,WAA6Bb;AAA7B,AAAA,sFAAAY,SAAAC,8BAAAD,SAAAC,9HAACZ,wCAAAA,2DAAAA;KADH;AAXxB,AAaE,gFAAA,hFAACa,mDAAMlB,aAAamB,+IAAmDJ;;AAC9DA;UAfb,AAAA,gEAAArB,/DAAUE","names":["p__55819","map__55821","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.rendering.keyframe-render/render!","app","force-root?","hydrate?","options","*blindly-render*-orig-val__55823","*blindly-render*-temp-val__55824","com.fulcrologic.fulcro.components/*blindly-render*","map__55825","map__55826","cljs.core/deref","runtime-atom","state-atom","root-factory","root-class","mount-node","r!","or__4212__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","js/ReactDOM.hydrate","js/ReactDOM.render","state-map","query","com.fulcrologic.fulcro.components.get_query","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","app-root","G__55832","G__55833","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.fulcro.rendering.keyframe-render\n  \"The keyframe optimized render.\"\n  (:require\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.components :as comp]))\n\n(defn render!\n  \"Render the UI. The keyframe render runs a full UI query and then asks React to render the root component.\n  The optimizations for this kind of render are purely those provided by `defsc`'s default\n  shouldComponentUpdate, which causes component to act like React PureComponent (though the props compare in cljs\n  is often faster).\n\n  If `:hydrate?` is true it will use the React hydrate functionality (on browsers) to render over\n  server-rendered content in the DOM.\n\n  If `:force-root? true` is included in the options map then not only will this do a keyframe update, it will also\n  force all components to return `true` from `shouldComponentUpdate`.\"\n  [app {:keys [force-root? hydrate?] :as options}]\n  (binding [comp/*blindly-render* force-root?]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!               (if hydrate?\n                             (or (ah/app-algorithm app :hydrate-root!) #?(:cljs js/ReactDOM.hydrate) #?(:cljs js/ReactDOM.render))\n                             (or (ah/app-algorithm app :render-root!) #?(:cljs js/ReactDOM.render)))\n          state-map        @state-atom\n          query            (comp/get-query root-class state-map)\n          data-tree        (if query\n                             (fdn/db->tree query state-map state-map)\n                             state-map)\n          app-root #?(:clj {}\n                      :cljs (when root-factory\n                              (r! (root-factory data-tree) mount-node)))]\n      (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/app-root app-root)\n      #?(:cljs app-root))))\n"]}